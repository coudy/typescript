=== tests/cases/compiler/switchStatements.ts ===
Line 0 col 7 IdentifierName "M" = M
Line 1 col 20 IdentifierName "fn" = typeof fn
Line 1 col 23 IdentifierName "x" = number
Line 6 col 4 IdentifierName "x" = any
Line 7 col 8 IdentifierName "x" = any
Line 12 col 9 IdentifierName "undefined" = any
Line 13 col 9 ObjectCreationExpression "new Date(12)" = Date
Line 13 col 13 IdentifierName "Date" = { prototype: Date; parse(s: string): number; UTC(year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): number; now(): number; (): string; new(): Date; new(value: number): Date; new(value: string): Date; new(year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): Date; }
Line 14 col 9 ObjectCreationExpression "new Object()" = Object
Line 14 col 13 IdentifierName "Object" = { prototype: Object; getPrototypeOf(o: any): any; getOwnPropertyDescriptor(o: any, p: string): PropertyDescriptor; getOwnPropertyNames(o: any): string[]; create(o: any, properties?: PropertyDescriptorMap): any; defineProperty(o: any, p: string, attributes: PropertyDescriptor): any; defineProperties(o: any, properties: PropertyDescriptorMap): any; seal(o: any): any; freeze(o: any): any; preventExtensions(o: any): any; isSealed(o: any): boolean; isFrozen(o: any): boolean; isExtensible(o: any): boolean; keys(o: any): string[]; (): any; (value: any): any; new(value?: any): Object; }
Line 16 col 8 ArrayLiteralExpression "[]" = any[]
Line 17 col 9 ObjectLiteralExpression "{}" = {}
Line 18 col 9 ObjectLiteralExpression "{ id: 12 }" = { id: number; }
Line 18 col 11 IdentifierName "id" = number
Line 19 col 8 ArrayLiteralExpression "['a']" = string[]
Line 20 col 9 TypeOfExpression "typeof x" = string
Line 20 col 16 IdentifierName "x" = any
Line 21 col 9 TypeOfExpression "typeof M" = string
Line 21 col 16 IdentifierName "M" = typeof M
Line 22 col 9 InvocationExpression "M.fn(1)" = string
Line 22 col 9 MemberAccessExpression "M.fn" = typeof M.fn
Line 22 col 9 IdentifierName "M" = typeof M
Line 22 col 11 IdentifierName "fn" = typeof M.fn
Line 23 col 9 ParenthesizedArrowFunctionExpression "<T>(x: number) => ''" = <T>(x: number) => string
Line 23 col 10 IdentifierName "T" = T
Line 23 col 13 IdentifierName "x" = number
Line 24 col 9 InvocationExpression "(<T>(x: number) => '')(2)" = string
Line 24 col 9 ParenthesizedExpression "(<T>(x: number) => '')" = <T>(x: number) => string
Line 24 col 10 ParenthesizedArrowFunctionExpression "<T>(x: number) => ''" = <T>(x: number) => string
Line 24 col 11 IdentifierName "T" = T
Line 24 col 14 IdentifierName "x" = number
Line 29 col 6 IdentifierName "C" = C
Line 29 col 10 IdentifierName "id" = number
Line 30 col 6 IdentifierName "D" = D
Line 30 col 16 IdentifierName "C" = C
Line 30 col 20 IdentifierName "name" = string
Line 32 col 8 ObjectCreationExpression "new C()" = C
Line 32 col 12 IdentifierName "C" = typeof C
Line 33 col 9 ObjectCreationExpression "new D()" = D
Line 33 col 13 IdentifierName "D" = typeof D
Line 34 col 9 ObjectLiteralExpression "{ id: 12, name: '' }" = { id: number; name: string; }
Line 34 col 11 IdentifierName "id" = number
Line 34 col 19 IdentifierName "name" = string
Line 35 col 9 ObjectCreationExpression "new C()" = C
Line 35 col 13 IdentifierName "C" = typeof C
Line 42 col 8 IdentifierName "undefined" = any
Line 43 col 8 ObjectCreationExpression "new Date(12)" = Date
Line 43 col 12 IdentifierName "Date" = { prototype: Date; parse(s: string): number; UTC(year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): number; now(): number; (): string; new(): Date; new(value: number): Date; new(value: string): Date; new(year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): Date; }
Line 44 col 8 ObjectCreationExpression "new Object()" = Object
Line 44 col 12 IdentifierName "Object" = { prototype: Object; getPrototypeOf(o: any): any; getOwnPropertyDescriptor(o: any, p: string): PropertyDescriptor; getOwnPropertyNames(o: any): string[]; create(o: any, properties?: PropertyDescriptorMap): any; defineProperty(o: any, p: string, attributes: PropertyDescriptor): any; defineProperties(o: any, properties: PropertyDescriptorMap): any; seal(o: any): any; freeze(o: any): any; preventExtensions(o: any): any; isSealed(o: any): boolean; isFrozen(o: any): boolean; isExtensible(o: any): boolean; keys(o: any): string[]; (): any; (value: any): any; new(value?: any): Object; }
Line 46 col 8 ArrayLiteralExpression "[]" = any[]
Line 47 col 8 ObjectLiteralExpression "{}" = {}
Line 48 col 8 ObjectLiteralExpression "{ id: 12 }" = { id: number; }
Line 48 col 10 IdentifierName "id" = number
Line 49 col 8 ArrayLiteralExpression "['a']" = string[]
Line 50 col 8 ParenthesizedArrowFunctionExpression "<T>(x: number) => ''" = <T>(x: number) => string
Line 50 col 9 IdentifierName "T" = T
Line 50 col 12 IdentifierName "x" = number
Line 51 col 8 InvocationExpression "(<T>(x: T) => '')(1)" = string
Line 51 col 8 ParenthesizedExpression "(<T>(x: T) => '')" = <T>(x: T) => string
Line 51 col 9 ParenthesizedArrowFunctionExpression "<T>(x: T) => ''" = <T>(x: T) => string
Line 51 col 10 IdentifierName "T" = T
Line 51 col 13 IdentifierName "x" = T
Line 51 col 16 IdentifierName "T" = T