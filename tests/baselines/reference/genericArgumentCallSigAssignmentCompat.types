=== tests/cases/compiler/genericArgumentCallSigAssignmentCompat.ts ===
Line 0 col 7 IdentifierName "Underscore" = Underscore
Line 1 col 21 IdentifierName "Iterator" = Iterator<T, U>
Line 1 col 30 IdentifierName "T" = T
Line 1 col 33 IdentifierName "U" = U
Line 2 col 9 IdentifierName "value" = T
Line 2 col 16 IdentifierName "T" = T
Line 2 col 19 IdentifierName "index" = any
Line 2 col 31 IdentifierName "list" = any
Line 2 col 43 IdentifierName "U" = U
Line 5 col 21 IdentifierName "Static" = Static
Line 6 col 0 IdentifierName "all" = <T>(list: T[], iterator?: Iterator<T, boolean>, context?: any) => boolean
Line 6 col 12 IdentifierName "T" = T
Line 6 col 15 IdentifierName "list" = T[]
Line 6 col 21 IdentifierName "T" = T
Line 6 col 26 IdentifierName "iterator" = Iterator<T, boolean>
Line 6 col 37 IdentifierName "Iterator" = Iterator<T, U>
Line 6 col 46 IdentifierName "T" = T
Line 6 col 59 IdentifierName "context" = any
Line 7 col 0 IdentifierName "identity" = <T>(value: T) => T
Line 7 col 17 IdentifierName "T" = T
Line 7 col 20 IdentifierName "value" = T
Line 7 col 27 IdentifierName "T" = T
Line 7 col 31 IdentifierName "T" = T
Line 11 col 12 IdentifierName "_" = Underscore.Static
Line 11 col 15 IdentifierName "Underscore" = Underscore
Line 11 col 26 IdentifierName "Static" = Underscore.Static
Line 12 col 0 InvocationExpression "// No error, Call signatures of types '<T>(value: T) => T' and 'Underscore.Iterator<{}, boolean>' are compatible when instantiated with any.
// Ideally, we would not have a generic signature here, because it should be instantiated with {} during inferential typing
_.all([true, 1, null, 'yes'], _.identity)" = boolean
Line 12 col 0 MemberAccessExpression "// No error, Call signatures of types '<T>(value: T) => T' and 'Underscore.Iterator<{}, boolean>' are compatible when instantiated with any.
// Ideally, we would not have a generic signature here, because it should be instantiated with {} during inferential typing
_.all" = <T>(list: T[], iterator?: Underscore.Iterator<T, boolean>, context?: any) => boolean
Line 12 col 0 IdentifierName "// No error, Call signatures of types '<T>(value: T) => T' and 'Underscore.Iterator<{}, boolean>' are compatible when instantiated with any.
// Ideally, we would not have a generic signature here, because it should be instantiated with {} during inferential typing
_" = Underscore.Static
Line 15 col 2 IdentifierName "all" = <T>(list: T[], iterator?: Underscore.Iterator<T, boolean>, context?: any) => boolean
Line 15 col 6 ArrayLiteralExpression "[true, 1, null, 'yes']" = {}[]
Line 15 col 30 MemberAccessExpression "_.identity" = <T>(value: T) => T
Line 15 col 30 IdentifierName "_" = Underscore.Static
Line 15 col 32 IdentifierName "identity" = <T>(value: T) => T
Line 16 col 0 InvocationExpression "// Ok, because fixing makes us infer boolean for T
_.all([true], _.identity)" = boolean
Line 16 col 0 MemberAccessExpression "// Ok, because fixing makes us infer boolean for T
_.all" = <T>(list: T[], iterator?: Underscore.Iterator<T, boolean>, context?: any) => boolean
Line 16 col 0 IdentifierName "// Ok, because fixing makes us infer boolean for T
_" = Underscore.Static
Line 18 col 2 IdentifierName "all" = <T>(list: T[], iterator?: Underscore.Iterator<T, boolean>, context?: any) => boolean
Line 18 col 6 ArrayLiteralExpression "[true]" = boolean[]
Line 18 col 14 MemberAccessExpression "_.identity" = <T>(value: T) => T
Line 18 col 14 IdentifierName "_" = Underscore.Static
Line 18 col 16 IdentifierName "identity" = <T>(value: T) => T