=== tests/cases/compiler/aliasUsageInOrExpression_main.ts ===
Line 0 col 7 IdentifierName "Backbone" = Backbone
Line 1 col 7 IdentifierName "moduleA" = moduleA
Line 2 col 10 IdentifierName "IHasVisualizationModel" = IHasVisualizationModel
Line 3 col 0 IdentifierName "VisualizationModel" = typeof Backbone.Model
Line 3 col 31 IdentifierName "Backbone" = typeof Backbone
Line 3 col 40 IdentifierName "Model" = typeof Backbone.Model
Line 5 col 4 IdentifierName "i" = IHasVisualizationModel
Line 5 col 7 IdentifierName "IHasVisualizationModel" = IHasVisualizationModel
Line 6 col 4 IdentifierName "d1" = IHasVisualizationModel
Line 6 col 9 LogicalOrExpression "i || moduleA" = IHasVisualizationModel
Line 6 col 9 IdentifierName "i" = IHasVisualizationModel
Line 6 col 14 IdentifierName "moduleA" = typeof moduleA
Line 7 col 4 IdentifierName "d2" = IHasVisualizationModel
Line 7 col 8 IdentifierName "IHasVisualizationModel" = IHasVisualizationModel
Line 7 col 33 LogicalOrExpression "i || moduleA" = IHasVisualizationModel
Line 7 col 33 IdentifierName "i" = IHasVisualizationModel
Line 7 col 38 IdentifierName "moduleA" = typeof moduleA
Line 8 col 4 IdentifierName "d2" = IHasVisualizationModel
Line 8 col 8 IdentifierName "IHasVisualizationModel" = IHasVisualizationModel
Line 8 col 33 LogicalOrExpression "moduleA || i" = IHasVisualizationModel
Line 8 col 33 IdentifierName "moduleA" = typeof moduleA
Line 8 col 44 IdentifierName "i" = IHasVisualizationModel
Line 9 col 4 IdentifierName "e" = { x: IHasVisualizationModel; }
Line 9 col 9 IdentifierName "x" = IHasVisualizationModel
Line 9 col 12 IdentifierName "IHasVisualizationModel" = IHasVisualizationModel
Line 9 col 39 LogicalOrExpression "<{ x: IHasVisualizationModel }>null || { x: moduleA }" = { x: IHasVisualizationModel; }
Line 9 col 39 CastExpression "<{ x: IHasVisualizationModel }>null" = { x: IHasVisualizationModel; }
Line 9 col 42 IdentifierName "x" = IHasVisualizationModel
Line 9 col 45 IdentifierName "IHasVisualizationModel" = IHasVisualizationModel
Line 9 col 78 ObjectLiteralExpression "{ x: moduleA }" = { x: typeof moduleA; }
Line 9 col 80 IdentifierName "x" = typeof moduleA
Line 9 col 83 IdentifierName "moduleA" = typeof moduleA
Line 10 col 4 IdentifierName "f" = { x: IHasVisualizationModel; }
Line 10 col 9 IdentifierName "x" = IHasVisualizationModel
Line 10 col 12 IdentifierName "IHasVisualizationModel" = IHasVisualizationModel
Line 10 col 39 ConditionalExpression "<{ x: IHasVisualizationModel }>null ? { x: moduleA } : null" = { x: IHasVisualizationModel; }
Line 10 col 39 CastExpression "<{ x: IHasVisualizationModel }>null" = { x: IHasVisualizationModel; }
Line 10 col 42 IdentifierName "x" = IHasVisualizationModel
Line 10 col 45 IdentifierName "IHasVisualizationModel" = IHasVisualizationModel
Line 10 col 77 ObjectLiteralExpression "{ x: moduleA }" = { x: typeof moduleA; }
Line 10 col 79 IdentifierName "x" = typeof moduleA
Line 10 col 82 IdentifierName "moduleA" = typeof moduleA
=== tests/cases/compiler/aliasUsageInOrExpression_backbone.ts ===
Line 0 col 13 IdentifierName "Model" = Model
Line 1 col 11 IdentifierName "someData" = string
=== tests/cases/compiler/aliasUsageInOrExpression_moduleA.ts ===
Line 0 col 7 IdentifierName "Backbone" = Backbone
Line 1 col 13 IdentifierName "VisualizationModel" = VisualizationModel
Line 1 col 40 IdentifierName "Backbone" = Backbone
Line 1 col 49 IdentifierName "Model" = Backbone.Model