=== tests/cases/compiler/underscoreTest1_underscoreTests.ts ===
Line 2 col 12 IdentifierName "$" = any
Line 3 col 17 IdentifierName "alert" = typeof alert
Line 3 col 23 IdentifierName "x" = string
Line 4 col 0 InvocationExpression "_.each([1, 2, 3], (num) => alert(num.toString()))" = void
Line 4 col 0 MemberAccessExpression "_.each" = { <T>(list: T[], iterator: Iterator<T, void>, context?: any): void; <T>(list: Dictionary<T>, iterator: Iterator<T, void>, context?: any): void; }
Line 4 col 0 IdentifierName "_" = Underscore.Static
Line 5 col 2 IdentifierName "each" = { <T>(list: T[], iterator: Iterator<T, void>, context?: any): void; <T>(list: Dictionary<T>, iterator: Iterator<T, void>, context?: any): void; }
Line 5 col 7 ArrayLiteralExpression "[1, 2, 3]" = number[]
Line 5 col 18 ParenthesizedArrowFunctionExpression "(num) => alert(num.toString())" = (num: number) => void
Line 5 col 19 IdentifierName "num" = number
Line 5 col 27 InvocationExpression "alert(num.toString())" = void
Line 5 col 27 IdentifierName "alert" = typeof alert
Line 5 col 33 InvocationExpression "num.toString()" = string
Line 5 col 33 MemberAccessExpression "num.toString" = (radix?: number) => string
Line 5 col 33 IdentifierName "num" = number
Line 5 col 37 IdentifierName "toString" = (radix?: number) => string
Line 6 col 0 InvocationExpression "_.each({ one: 1, two: 2, three: 3 }, (value: number, key?: string) => alert(value.toString()))" = void
Line 6 col 0 MemberAccessExpression "_.each" = { <T>(list: T[], iterator: Iterator<T, void>, context?: any): void; <T>(list: Dictionary<T>, iterator: Iterator<T, void>, context?: any): void; }
Line 6 col 0 IdentifierName "_" = Underscore.Static
Line 6 col 2 IdentifierName "each" = { <T>(list: T[], iterator: Iterator<T, void>, context?: any): void; <T>(list: Dictionary<T>, iterator: Iterator<T, void>, context?: any): void; }
Line 6 col 7 ObjectLiteralExpression "{ one: 1, two: 2, three: 3 }" = { one: number; two: number; three: number; [x: string]: number; }
Line 6 col 9 IdentifierName "one" = number
Line 6 col 17 IdentifierName "two" = number
Line 6 col 25 IdentifierName "three" = number
Line 6 col 37 ParenthesizedArrowFunctionExpression "(value: number, key?: string) => alert(value.toString())" = (value: number, key?: string) => void
Line 6 col 38 IdentifierName "value" = number
Line 6 col 53 IdentifierName "key" = string
Line 6 col 70 InvocationExpression "alert(value.toString())" = void
Line 6 col 70 IdentifierName "alert" = typeof alert
Line 6 col 76 InvocationExpression "value.toString()" = string
Line 6 col 76 MemberAccessExpression "value.toString" = (radix?: number) => string
Line 6 col 76 IdentifierName "value" = number
Line 6 col 82 IdentifierName "toString" = (radix?: number) => string
Line 7 col 0 InvocationExpression "_.map([1, 2, 3], (num) => num * 3)" = number[]
Line 7 col 0 MemberAccessExpression "_.map" = { <T, U>(list: T[], iterator: Iterator<T, U>, context?: any): U[]; <T, U>(list: Dictionary<T>, iterator: Iterator<T, U>, context?: any): U[]; }
Line 7 col 0 IdentifierName "_" = Underscore.Static
Line 8 col 2 IdentifierName "map" = { <T, U>(list: T[], iterator: Iterator<T, U>, context?: any): U[]; <T, U>(list: Dictionary<T>, iterator: Iterator<T, U>, context?: any): U[]; }
Line 8 col 6 ArrayLiteralExpression "[1, 2, 3]" = number[]
Line 8 col 17 ParenthesizedArrowFunctionExpression "(num) => num * 3" = (num: number) => number
Line 8 col 18 IdentifierName "num" = number
Line 8 col 26 MultiplyExpression "num * 3" = number
Line 8 col 26 IdentifierName "num" = number
Line 9 col 0 InvocationExpression "_.map({ one: 1, two: 2, three: 3 }, (value: number, key?: string) => value * 3)" = number[]
Line 9 col 0 MemberAccessExpression "_.map" = { <T, U>(list: T[], iterator: Iterator<T, U>, context?: any): U[]; <T, U>(list: Dictionary<T>, iterator: Iterator<T, U>, context?: any): U[]; }
Line 9 col 0 IdentifierName "_" = Underscore.Static
Line 9 col 2 IdentifierName "map" = { <T, U>(list: T[], iterator: Iterator<T, U>, context?: any): U[]; <T, U>(list: Dictionary<T>, iterator: Iterator<T, U>, context?: any): U[]; }
Line 9 col 6 ObjectLiteralExpression "{ one: 1, two: 2, three: 3 }" = { one: number; two: number; three: number; [x: string]: number; }
Line 9 col 8 IdentifierName "one" = number
Line 9 col 16 IdentifierName "two" = number
Line 9 col 24 IdentifierName "three" = number
Line 9 col 36 ParenthesizedArrowFunctionExpression "(value: number, key?: string) => value * 3" = (value: number, key?: string) => number
Line 9 col 37 IdentifierName "value" = number
Line 9 col 52 IdentifierName "key" = string
Line 9 col 69 MultiplyExpression "value * 3" = number
Line 9 col 69 IdentifierName "value" = number
Line 11 col 4 IdentifierName "sum" = number
Line 11 col 10 InvocationExpression "_.reduce([1, 2, 3], (memo, num) => memo + num, 0)" = number
Line 11 col 10 MemberAccessExpression "_.reduce" = { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
Line 11 col 10 IdentifierName "_" = Underscore.Static
Line 11 col 12 IdentifierName "reduce" = { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
Line 11 col 19 ArrayLiteralExpression "[1, 2, 3]" = number[]
Line 11 col 30 ParenthesizedArrowFunctionExpression "(memo, num) => memo + num" = (memo: number, num: number) => number
Line 11 col 31 IdentifierName "memo" = number
Line 11 col 37 IdentifierName "num" = number
Line 11 col 45 AddExpression "memo + num" = number
Line 11 col 45 IdentifierName "memo" = number
Line 11 col 52 IdentifierName "num" = number
Line 13 col 4 IdentifierName "list" = number[][]
Line 13 col 11 ArrayLiteralExpression "[[0, 1], [2, 3], [4, 5]]" = number[][]
Line 13 col 12 ArrayLiteralExpression "[0, 1]" = number[]
Line 13 col 20 ArrayLiteralExpression "[2, 3]" = number[]
Line 13 col 28 ArrayLiteralExpression "[4, 5]" = number[]
Line 14 col 4 IdentifierName "flat" = number[]
Line 14 col 11 InvocationExpression "_.reduceRight(list, (a, b) => a.concat(b), [])" = number[]
Line 14 col 11 MemberAccessExpression "_.reduceRight" = { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
Line 14 col 11 IdentifierName "_" = Underscore.Static
Line 14 col 13 IdentifierName "reduceRight" = { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
Line 14 col 25 IdentifierName "list" = number[][]
Line 14 col 31 ParenthesizedArrowFunctionExpression "(a, b) => a.concat(b)" = (a: number[], b: number[]) => number[]
Line 14 col 32 IdentifierName "a" = number[]
Line 14 col 35 IdentifierName "b" = number[]
Line 14 col 41 InvocationExpression "a.concat(b)" = number[]
Line 14 col 41 MemberAccessExpression "a.concat" = { <U extends number[]>(...items: U[]): number[]; (...items: number[]): number[]; }
Line 14 col 41 IdentifierName "a" = number[]
Line 14 col 43 IdentifierName "concat" = { <U extends number[]>(...items: U[]): number[]; (...items: number[]): number[]; }
Line 14 col 50 IdentifierName "b" = number[]
Line 14 col 54 ArrayLiteralExpression "[]" = number[]
Line 16 col 4 IdentifierName "even" = number
Line 16 col 11 InvocationExpression "_.find([1, 2, 3, 4, 5, 6], (num) => num % 2 == 0)" = number
Line 16 col 11 MemberAccessExpression "_.find" = { <T>(list: T[], iterator: Iterator<T, boolean>, context?: any): T; <T>(list: Dictionary<T>, iterator: Iterator<T, boolean>, context?: any): T; }
Line 16 col 11 IdentifierName "_" = Underscore.Static
Line 16 col 13 IdentifierName "find" = { <T>(list: T[], iterator: Iterator<T, boolean>, context?: any): T; <T>(list: Dictionary<T>, iterator: Iterator<T, boolean>, context?: any): T; }
Line 16 col 18 ArrayLiteralExpression "[1, 2, 3, 4, 5, 6]" = number[]
Line 16 col 38 ParenthesizedArrowFunctionExpression "(num) => num % 2 == 0" = (num: number) => boolean
Line 16 col 39 IdentifierName "num" = number
Line 16 col 47 EqualsWithTypeConversionExpression "num % 2 == 0" = boolean
Line 16 col 47 ModuloExpression "num % 2" = number
Line 16 col 47 IdentifierName "num" = number
Line 18 col 4 IdentifierName "evens" = number[]
Line 18 col 12 InvocationExpression "_.filter([1, 2, 3, 4, 5, 6], (num) => num % 2 == 0)" = number[]
Line 18 col 12 MemberAccessExpression "_.filter" = { <T>(list: T[], iterator: Iterator<T, boolean>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator<T, boolean>, context?: any): T[]; }
Line 18 col 12 IdentifierName "_" = Underscore.Static
Line 18 col 14 IdentifierName "filter" = { <T>(list: T[], iterator: Iterator<T, boolean>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator<T, boolean>, context?: any): T[]; }
Line 18 col 21 ArrayLiteralExpression "[1, 2, 3, 4, 5, 6]" = number[]
Line 18 col 41 ParenthesizedArrowFunctionExpression "(num) => num % 2 == 0" = (num: number) => boolean
Line 18 col 42 IdentifierName "num" = number
Line 18 col 50 EqualsWithTypeConversionExpression "num % 2 == 0" = boolean
Line 18 col 50 ModuloExpression "num % 2" = number
Line 18 col 50 IdentifierName "num" = number
Line 20 col 4 IdentifierName "listOfPlays" = { title: string; author: string; year: number; }[]
Line 20 col 18 ArrayLiteralExpression "[{ title: "Cymbeline", author: "Shakespeare", year: 1611 }, { title: "The Tempest", author: "Shakespeare", year: 1611 }, { title: "Other", author: "Not Shakespeare", year: 2012 }]" = { title: string; author: string; year: number; }[]
Line 20 col 19 ObjectLiteralExpression "{ title: "Cymbeline", author: "Shakespeare", year: 1611 }" = { title: string; author: string; year: number; }
Line 20 col 21 IdentifierName "title" = string
Line 20 col 41 IdentifierName "author" = string
Line 20 col 64 IdentifierName "year" = number
Line 20 col 78 ObjectLiteralExpression "{ title: "The Tempest", author: "Shakespeare", year: 1611 }" = { title: string; author: string; year: number; }
Line 20 col 80 IdentifierName "title" = string
Line 20 col 102 IdentifierName "author" = string
Line 20 col 125 IdentifierName "year" = number
Line 20 col 139 ObjectLiteralExpression "{ title: "Other", author: "Not Shakespeare", year: 2012 }" = { title: string; author: string; year: number; }
Line 20 col 141 IdentifierName "title" = string
Line 20 col 157 IdentifierName "author" = string
Line 20 col 184 IdentifierName "year" = number
Line 21 col 0 InvocationExpression "_.where(listOfPlays, { author: "Shakespeare", year: 1611 })" = { title: string; author: string; year: number; }[]
Line 21 col 0 MemberAccessExpression "_.where" = { <T>(list: T[], properties: Object): T[]; <T>(list: Dictionary<T>, properties: Object): T[]; }
Line 21 col 0 IdentifierName "_" = Underscore.Static
Line 21 col 2 IdentifierName "where" = { <T>(list: T[], properties: Object): T[]; <T>(list: Dictionary<T>, properties: Object): T[]; }
Line 21 col 8 IdentifierName "listOfPlays" = { title: string; author: string; year: number; }[]
Line 21 col 21 ObjectLiteralExpression "{ author: "Shakespeare", year: 1611 }" = { author: string; year: number; }
Line 21 col 23 IdentifierName "author" = string
Line 21 col 46 IdentifierName "year" = number
Line 23 col 4 IdentifierName "odds" = number[]
Line 23 col 11 InvocationExpression "_.reject([1, 2, 3, 4, 5, 6], (num) => num % 2 == 0)" = number[]
Line 23 col 11 MemberAccessExpression "_.reject" = { <T>(list: T[], iterator: Iterator<T, boolean>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator<T, boolean>, context?: any): T[]; }
Line 23 col 11 IdentifierName "_" = Underscore.Static
Line 23 col 13 IdentifierName "reject" = { <T>(list: T[], iterator: Iterator<T, boolean>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator<T, boolean>, context?: any): T[]; }
Line 23 col 20 ArrayLiteralExpression "[1, 2, 3, 4, 5, 6]" = number[]
Line 23 col 40 ParenthesizedArrowFunctionExpression "(num) => num % 2 == 0" = (num: number) => boolean
Line 23 col 41 IdentifierName "num" = number
Line 23 col 49 EqualsWithTypeConversionExpression "num % 2 == 0" = boolean
Line 23 col 49 ModuloExpression "num % 2" = number
Line 23 col 49 IdentifierName "num" = number
Line 24 col 0 InvocationExpression "_.all([true, 1, null, 'yes'], _.identity)" = boolean
Line 24 col 0 MemberAccessExpression "_.all" = { <T>(list: T[], iterator?: Iterator<T, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator<T, boolean>, context?: any): boolean; }
Line 24 col 0 IdentifierName "_" = Underscore.Static
Line 25 col 2 IdentifierName "all" = { <T>(list: T[], iterator?: Iterator<T, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator<T, boolean>, context?: any): boolean; }
Line 25 col 6 ArrayLiteralExpression "[true, 1, null, 'yes']" = {}[]
Line 25 col 30 MemberAccessExpression "_.identity" = <T>(value: T) => T
Line 25 col 30 IdentifierName "_" = Underscore.Static
Line 25 col 32 IdentifierName "identity" = <T>(value: T) => T
Line 26 col 0 InvocationExpression "_.any([null, 0, 'yes', false])" = boolean
Line 26 col 0 MemberAccessExpression "_.any" = { <T>(list: T[], iterator?: Iterator<T, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator<T, boolean>, context?: any): boolean; }
Line 26 col 0 IdentifierName "_" = Underscore.Static
Line 27 col 2 IdentifierName "any" = { <T>(list: T[], iterator?: Iterator<T, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator<T, boolean>, context?: any): boolean; }
Line 27 col 6 ArrayLiteralExpression "[null, 0, 'yes', false]" = {}[]
Line 28 col 0 InvocationExpression "_.contains([1, 2, 3], 3)" = boolean
Line 28 col 0 MemberAccessExpression "_.contains" = { <T>(list: T[], value: T): boolean; <T>(list: Dictionary<T>, value: T): boolean; }
Line 28 col 0 IdentifierName "_" = Underscore.Static
Line 29 col 2 IdentifierName "contains" = { <T>(list: T[], value: T): boolean; <T>(list: Dictionary<T>, value: T): boolean; }
Line 29 col 11 ArrayLiteralExpression "[1, 2, 3]" = number[]
Line 30 col 0 InvocationExpression "_.invoke([[5, 1, 7], [3, 2, 1]], 'sort')" = any[]
Line 30 col 0 MemberAccessExpression "_.invoke" = { (list: any[], methodName: string, ...args: any[]): any[]; (list: Dictionary<any>, methodName: string, ...args: any[]): any[]; }
Line 30 col 0 IdentifierName "_" = Underscore.Static
Line 31 col 2 IdentifierName "invoke" = { (list: any[], methodName: string, ...args: any[]): any[]; (list: Dictionary<any>, methodName: string, ...args: any[]): any[]; }
Line 31 col 9 ArrayLiteralExpression "[[5, 1, 7], [3, 2, 1]]" = any[]
Line 31 col 10 ArrayLiteralExpression "[5, 1, 7]" = number[]
Line 31 col 21 ArrayLiteralExpression "[3, 2, 1]" = number[]
Line 33 col 4 IdentifierName "stooges" = { name: string; age: number; }[]
Line 33 col 14 ArrayLiteralExpression "[{ name: 'moe', age: 40 }, { name: 'larry', age: 50 }, { name: 'curly', age: 60 }]" = { name: string; age: number; }[]
Line 33 col 15 ObjectLiteralExpression "{ name: 'moe', age: 40 }" = { name: string; age: number; }
Line 33 col 17 IdentifierName "name" = string
Line 33 col 30 IdentifierName "age" = number
Line 33 col 41 ObjectLiteralExpression "{ name: 'larry', age: 50 }" = { name: string; age: number; }
Line 33 col 43 IdentifierName "name" = string
Line 33 col 58 IdentifierName "age" = number
Line 33 col 69 ObjectLiteralExpression "{ name: 'curly', age: 60 }" = { name: string; age: number; }
Line 33 col 71 IdentifierName "name" = string
Line 33 col 86 IdentifierName "age" = number
Line 34 col 0 InvocationExpression "_.pluck(stooges, 'name')" = any[]
Line 34 col 0 MemberAccessExpression "_.pluck" = { (list: any[], propertyName: string): any[]; (list: Dictionary<any>, propertyName: string): any[]; }
Line 34 col 0 IdentifierName "_" = Underscore.Static
Line 34 col 2 IdentifierName "pluck" = { (list: any[], propertyName: string): any[]; (list: Dictionary<any>, propertyName: string): any[]; }
Line 34 col 8 IdentifierName "stooges" = { name: string; age: number; }[]
Line 35 col 0 InvocationExpression "_.max(stooges, (stooge) => stooge.age)" = { name: string; age: number; }
Line 35 col 0 MemberAccessExpression "_.max" = { <T>(list: T[], iterator?: Iterator<T, any>, context?: any): T; <T>(list: Dictionary<T>, iterator?: Iterator<T, any>, context?: any): T; }
Line 35 col 0 IdentifierName "_" = Underscore.Static
Line 36 col 2 IdentifierName "max" = { <T>(list: T[], iterator?: Iterator<T, any>, context?: any): T; <T>(list: Dictionary<T>, iterator?: Iterator<T, any>, context?: any): T; }
Line 36 col 6 IdentifierName "stooges" = { name: string; age: number; }[]
Line 36 col 15 ParenthesizedArrowFunctionExpression "(stooge) => stooge.age" = (stooge: { name: string; age: number; }) => number
Line 36 col 16 IdentifierName "stooge" = { name: string; age: number; }
Line 36 col 27 MemberAccessExpression "stooge.age" = number
Line 36 col 27 IdentifierName "stooge" = { name: string; age: number; }
Line 36 col 34 IdentifierName "age" = number
Line 38 col 4 IdentifierName "numbers" = number[]
Line 38 col 14 ArrayLiteralExpression "[10, 5, 100, 2, 1000]" = number[]
Line 39 col 0 InvocationExpression "_.min(numbers)" = number
Line 39 col 0 MemberAccessExpression "_.min" = { <T>(list: T[], iterator?: Iterator<T, any>, context?: any): T; <T>(list: Dictionary<T>, iterator?: Iterator<T, any>, context?: any): T; }
Line 39 col 0 IdentifierName "_" = Underscore.Static
Line 39 col 2 IdentifierName "min" = { <T>(list: T[], iterator?: Iterator<T, any>, context?: any): T; <T>(list: Dictionary<T>, iterator?: Iterator<T, any>, context?: any): T; }
Line 39 col 6 IdentifierName "numbers" = number[]
Line 40 col 0 InvocationExpression "_.sortBy([1, 2, 3, 4, 5, 6], (num) => Math.sin(num))" = number[]
Line 40 col 0 MemberAccessExpression "_.sortBy" = { <T>(list: T[], iterator: Iterator<T, any>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator<T, any>, context?: any): T[]; <T>(list: T[], propertyName: string): T[]; <T>(list: Dictionary<T>, propertyName: string): T[]; }
Line 40 col 0 IdentifierName "_" = Underscore.Static
Line 41 col 2 IdentifierName "sortBy" = { <T>(list: T[], iterator: Iterator<T, any>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator<T, any>, context?: any): T[]; <T>(list: T[], propertyName: string): T[]; <T>(list: Dictionary<T>, propertyName: string): T[]; }
Line 41 col 9 ArrayLiteralExpression "[1, 2, 3, 4, 5, 6]" = number[]
Line 41 col 29 ParenthesizedArrowFunctionExpression "(num) => Math.sin(num)" = (num: number) => number
Line 41 col 30 IdentifierName "num" = number
Line 41 col 38 InvocationExpression "Math.sin(num)" = number
Line 41 col 38 MemberAccessExpression "Math.sin" = (x: number) => number
Line 41 col 38 IdentifierName "Math" = Math
Line 41 col 43 IdentifierName "sin" = (x: number) => number
Line 41 col 47 IdentifierName "num" = number
Line 42 col 0 InvocationExpression "// not sure how this is typechecking at all.. Math.floor(e) is number not string..?
_([1.3, 2.1, 2.4]).groupBy((e: number, i?: number, list?: number[]) => Math.floor(e))" = Dictionary<number[]>
Line 42 col 0 MemberAccessExpression "// not sure how this is typechecking at all.. Math.floor(e) is number not string..?
_([1.3, 2.1, 2.4]).groupBy" = { (iterator?: Iterator<number, any>, context?: any): Dictionary<number[]>; (propertyName: string): Dictionary<number[]>; }
Line 42 col 0 InvocationExpression "// not sure how this is typechecking at all.. Math.floor(e) is number not string..?
_([1.3, 2.1, 2.4])" = Underscore.WrappedArray<number>
Line 42 col 0 IdentifierName "// not sure how this is typechecking at all.. Math.floor(e) is number not string..?
_" = Underscore.Static
Line 45 col 2 ArrayLiteralExpression "[1.3, 2.1, 2.4]" = number[]
Line 45 col 19 IdentifierName "groupBy" = { (iterator?: Iterator<number, any>, context?: any): Dictionary<number[]>; (propertyName: string): Dictionary<number[]>; }
Line 45 col 27 ParenthesizedArrowFunctionExpression "(e: number, i?: number, list?: number[]) => Math.floor(e)" = (e: number, i?: number, list?: number[]) => number
Line 45 col 28 IdentifierName "e" = number
Line 45 col 39 IdentifierName "i" = number
Line 45 col 51 IdentifierName "list" = number[]
Line 45 col 71 InvocationExpression "Math.floor(e)" = number
Line 45 col 71 MemberAccessExpression "Math.floor" = (x: number) => number
Line 45 col 71 IdentifierName "Math" = Math
Line 45 col 76 IdentifierName "floor" = (x: number) => number
Line 45 col 82 IdentifierName "e" = number
Line 46 col 0 InvocationExpression "_.groupBy([1.3, 2.1, 2.4], (num: number) => Math.floor(num))" = Dictionary<number[]>
Line 46 col 0 MemberAccessExpression "_.groupBy" = { <T>(list: T[], iterator?: Iterator<T, any>, context?: any): Dictionary<T[]>; <T>(list: Dictionary<T>, iterator?: Iterator<T, any>, context?: any): Dictionary<T[]>; <T>(list: T[], propertyName: string): Dictionary<T[]>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<T[]>; }
Line 46 col 0 IdentifierName "_" = Underscore.Static
Line 46 col 2 IdentifierName "groupBy" = { <T>(list: T[], iterator?: Iterator<T, any>, context?: any): Dictionary<T[]>; <T>(list: Dictionary<T>, iterator?: Iterator<T, any>, context?: any): Dictionary<T[]>; <T>(list: T[], propertyName: string): Dictionary<T[]>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<T[]>; }
Line 46 col 10 ArrayLiteralExpression "[1.3, 2.1, 2.4]" = number[]
Line 46 col 27 ParenthesizedArrowFunctionExpression "(num: number) => Math.floor(num)" = (num: number) => number
Line 46 col 28 IdentifierName "num" = number
Line 46 col 44 InvocationExpression "Math.floor(num)" = number
Line 46 col 44 MemberAccessExpression "Math.floor" = (x: number) => number
Line 46 col 44 IdentifierName "Math" = Math
Line 46 col 49 IdentifierName "floor" = (x: number) => number
Line 46 col 55 IdentifierName "num" = number
Line 47 col 0 InvocationExpression "_.groupBy(['one', 'two', 'three'], 'length')" = Dictionary<string[]>
Line 47 col 0 MemberAccessExpression "_.groupBy" = { <T>(list: T[], iterator?: Iterator<T, any>, context?: any): Dictionary<T[]>; <T>(list: Dictionary<T>, iterator?: Iterator<T, any>, context?: any): Dictionary<T[]>; <T>(list: T[], propertyName: string): Dictionary<T[]>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<T[]>; }
Line 47 col 0 IdentifierName "_" = Underscore.Static
Line 47 col 2 IdentifierName "groupBy" = { <T>(list: T[], iterator?: Iterator<T, any>, context?: any): Dictionary<T[]>; <T>(list: Dictionary<T>, iterator?: Iterator<T, any>, context?: any): Dictionary<T[]>; <T>(list: T[], propertyName: string): Dictionary<T[]>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<T[]>; }
Line 47 col 10 ArrayLiteralExpression "['one', 'two', 'three']" = string[]
Line 48 col 0 InvocationExpression "_.countBy([1, 2, 3, 4, 5], (num) => num % 2 == 0 ? 'even' : 'odd')" = Dictionary<number>
Line 48 col 0 MemberAccessExpression "_.countBy" = { <T>(list: T[], iterator?: Iterator<T, any>, context?: any): Dictionary<number>; <T>(list: Dictionary<T>, iterator?: Iterator<T, any>, context?: any): Dictionary<number>; <T>(list: T[], propertyName: string): Dictionary<number>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<number>; }
Line 48 col 0 IdentifierName "_" = Underscore.Static
Line 49 col 2 IdentifierName "countBy" = { <T>(list: T[], iterator?: Iterator<T, any>, context?: any): Dictionary<number>; <T>(list: Dictionary<T>, iterator?: Iterator<T, any>, context?: any): Dictionary<number>; <T>(list: T[], propertyName: string): Dictionary<number>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<number>; }
Line 49 col 10 ArrayLiteralExpression "[1, 2, 3, 4, 5]" = number[]
Line 49 col 27 ParenthesizedArrowFunctionExpression "(num) => num % 2 == 0 ? 'even' : 'odd'" = (num: number) => any
Line 49 col 28 IdentifierName "num" = number
Line 49 col 36 ConditionalExpression "num % 2 == 0 ? 'even' : 'odd'" = string
Line 49 col 36 EqualsWithTypeConversionExpression "num % 2 == 0" = boolean
Line 49 col 36 ModuloExpression "num % 2" = number
Line 49 col 36 IdentifierName "num" = number
Line 50 col 0 InvocationExpression "_.shuffle([1, 2, 3, 4, 5, 6])" = number[]
Line 50 col 0 MemberAccessExpression "_.shuffle" = { <T>(list: T[]): T[]; <T>(list: Dictionary<T>): T[]; }
Line 50 col 0 IdentifierName "_" = Underscore.Static
Line 51 col 2 IdentifierName "shuffle" = { <T>(list: T[]): T[]; <T>(list: Dictionary<T>): T[]; }
Line 51 col 10 ArrayLiteralExpression "[1, 2, 3, 4, 5, 6]" = number[]
Line 52 col 0 InvocationExpression "// (function(){ return _.toArray(arguments).slice(1); })(1, 2, 3, 4);

_.size({ one: 1, two: 2, three: 3 })" = number
Line 52 col 0 MemberAccessExpression "// (function(){ return _.toArray(arguments).slice(1); })(1, 2, 3, 4);

_.size" = { <T>(list: T[]): number; <T>(list: Dictionary<T>): number; }
Line 52 col 0 IdentifierName "// (function(){ return _.toArray(arguments).slice(1); })(1, 2, 3, 4);

_" = Underscore.Static
Line 55 col 2 IdentifierName "size" = { <T>(list: T[]): number; <T>(list: Dictionary<T>): number; }
Line 55 col 7 ObjectLiteralExpression "{ one: 1, two: 2, three: 3 }" = { one: number; two: number; three: number; [x: string]: number; }
Line 55 col 9 IdentifierName "one" = number
Line 55 col 17 IdentifierName "two" = number
Line 55 col 25 IdentifierName "three" = number
Line 56 col 0 InvocationExpression "///////////////////////////////////////////////////////////////////////////////////////

_.first([5, 4, 3, 2, 1])" = number
Line 56 col 0 MemberAccessExpression "///////////////////////////////////////////////////////////////////////////////////////

_.first" = { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
Line 56 col 0 IdentifierName "///////////////////////////////////////////////////////////////////////////////////////

_" = Underscore.Static
Line 59 col 2 IdentifierName "first" = { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
Line 59 col 8 ArrayLiteralExpression "[5, 4, 3, 2, 1]" = number[]
Line 60 col 0 InvocationExpression "_.initial([5, 4, 3, 2, 1])" = number
Line 60 col 0 MemberAccessExpression "_.initial" = { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
Line 60 col 0 IdentifierName "_" = Underscore.Static
Line 60 col 2 IdentifierName "initial" = { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
Line 60 col 10 ArrayLiteralExpression "[5, 4, 3, 2, 1]" = number[]
Line 61 col 0 InvocationExpression "_.last([5, 4, 3, 2, 1])" = number
Line 61 col 0 MemberAccessExpression "_.last" = { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
Line 61 col 0 IdentifierName "_" = Underscore.Static
Line 61 col 2 IdentifierName "last" = { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
Line 61 col 7 ArrayLiteralExpression "[5, 4, 3, 2, 1]" = number[]
Line 62 col 0 InvocationExpression "_.rest([5, 4, 3, 2, 1])" = number[]
Line 62 col 0 MemberAccessExpression "_.rest" = <T>(list: T[], index?: number) => T[]
Line 62 col 0 IdentifierName "_" = Underscore.Static
Line 62 col 2 IdentifierName "rest" = <T>(list: T[], index?: number) => T[]
Line 62 col 7 ArrayLiteralExpression "[5, 4, 3, 2, 1]" = number[]
Line 63 col 0 InvocationExpression "_.compact([0, 1, false, 2, '', 3])" = {}[]
Line 63 col 0 MemberAccessExpression "_.compact" = <T>(list: T[]) => T[]
Line 63 col 0 IdentifierName "_" = Underscore.Static
Line 63 col 2 IdentifierName "compact" = <T>(list: T[]) => T[]
Line 63 col 10 ArrayLiteralExpression "[0, 1, false, 2, '', 3]" = {}[]
Line 64 col 0 InvocationExpression "_.flatten([1, 2, 3, 4])" = {}[]
Line 64 col 0 MemberAccessExpression "_.flatten" = { <T>(list: T[][]): T[]; <T>(array: any[], shallow?: boolean): T[]; }
Line 64 col 0 IdentifierName "_" = Underscore.Static
Line 65 col 2 IdentifierName "flatten" = { <T>(list: T[][]): T[]; <T>(array: any[], shallow?: boolean): T[]; }
Line 65 col 10 ArrayLiteralExpression "[1, 2, 3, 4]" = any[]
Line 66 col 0 InvocationExpression "_.flatten([1, [2]])" = {}[]
Line 66 col 0 MemberAccessExpression "_.flatten" = { <T>(list: T[][]): T[]; <T>(array: any[], shallow?: boolean): T[]; }
Line 66 col 0 IdentifierName "_" = Underscore.Static
Line 66 col 2 IdentifierName "flatten" = { <T>(list: T[][]): T[]; <T>(array: any[], shallow?: boolean): T[]; }
Line 66 col 10 ArrayLiteralExpression "[1, [2]]" = any[]
Line 66 col 14 ArrayLiteralExpression "[2]" = number[]
Line 67 col 0 InvocationExpression "// typescript doesn't like the elements being different
_.flatten([1, [2], [3, [[4]]]])" = {}[]
Line 67 col 0 MemberAccessExpression "// typescript doesn't like the elements being different
_.flatten" = { <T>(list: T[][]): T[]; <T>(array: any[], shallow?: boolean): T[]; }
Line 67 col 0 IdentifierName "// typescript doesn't like the elements being different
_" = Underscore.Static
Line 69 col 2 IdentifierName "flatten" = { <T>(list: T[][]): T[]; <T>(array: any[], shallow?: boolean): T[]; }
Line 69 col 10 ArrayLiteralExpression "[1, [2], [3, [[4]]]]" = any[]
Line 69 col 14 ArrayLiteralExpression "[2]" = number[]
Line 69 col 19 ArrayLiteralExpression "[3, [[4]]]" = {}[]
Line 69 col 23 ArrayLiteralExpression "[[4]]" = number[][]
Line 69 col 24 ArrayLiteralExpression "[4]" = number[]
Line 70 col 0 InvocationExpression "_.flatten([1, [2], [3, [[4]]]], true)" = {}[]
Line 70 col 0 MemberAccessExpression "_.flatten" = { <T>(list: T[][]): T[]; <T>(array: any[], shallow?: boolean): T[]; }
Line 70 col 0 IdentifierName "_" = Underscore.Static
Line 70 col 2 IdentifierName "flatten" = { <T>(list: T[][]): T[]; <T>(array: any[], shallow?: boolean): T[]; }
Line 70 col 10 ArrayLiteralExpression "[1, [2], [3, [[4]]]]" = any[]
Line 70 col 14 ArrayLiteralExpression "[2]" = number[]
Line 70 col 19 ArrayLiteralExpression "[3, [[4]]]" = {}[]
Line 70 col 23 ArrayLiteralExpression "[[4]]" = number[][]
Line 70 col 24 ArrayLiteralExpression "[4]" = number[]
Line 71 col 0 InvocationExpression "_.without([1, 2, 1, 0, 3, 1, 4], 0, 1)" = number[]
Line 71 col 0 MemberAccessExpression "_.without" = <T>(list: T[], ...values: T[]) => T[]
Line 71 col 0 IdentifierName "_" = Underscore.Static
Line 71 col 2 IdentifierName "without" = <T>(list: T[], ...values: T[]) => T[]
Line 71 col 10 ArrayLiteralExpression "[1, 2, 1, 0, 3, 1, 4]" = number[]
Line 72 col 0 InvocationExpression "_.union([1, 2, 3], [101, 2, 1, 10], [2, 1])" = number[]
Line 72 col 0 MemberAccessExpression "_.union" = <T>(...arrays: T[][]) => T[]
Line 72 col 0 IdentifierName "_" = Underscore.Static
Line 72 col 2 IdentifierName "union" = <T>(...arrays: T[][]) => T[]
Line 72 col 8 ArrayLiteralExpression "[1, 2, 3]" = number[]
Line 72 col 19 ArrayLiteralExpression "[101, 2, 1, 10]" = number[]
Line 72 col 36 ArrayLiteralExpression "[2, 1]" = number[]
Line 73 col 0 InvocationExpression "_.intersection([1, 2, 3], [101, 2, 1, 10], [2, 1])" = number[]
Line 73 col 0 MemberAccessExpression "_.intersection" = <T>(...arrays: T[][]) => T[]
Line 73 col 0 IdentifierName "_" = Underscore.Static
Line 73 col 2 IdentifierName "intersection" = <T>(...arrays: T[][]) => T[]
Line 73 col 15 ArrayLiteralExpression "[1, 2, 3]" = number[]
Line 73 col 26 ArrayLiteralExpression "[101, 2, 1, 10]" = number[]
Line 73 col 43 ArrayLiteralExpression "[2, 1]" = number[]
Line 74 col 0 InvocationExpression "_.difference([1, 2, 3, 4, 5], [5, 2, 10])" = number[]
Line 74 col 0 MemberAccessExpression "_.difference" = <T>(list: T[], ...others: T[][]) => T[]
Line 74 col 0 IdentifierName "_" = Underscore.Static
Line 74 col 2 IdentifierName "difference" = <T>(list: T[], ...others: T[][]) => T[]
Line 74 col 13 ArrayLiteralExpression "[1, 2, 3, 4, 5]" = number[]
Line 74 col 30 ArrayLiteralExpression "[5, 2, 10]" = number[]
Line 75 col 0 InvocationExpression "_.uniq([1, 2, 1, 3, 1, 4])" = number[]
Line 75 col 0 MemberAccessExpression "_.uniq" = { <T>(list: T[], isSorted?: boolean): T[]; <T, U>(list: T[], isSorted: boolean, iterator: Iterator<T, U>, context?: any): U[]; }
Line 75 col 0 IdentifierName "_" = Underscore.Static
Line 75 col 2 IdentifierName "uniq" = { <T>(list: T[], isSorted?: boolean): T[]; <T, U>(list: T[], isSorted: boolean, iterator: Iterator<T, U>, context?: any): U[]; }
Line 75 col 7 ArrayLiteralExpression "[1, 2, 1, 3, 1, 4]" = number[]
Line 76 col 0 InvocationExpression "_.zip(['moe', 'larry', 'curly'], [30, 40, 50], [true, false, false])" = Tuple3<string, number, boolean>[]
Line 76 col 0 MemberAccessExpression "_.zip" = { <T0, T1>(a0: T0[], a1: T1[]): Tuple2<T0, T1>[]; <T0, T1, T2>(a0: T0[], a1: T1[], a2: T2[]): Tuple3<T0, T1, T2>[]; <T0, T1, T2, T3>(a0: T0[], a1: T1[], a2: T2[], a3: T3[]): Tuple4<T0, T1, T2, T3>[]; (...arrays: any[][]): any[][]; }
Line 76 col 0 IdentifierName "_" = Underscore.Static
Line 76 col 2 IdentifierName "zip" = { <T0, T1>(a0: T0[], a1: T1[]): Tuple2<T0, T1>[]; <T0, T1, T2>(a0: T0[], a1: T1[], a2: T2[]): Tuple3<T0, T1, T2>[]; <T0, T1, T2, T3>(a0: T0[], a1: T1[], a2: T2[], a3: T3[]): Tuple4<T0, T1, T2, T3>[]; (...arrays: any[][]): any[][]; }
Line 76 col 6 ArrayLiteralExpression "['moe', 'larry', 'curly']" = string[]
Line 76 col 33 ArrayLiteralExpression "[30, 40, 50]" = number[]
Line 76 col 47 ArrayLiteralExpression "[true, false, false]" = boolean[]
Line 77 col 0 InvocationExpression "_.object(['moe', 'larry', 'curly'], [30, 40, 50])" = any
Line 77 col 0 MemberAccessExpression "_.object" = { (list: any[][]): any; (keys: string[], values: any[]): any; }
Line 77 col 0 IdentifierName "_" = Underscore.Static
Line 77 col 2 IdentifierName "object" = { (list: any[][]): any; (keys: string[], values: any[]): any; }
Line 77 col 9 ArrayLiteralExpression "['moe', 'larry', 'curly']" = string[]
Line 77 col 36 ArrayLiteralExpression "[30, 40, 50]" = any[]
Line 78 col 0 InvocationExpression "_.object([['moe', 30], ['larry', 40], ['curly', 50]])" = any
Line 78 col 0 MemberAccessExpression "_.object" = { (list: any[][]): any; (keys: string[], values: any[]): any; }
Line 78 col 0 IdentifierName "_" = Underscore.Static
Line 78 col 2 IdentifierName "object" = { (list: any[][]): any; (keys: string[], values: any[]): any; }
Line 78 col 9 ArrayLiteralExpression "[['moe', 30], ['larry', 40], ['curly', 50]]" = any[][]
Line 78 col 10 ArrayLiteralExpression "['moe', 30]" = any[]
Line 78 col 23 ArrayLiteralExpression "['larry', 40]" = any[]
Line 78 col 38 ArrayLiteralExpression "['curly', 50]" = any[]
Line 79 col 0 InvocationExpression "_.indexOf([1, 2, 3], 2)" = number
Line 79 col 0 MemberAccessExpression "_.indexOf" = <T>(list: T[], value: T, isSorted?: boolean) => number
Line 79 col 0 IdentifierName "_" = Underscore.Static
Line 79 col 2 IdentifierName "indexOf" = <T>(list: T[], value: T, isSorted?: boolean) => number
Line 79 col 10 ArrayLiteralExpression "[1, 2, 3]" = number[]
Line 80 col 0 InvocationExpression "_.lastIndexOf([1, 2, 3, 1, 2, 3], 2)" = number
Line 80 col 0 MemberAccessExpression "_.lastIndexOf" = <T>(list: T[], value: T, fromIndex?: number) => number
Line 80 col 0 IdentifierName "_" = Underscore.Static
Line 80 col 2 IdentifierName "lastIndexOf" = <T>(list: T[], value: T, fromIndex?: number) => number
Line 80 col 14 ArrayLiteralExpression "[1, 2, 3, 1, 2, 3]" = number[]
Line 81 col 0 InvocationExpression "_.sortedIndex([10, 20, 30, 40, 50], 35)" = number
Line 81 col 0 MemberAccessExpression "_.sortedIndex" = { <T>(list: T[], obj: T, propertyName: string): number; <T>(list: T[], obj: T, iterator?: Iterator<T, any>, context?: any): number; }
Line 81 col 0 IdentifierName "_" = Underscore.Static
Line 81 col 2 IdentifierName "sortedIndex" = { <T>(list: T[], obj: T, propertyName: string): number; <T>(list: T[], obj: T, iterator?: Iterator<T, any>, context?: any): number; }
Line 81 col 14 ArrayLiteralExpression "[10, 20, 30, 40, 50]" = number[]
Line 82 col 0 InvocationExpression "_.range(10)" = number[]
Line 82 col 0 MemberAccessExpression "_.range" = { (stop: number): number[]; (start: number, stop: number, step?: number): number[]; }
Line 82 col 0 IdentifierName "_" = Underscore.Static
Line 82 col 2 IdentifierName "range" = { (stop: number): number[]; (start: number, stop: number, step?: number): number[]; }
Line 83 col 0 InvocationExpression "_.range(1, 11)" = number[]
Line 83 col 0 MemberAccessExpression "_.range" = { (stop: number): number[]; (start: number, stop: number, step?: number): number[]; }
Line 83 col 0 IdentifierName "_" = Underscore.Static
Line 83 col 2 IdentifierName "range" = { (stop: number): number[]; (start: number, stop: number, step?: number): number[]; }
Line 84 col 0 InvocationExpression "_.range(0, 30, 5)" = number[]
Line 84 col 0 MemberAccessExpression "_.range" = { (stop: number): number[]; (start: number, stop: number, step?: number): number[]; }
Line 84 col 0 IdentifierName "_" = Underscore.Static
Line 84 col 2 IdentifierName "range" = { (stop: number): number[]; (start: number, stop: number, step?: number): number[]; }
Line 85 col 0 InvocationExpression "_.range(0, 30, 5)" = number[]
Line 85 col 0 MemberAccessExpression "_.range" = { (stop: number): number[]; (start: number, stop: number, step?: number): number[]; }
Line 85 col 0 IdentifierName "_" = Underscore.Static
Line 85 col 2 IdentifierName "range" = { (stop: number): number[]; (start: number, stop: number, step?: number): number[]; }
Line 86 col 0 InvocationExpression "_.range(0)" = number[]
Line 86 col 0 MemberAccessExpression "_.range" = { (stop: number): number[]; (start: number, stop: number, step?: number): number[]; }
Line 86 col 0 IdentifierName "_" = Underscore.Static
Line 86 col 2 IdentifierName "range" = { (stop: number): number[]; (start: number, stop: number, step?: number): number[]; }
Line 90 col 4 IdentifierName "func" = (greeting: any) => string
Line 90 col 11 FunctionExpression "function (greeting) { return greeting + ': ' + this.name }" = (greeting: any) => string
Line 90 col 21 IdentifierName "greeting" = any
Line 90 col 40 AddExpression "greeting + ': ' + this.name" = string
Line 90 col 40 AddExpression "greeting + ': '" = string
Line 90 col 40 IdentifierName "greeting" = any
Line 90 col 58 MemberAccessExpression "this.name" = any
Line 90 col 58 ThisKeyword "this" = any
Line 90 col 63 IdentifierName "name" = any
Line 93 col 4 IdentifierName "func2" = Function
Line 93 col 12 InvocationExpression "_.bind(func, { name: 'moe' }, 'hi')" = Function
Line 93 col 12 MemberAccessExpression "_.bind" = { <T extends Function>(func: T, object: any): T; (func: Function, object: any, ...args: any[]): Function; }
Line 93 col 12 IdentifierName "_" = Underscore.Static
Line 93 col 14 IdentifierName "bind" = { <T extends Function>(func: T, object: any): T; (func: Function, object: any, ...args: any[]): Function; }
Line 93 col 19 IdentifierName "func" = (greeting: any) => string
Line 93 col 25 ObjectLiteralExpression "{ name: 'moe' }" = { name: string; }
Line 93 col 27 IdentifierName "name" = string
Line 94 col 0 InvocationExpression "func2()" = any
Line 94 col 0 IdentifierName "func2" = Function
Line 96 col 4 IdentifierName "buttonView" = { label: string; onClick: () => void; onHover: () => void; }
Line 96 col 17 ObjectLiteralExpression "{
    label: 'underscore',
    onClick: function () { alert('clicked: ' + this.label); },
    onHover: function () { alert('hovering: ' + this.label); }
}" = { label: string; onClick: () => void; onHover: () => void; }
Line 97 col 0 IdentifierName "label" = string
Line 98 col 0 IdentifierName "onClick" = () => void
Line 98 col 13 FunctionExpression "function () { alert('clicked: ' + this.label); }" = () => void
Line 98 col 27 InvocationExpression "alert('clicked: ' + this.label)" = void
Line 98 col 27 IdentifierName "alert" = typeof alert
Line 98 col 33 AddExpression "'clicked: ' + this.label" = string
Line 98 col 47 MemberAccessExpression "this.label" = any
Line 98 col 47 ThisKeyword "this" = any
Line 98 col 52 IdentifierName "label" = any
Line 99 col 0 IdentifierName "onHover" = () => void
Line 99 col 13 FunctionExpression "function () { alert('hovering: ' + this.label); }" = () => void
Line 99 col 27 InvocationExpression "alert('hovering: ' + this.label)" = void
Line 99 col 27 IdentifierName "alert" = typeof alert
Line 99 col 33 AddExpression "'hovering: ' + this.label" = string
Line 99 col 48 MemberAccessExpression "this.label" = any
Line 99 col 48 ThisKeyword "this" = any
Line 99 col 53 IdentifierName "label" = any
Line 101 col 0 InvocationExpression "_.bindAll(buttonView)" = { label: string; onClick: () => void; onHover: () => void; }
Line 101 col 0 MemberAccessExpression "_.bindAll" = <T>(object: T, ...methodNames: string[]) => T
Line 101 col 0 IdentifierName "_" = Underscore.Static
Line 101 col 2 IdentifierName "bindAll" = <T>(object: T, ...methodNames: string[]) => T
Line 101 col 10 IdentifierName "buttonView" = { label: string; onClick: () => void; onHover: () => void; }
Line 102 col 0 InvocationExpression "$('#underscore_button').bind('click', buttonView.onClick)" = any
Line 102 col 0 MemberAccessExpression "$('#underscore_button').bind" = any
Line 102 col 0 InvocationExpression "$('#underscore_button')" = any
Line 102 col 0 IdentifierName "$" = any
Line 102 col 24 IdentifierName "bind" = any
Line 102 col 38 MemberAccessExpression "buttonView.onClick" = () => void
Line 102 col 38 IdentifierName "buttonView" = { label: string; onClick: () => void; onHover: () => void; }
Line 102 col 49 IdentifierName "onClick" = () => void
Line 104 col 4 IdentifierName "fibonacci" = (n: any) => any
Line 104 col 16 InvocationExpression "_.memoize(function (n) {
    return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);
})" = (n: any) => any
Line 104 col 16 MemberAccessExpression "_.memoize" = <T extends Function>(func: T, hashFunction?: Function) => T
Line 104 col 16 IdentifierName "_" = Underscore.Static
Line 104 col 18 IdentifierName "memoize" = <T extends Function>(func: T, hashFunction?: Function) => T
Line 104 col 26 FunctionExpression "function (n) {
    return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);
}" = (n: any) => any
Line 104 col 36 IdentifierName "n" = any
Line 105 col 11 ConditionalExpression "n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2)" = any
Line 105 col 11 LessThanExpression "n < 2" = boolean
Line 105 col 11 IdentifierName "n" = any
Line 105 col 19 IdentifierName "n" = any
Line 105 col 23 AddExpression "fibonacci(n - 1) + fibonacci(n - 2)" = any
Line 105 col 23 InvocationExpression "fibonacci(n - 1)" = any
Line 105 col 23 IdentifierName "fibonacci" = (n: any) => any
Line 105 col 33 SubtractExpression "n - 1" = number
Line 105 col 33 IdentifierName "n" = any
Line 105 col 42 InvocationExpression "fibonacci(n - 2)" = any
Line 105 col 42 IdentifierName "fibonacci" = (n: any) => any
Line 105 col 52 SubtractExpression "n - 2" = number
Line 105 col 52 IdentifierName "n" = any
Line 108 col 4 IdentifierName "log" = (message?: string, ...rest: string[]) => void
Line 108 col 10 InvocationExpression "_.bind((message?: string, ...rest: string[]) => { }, Date)" = (message?: string, ...rest: string[]) => void
Line 108 col 10 MemberAccessExpression "_.bind" = { <T extends Function>(func: T, object: any): T; (func: Function, object: any, ...args: any[]): Function; }
Line 108 col 10 IdentifierName "_" = Underscore.Static
Line 108 col 12 IdentifierName "bind" = { <T extends Function>(func: T, object: any): T; (func: Function, object: any, ...args: any[]): Function; }
Line 108 col 17 ParenthesizedArrowFunctionExpression "(message?: string, ...rest: string[]) => { }" = (message?: string, ...rest: string[]) => void
Line 108 col 18 IdentifierName "message" = string
Line 108 col 39 IdentifierName "rest" = string[]
Line 108 col 63 IdentifierName "Date" = { prototype: Date; parse(s: string): number; UTC(year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): number; now(): number; (): string; new(): Date; new(value: number): Date; new(value: string): Date; new(year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): Date; }
Line 109 col 0 InvocationExpression "_.delay(log, 1000, 'logged later')" = number
Line 109 col 0 MemberAccessExpression "_.delay" = (func: Function, wait: number, ...args: any[]) => number
Line 109 col 0 IdentifierName "_" = Underscore.Static
Line 109 col 2 IdentifierName "delay" = (func: Function, wait: number, ...args: any[]) => number
Line 109 col 8 IdentifierName "log" = (message?: string, ...rest: string[]) => void
Line 110 col 0 InvocationExpression "_.defer(function () { alert('deferred'); })" = number
Line 110 col 0 MemberAccessExpression "_.defer" = (func: Function, ...args: any[]) => number
Line 110 col 0 IdentifierName "_" = Underscore.Static
Line 111 col 2 IdentifierName "defer" = (func: Function, ...args: any[]) => number
Line 111 col 8 FunctionExpression "function () { alert('deferred'); }" = () => void
Line 111 col 22 InvocationExpression "alert('deferred')" = void
Line 111 col 22 IdentifierName "alert" = typeof alert
Line 113 col 4 IdentifierName "updatePosition" = () => void
Line 113 col 21 ParenthesizedArrowFunctionExpression "() => alert('updating position...')" = () => void
Line 113 col 27 InvocationExpression "alert('updating position...')" = void
Line 113 col 27 IdentifierName "alert" = typeof alert
Line 114 col 4 IdentifierName "throttled" = () => void
Line 114 col 16 InvocationExpression "_.throttle(updatePosition, 100)" = () => void
Line 114 col 16 MemberAccessExpression "_.throttle" = <T extends Function>(func: T, wait: number) => T
Line 114 col 16 IdentifierName "_" = Underscore.Static
Line 114 col 18 IdentifierName "throttle" = <T extends Function>(func: T, wait: number) => T
Line 114 col 27 IdentifierName "updatePosition" = () => void
Line 115 col 0 InvocationExpression "$(null).scroll(throttled)" = any
Line 115 col 0 MemberAccessExpression "$(null).scroll" = any
Line 115 col 0 InvocationExpression "$(null)" = any
Line 115 col 0 IdentifierName "$" = any
Line 115 col 8 IdentifierName "scroll" = any
Line 115 col 15 IdentifierName "throttled" = () => void
Line 117 col 4 IdentifierName "calculateLayout" = () => void
Line 117 col 22 ParenthesizedArrowFunctionExpression "() => alert('calculating layout...')" = () => void
Line 117 col 28 InvocationExpression "alert('calculating layout...')" = void
Line 117 col 28 IdentifierName "alert" = typeof alert
Line 118 col 4 IdentifierName "lazyLayout" = () => void
Line 118 col 17 InvocationExpression "_.debounce(calculateLayout, 300)" = () => void
Line 118 col 17 MemberAccessExpression "_.debounce" = <T extends Function>(func: T, wait: number, immediate?: boolean) => T
Line 118 col 17 IdentifierName "_" = Underscore.Static
Line 118 col 19 IdentifierName "debounce" = <T extends Function>(func: T, wait: number, immediate?: boolean) => T
Line 118 col 28 IdentifierName "calculateLayout" = () => void
Line 119 col 0 InvocationExpression "$(null).resize(lazyLayout)" = any
Line 119 col 0 MemberAccessExpression "$(null).resize" = any
Line 119 col 0 InvocationExpression "$(null)" = any
Line 119 col 0 IdentifierName "$" = any
Line 119 col 8 IdentifierName "resize" = any
Line 119 col 15 IdentifierName "lazyLayout" = () => void
Line 121 col 4 IdentifierName "createApplication" = () => void
Line 121 col 24 ParenthesizedArrowFunctionExpression "() => alert('creating application...')" = () => void
Line 121 col 30 InvocationExpression "alert('creating application...')" = void
Line 121 col 30 IdentifierName "alert" = typeof alert
Line 122 col 4 IdentifierName "initialize" = () => void
Line 122 col 17 InvocationExpression "_.once(createApplication)" = () => void
Line 122 col 17 MemberAccessExpression "_.once" = <T extends Function>(func: T) => T
Line 122 col 17 IdentifierName "_" = Underscore.Static
Line 122 col 19 IdentifierName "once" = <T extends Function>(func: T) => T
Line 122 col 24 IdentifierName "createApplication" = () => void
Line 123 col 0 InvocationExpression "initialize()" = void
Line 123 col 0 IdentifierName "initialize" = () => void
Line 124 col 0 InvocationExpression "initialize()" = void
Line 124 col 0 IdentifierName "initialize" = () => void
Line 126 col 4 IdentifierName "notes" = any[]
Line 127 col 4 IdentifierName "render" = () => void
Line 127 col 13 ParenthesizedArrowFunctionExpression "() => alert("rendering...")" = () => void
Line 127 col 19 InvocationExpression "alert("rendering...")" = void
Line 127 col 19 IdentifierName "alert" = typeof alert
Line 128 col 4 IdentifierName "renderNotes" = () => void
Line 128 col 18 InvocationExpression "_.after(notes.length, render)" = () => void
Line 128 col 18 MemberAccessExpression "_.after" = <T extends Function>(count: number, func: T) => T
Line 128 col 18 IdentifierName "_" = Underscore.Static
Line 128 col 20 IdentifierName "after" = <T extends Function>(count: number, func: T) => T
Line 128 col 26 MemberAccessExpression "notes.length" = number
Line 128 col 26 IdentifierName "notes" = any[]
Line 128 col 32 IdentifierName "length" = number
Line 128 col 40 IdentifierName "render" = () => void
Line 129 col 0 InvocationExpression "_.each(notes, (note) => note.asyncSave({ success: renderNotes }))" = void
Line 129 col 0 MemberAccessExpression "_.each" = { <T>(list: T[], iterator: Iterator<T, void>, context?: any): void; <T>(list: Dictionary<T>, iterator: Iterator<T, void>, context?: any): void; }
Line 129 col 0 IdentifierName "_" = Underscore.Static
Line 129 col 2 IdentifierName "each" = { <T>(list: T[], iterator: Iterator<T, void>, context?: any): void; <T>(list: Dictionary<T>, iterator: Iterator<T, void>, context?: any): void; }
Line 129 col 7 IdentifierName "notes" = any[]
Line 129 col 14 ParenthesizedArrowFunctionExpression "(note) => note.asyncSave({ success: renderNotes })" = (note: any) => any
Line 129 col 15 IdentifierName "note" = any
Line 129 col 24 InvocationExpression "note.asyncSave({ success: renderNotes })" = any
Line 129 col 24 MemberAccessExpression "note.asyncSave" = any
Line 129 col 24 IdentifierName "note" = any
Line 129 col 29 IdentifierName "asyncSave" = any
Line 129 col 39 ObjectLiteralExpression "{ success: renderNotes }" = { success: () => void; }
Line 129 col 41 IdentifierName "success" = () => void
Line 129 col 50 IdentifierName "renderNotes" = () => void
Line 131 col 4 IdentifierName "hello" = (name: any) => string
Line 131 col 12 FunctionExpression "function (name) { return "hello: " + name; }" = (name: any) => string
Line 131 col 22 IdentifierName "name" = any
Line 131 col 37 AddExpression ""hello: " + name" = string
Line 131 col 49 IdentifierName "name" = any
Line 132 col 0 AssignmentExpression "hello = _.wrap(hello, (func, arg) => { return "before, " + func(arg) + ", after"; })" = (name: any) => string
Line 132 col 0 IdentifierName "hello" = (name: any) => string
Line 132 col 8 InvocationExpression "_.wrap(hello, (func, arg) => { return "before, " + func(arg) + ", after"; })" = (name: any) => string
Line 132 col 8 MemberAccessExpression "_.wrap" = <T extends Function>(func: T, wrapper: (func: T, ...args: any[]) => any) => T
Line 132 col 8 IdentifierName "_" = Underscore.Static
Line 132 col 10 IdentifierName "wrap" = <T extends Function>(func: T, wrapper: (func: T, ...args: any[]) => any) => T
Line 132 col 15 IdentifierName "hello" = (name: any) => string
Line 132 col 22 ParenthesizedArrowFunctionExpression "(func, arg) => { return "before, " + func(arg) + ", after"; }" = (func: (name: any) => string, arg: any) => string
Line 132 col 23 IdentifierName "func" = (name: any) => string
Line 132 col 29 IdentifierName "arg" = any
Line 132 col 46 AddExpression ""before, " + func(arg) + ", after"" = string
Line 132 col 46 AddExpression ""before, " + func(arg)" = string
Line 132 col 59 InvocationExpression "func(arg)" = string
Line 132 col 59 IdentifierName "func" = (name: any) => string
Line 132 col 64 IdentifierName "arg" = any
Line 133 col 0 InvocationExpression "hello("moe")" = string
Line 133 col 0 IdentifierName "hello" = (name: any) => string
Line 135 col 4 IdentifierName "greet" = (name: any) => string
Line 135 col 12 FunctionExpression "function (name) { return "hi: " + name; }" = (name: any) => string
Line 135 col 22 IdentifierName "name" = any
Line 135 col 37 AddExpression ""hi: " + name" = string
Line 135 col 46 IdentifierName "name" = any
Line 136 col 4 IdentifierName "exclaim" = (statement: any) => string
Line 136 col 14 FunctionExpression "function (statement) { return statement + "!"; }" = (statement: any) => string
Line 136 col 24 IdentifierName "statement" = any
Line 136 col 44 AddExpression "statement + "!"" = string
Line 136 col 44 IdentifierName "statement" = any
Line 137 col 4 IdentifierName "welcome" = Function
Line 137 col 14 InvocationExpression "_.compose(exclaim, greet)" = Function
Line 137 col 14 MemberAccessExpression "_.compose" = (...funcs: Function[]) => Function
Line 137 col 14 IdentifierName "_" = Underscore.Static
Line 137 col 16 IdentifierName "compose" = (...funcs: Function[]) => Function
Line 137 col 24 IdentifierName "exclaim" = (statement: any) => string
Line 137 col 33 IdentifierName "greet" = (name: any) => string
Line 138 col 0 InvocationExpression "welcome('moe')" = any
Line 138 col 0 IdentifierName "welcome" = Function
Line 139 col 0 InvocationExpression "///////////////////////////////////////////////////////////////////////////////////////

_.keys({ one: 1, two: 2, three: 3 })" = string[]
Line 139 col 0 MemberAccessExpression "///////////////////////////////////////////////////////////////////////////////////////

_.keys" = (object: any) => string[]
Line 139 col 0 IdentifierName "///////////////////////////////////////////////////////////////////////////////////////

_" = Underscore.Static
Line 142 col 2 IdentifierName "keys" = (object: any) => string[]
Line 142 col 7 ObjectLiteralExpression "{ one: 1, two: 2, three: 3 }" = { one: number; two: number; three: number; }
Line 142 col 9 IdentifierName "one" = number
Line 142 col 17 IdentifierName "two" = number
Line 142 col 25 IdentifierName "three" = number
Line 143 col 0 InvocationExpression "_.values({ one: 1, two: 2, three: 3 })" = any[]
Line 143 col 0 MemberAccessExpression "_.values" = (object: any) => any[]
Line 143 col 0 IdentifierName "_" = Underscore.Static
Line 143 col 2 IdentifierName "values" = (object: any) => any[]
Line 143 col 9 ObjectLiteralExpression "{ one: 1, two: 2, three: 3 }" = { one: number; two: number; three: number; }
Line 143 col 11 IdentifierName "one" = number
Line 143 col 19 IdentifierName "two" = number
Line 143 col 27 IdentifierName "three" = number
Line 144 col 0 InvocationExpression "_.pairs({ one: 1, two: 2, three: 3 })" = any[][]
Line 144 col 0 MemberAccessExpression "_.pairs" = (object: any) => any[][]
Line 144 col 0 IdentifierName "_" = Underscore.Static
Line 144 col 2 IdentifierName "pairs" = (object: any) => any[][]
Line 144 col 8 ObjectLiteralExpression "{ one: 1, two: 2, three: 3 }" = { one: number; two: number; three: number; }
Line 144 col 10 IdentifierName "one" = number
Line 144 col 18 IdentifierName "two" = number
Line 144 col 26 IdentifierName "three" = number
Line 145 col 0 InvocationExpression "_.invert({ Moe: "Moses", Larry: "Louis", Curly: "Jerome" })" = any
Line 145 col 0 MemberAccessExpression "_.invert" = (object: any) => any
Line 145 col 0 IdentifierName "_" = Underscore.Static
Line 145 col 2 IdentifierName "invert" = (object: any) => any
Line 145 col 9 ObjectLiteralExpression "{ Moe: "Moses", Larry: "Louis", Curly: "Jerome" }" = { Moe: string; Larry: string; Curly: string; }
Line 145 col 11 IdentifierName "Moe" = string
Line 145 col 25 IdentifierName "Larry" = string
Line 145 col 41 IdentifierName "Curly" = string
Line 146 col 0 InvocationExpression "_.functions(_)" = string[]
Line 146 col 0 MemberAccessExpression "_.functions" = (object: any) => string[]
Line 146 col 0 IdentifierName "_" = Underscore.Static
Line 146 col 2 IdentifierName "functions" = (object: any) => string[]
Line 146 col 12 IdentifierName "_" = Underscore.Static
Line 147 col 0 InvocationExpression "_.extend({ name: 'moe' }, { age: 50 })" = { name: string; }
Line 147 col 0 MemberAccessExpression "_.extend" = <T>(destination: T, ...sources: any[]) => T
Line 147 col 0 IdentifierName "_" = Underscore.Static
Line 147 col 2 IdentifierName "extend" = <T>(destination: T, ...sources: any[]) => T
Line 147 col 9 ObjectLiteralExpression "{ name: 'moe' }" = { name: string; }
Line 147 col 11 IdentifierName "name" = string
Line 147 col 26 ObjectLiteralExpression "{ age: 50 }" = { age: number; }
Line 147 col 28 IdentifierName "age" = number
Line 148 col 0 InvocationExpression "_.pick({ name: 'moe', age: 50, userid: 'moe1' }, 'name', 'age')" = { name: string; age: number; userid: string; }
Line 148 col 0 MemberAccessExpression "_.pick" = <T>(object: T, ...keys: string[]) => T
Line 148 col 0 IdentifierName "_" = Underscore.Static
Line 148 col 2 IdentifierName "pick" = <T>(object: T, ...keys: string[]) => T
Line 148 col 7 ObjectLiteralExpression "{ name: 'moe', age: 50, userid: 'moe1' }" = { name: string; age: number; userid: string; }
Line 148 col 9 IdentifierName "name" = string
Line 148 col 22 IdentifierName "age" = number
Line 148 col 31 IdentifierName "userid" = string
Line 149 col 0 InvocationExpression "_.omit({ name: 'moe', age: 50, userid: 'moe1' }, 'userid')" = { name: string; age: number; userid: string; }
Line 149 col 0 MemberAccessExpression "_.omit" = <T>(object: T, ...keys: string[]) => T
Line 149 col 0 IdentifierName "_" = Underscore.Static
Line 149 col 2 IdentifierName "omit" = <T>(object: T, ...keys: string[]) => T
Line 149 col 7 ObjectLiteralExpression "{ name: 'moe', age: 50, userid: 'moe1' }" = { name: string; age: number; userid: string; }
Line 149 col 9 IdentifierName "name" = string
Line 149 col 22 IdentifierName "age" = number
Line 149 col 31 IdentifierName "userid" = string
Line 151 col 4 IdentifierName "iceCream" = { flavor: string; }
Line 151 col 15 ObjectLiteralExpression "{ flavor: "chocolate" }" = { flavor: string; }
Line 151 col 17 IdentifierName "flavor" = string
Line 152 col 0 InvocationExpression "_.defaults(iceCream, { flavor: "vanilla", sprinkles: "lots" })" = { flavor: string; }
Line 152 col 0 MemberAccessExpression "_.defaults" = <T>(object: T, ...defaults: any[]) => T
Line 152 col 0 IdentifierName "_" = Underscore.Static
Line 152 col 2 IdentifierName "defaults" = <T>(object: T, ...defaults: any[]) => T
Line 152 col 11 IdentifierName "iceCream" = { flavor: string; }
Line 152 col 21 ObjectLiteralExpression "{ flavor: "vanilla", sprinkles: "lots" }" = { flavor: string; sprinkles: string; }
Line 152 col 23 IdentifierName "flavor" = string
Line 152 col 42 IdentifierName "sprinkles" = string
Line 153 col 0 InvocationExpression "_.clone({ name: 'moe' })" = { name: string; }
Line 153 col 0 MemberAccessExpression "_.clone" = <T>(object: T) => T
Line 153 col 0 IdentifierName "_" = Underscore.Static
Line 154 col 2 IdentifierName "clone" = <T>(object: T) => T
Line 154 col 8 ObjectLiteralExpression "{ name: 'moe' }" = { name: string; }
Line 154 col 10 IdentifierName "name" = string
Line 155 col 0 InvocationExpression "_.chain([1, 2, 3, 200])
    .filter(function (num) { return num % 2 == 0; })
    .tap(<any>alert)
    .map(function (num) { return num * num })
    .value()" = number[]
Line 155 col 0 MemberAccessExpression "_.chain([1, 2, 3, 200])
    .filter(function (num) { return num % 2 == 0; })
    .tap(<any>alert)
    .map(function (num) { return num * num })
    .value" = () => number[]
Line 155 col 0 InvocationExpression "_.chain([1, 2, 3, 200])
    .filter(function (num) { return num % 2 == 0; })
    .tap(<any>alert)
    .map(function (num) { return num * num })" = Underscore.ChainedArray<number>
Line 155 col 0 MemberAccessExpression "_.chain([1, 2, 3, 200])
    .filter(function (num) { return num % 2 == 0; })
    .tap(<any>alert)
    .map" = <U>(iterator: Iterator<number, U>, context?: any) => Underscore.ChainedArray<U>
Line 155 col 0 InvocationExpression "_.chain([1, 2, 3, 200])
    .filter(function (num) { return num % 2 == 0; })
    .tap(<any>alert)" = Underscore.ChainedArray<number>
Line 155 col 0 MemberAccessExpression "_.chain([1, 2, 3, 200])
    .filter(function (num) { return num % 2 == 0; })
    .tap" = (interceptor: (object: number[]) => void) => Underscore.ChainedArray<number>
Line 155 col 0 InvocationExpression "_.chain([1, 2, 3, 200])
    .filter(function (num) { return num % 2 == 0; })" = Underscore.ChainedArray<number>
Line 155 col 0 MemberAccessExpression "_.chain([1, 2, 3, 200])
    .filter" = (iterator: Iterator<number, boolean>, context?: any) => Underscore.ChainedArray<number>
Line 155 col 0 InvocationExpression "_.chain([1, 2, 3, 200])" = Underscore.ChainedArray<number>
Line 155 col 0 MemberAccessExpression "_.chain" = { <T>(list: T[]): Underscore.ChainedArray<T>; <T>(list: Dictionary<T>): Underscore.ChainedDictionary<T>; <T>(obj: T): Underscore.ChainedObject<T>; }
Line 155 col 0 IdentifierName "_" = Underscore.Static
Line 156 col 2 IdentifierName "chain" = { <T>(list: T[]): Underscore.ChainedArray<T>; <T>(list: Dictionary<T>): Underscore.ChainedDictionary<T>; <T>(obj: T): Underscore.ChainedObject<T>; }
Line 156 col 8 ArrayLiteralExpression "[1, 2, 3, 200]" = number[]
Line 157 col 5 IdentifierName "filter" = (iterator: Iterator<number, boolean>, context?: any) => Underscore.ChainedArray<number>
Line 157 col 12 FunctionExpression "function (num) { return num % 2 == 0; }" = (num: number) => boolean
Line 157 col 22 IdentifierName "num" = number
Line 157 col 36 EqualsWithTypeConversionExpression "num % 2 == 0" = boolean
Line 157 col 36 ModuloExpression "num % 2" = number
Line 157 col 36 IdentifierName "num" = number
Line 158 col 5 IdentifierName "tap" = (interceptor: (object: number[]) => void) => Underscore.ChainedArray<number>
Line 158 col 9 CastExpression "<any>alert" = any
Line 158 col 14 IdentifierName "alert" = typeof alert
Line 159 col 5 IdentifierName "map" = <U>(iterator: Iterator<number, U>, context?: any) => Underscore.ChainedArray<U>
Line 159 col 9 FunctionExpression "function (num) { return num * num }" = (num: number) => number
Line 159 col 19 IdentifierName "num" = number
Line 159 col 33 MultiplyExpression "num * num" = number
Line 159 col 33 IdentifierName "num" = number
Line 159 col 39 IdentifierName "num" = number
Line 160 col 5 IdentifierName "value" = () => number[]
Line 161 col 0 InvocationExpression "_.has({ a: 1, b: 2, c: 3 }, "b")" = boolean
Line 161 col 0 MemberAccessExpression "_.has" = (object: any, key: string) => boolean
Line 161 col 0 IdentifierName "_" = Underscore.Static
Line 162 col 2 IdentifierName "has" = (object: any, key: string) => boolean
Line 162 col 6 ObjectLiteralExpression "{ a: 1, b: 2, c: 3 }" = { a: number; b: number; c: number; }
Line 162 col 8 IdentifierName "a" = number
Line 162 col 14 IdentifierName "b" = number
Line 162 col 20 IdentifierName "c" = number
Line 164 col 4 IdentifierName "moe" = { name: string; luckyNumbers: number[]; }
Line 164 col 10 ObjectLiteralExpression "{ name: 'moe', luckyNumbers: [13, 27, 34] }" = { name: string; luckyNumbers: number[]; }
Line 164 col 12 IdentifierName "name" = string
Line 164 col 25 IdentifierName "luckyNumbers" = number[]
Line 164 col 39 ArrayLiteralExpression "[13, 27, 34]" = number[]
Line 165 col 4 IdentifierName "clone" = { name: string; luckyNumbers: number[]; }
Line 165 col 12 ObjectLiteralExpression "{ name: 'moe', luckyNumbers: [13, 27, 34] }" = { name: string; luckyNumbers: number[]; }
Line 165 col 14 IdentifierName "name" = string
Line 165 col 27 IdentifierName "luckyNumbers" = number[]
Line 165 col 41 ArrayLiteralExpression "[13, 27, 34]" = number[]
Line 166 col 0 EqualsWithTypeConversionExpression "moe == clone" = boolean
Line 166 col 0 IdentifierName "moe" = { name: string; luckyNumbers: number[]; }
Line 166 col 7 IdentifierName "clone" = { name: string; luckyNumbers: number[]; }
Line 167 col 0 InvocationExpression "_.isEqual(moe, clone)" = boolean
Line 167 col 0 MemberAccessExpression "_.isEqual" = <T>(object: T, other: T) => boolean
Line 167 col 0 IdentifierName "_" = Underscore.Static
Line 167 col 2 IdentifierName "isEqual" = <T>(object: T, other: T) => boolean
Line 167 col 10 IdentifierName "moe" = { name: string; luckyNumbers: number[]; }
Line 167 col 15 IdentifierName "clone" = { name: string; luckyNumbers: number[]; }
Line 168 col 0 InvocationExpression "_.isEmpty([1, 2, 3])" = boolean
Line 168 col 0 MemberAccessExpression "_.isEmpty" = (object: any) => boolean
Line 168 col 0 IdentifierName "_" = Underscore.Static
Line 169 col 2 IdentifierName "isEmpty" = (object: any) => boolean
Line 169 col 10 ArrayLiteralExpression "[1, 2, 3]" = number[]
Line 170 col 0 InvocationExpression "_.isEmpty({})" = boolean
Line 170 col 0 MemberAccessExpression "_.isEmpty" = (object: any) => boolean
Line 170 col 0 IdentifierName "_" = Underscore.Static
Line 170 col 2 IdentifierName "isEmpty" = (object: any) => boolean
Line 170 col 10 ObjectLiteralExpression "{}" = {}
Line 171 col 0 InvocationExpression "_.isElement($('body')[0])" = boolean
Line 171 col 0 MemberAccessExpression "_.isElement" = (object: any) => boolean
Line 171 col 0 IdentifierName "_" = Underscore.Static
Line 172 col 2 IdentifierName "isElement" = (object: any) => boolean
Line 172 col 12 ElementAccessExpression "$('body')[0]" = any
Line 172 col 12 InvocationExpression "$('body')" = any
Line 172 col 12 IdentifierName "$" = any
Line 173 col 0 InvocationExpression "(function () { return _.isArray(arguments); })()" = boolean
Line 173 col 0 ParenthesizedExpression "(function () { return _.isArray(arguments); })" = () => boolean
Line 174 col 1 FunctionExpression "function () { return _.isArray(arguments); }" = () => boolean
Line 174 col 22 InvocationExpression "_.isArray(arguments)" = boolean
Line 174 col 22 MemberAccessExpression "_.isArray" = (object: any) => boolean
Line 174 col 22 IdentifierName "_" = Underscore.Static
Line 174 col 24 IdentifierName "isArray" = (object: any) => boolean
Line 174 col 32 IdentifierName "arguments" = IArguments
Line 175 col 0 InvocationExpression "_.isArray([1, 2, 3])" = boolean
Line 175 col 0 MemberAccessExpression "_.isArray" = (object: any) => boolean
Line 175 col 0 IdentifierName "_" = Underscore.Static
Line 175 col 2 IdentifierName "isArray" = (object: any) => boolean
Line 175 col 10 ArrayLiteralExpression "[1, 2, 3]" = number[]
Line 176 col 0 InvocationExpression "_.isObject({})" = boolean
Line 176 col 0 MemberAccessExpression "_.isObject" = (value: any) => boolean
Line 176 col 0 IdentifierName "_" = Underscore.Static
Line 177 col 2 IdentifierName "isObject" = (value: any) => boolean
Line 177 col 11 ObjectLiteralExpression "{}" = {}
Line 178 col 0 InvocationExpression "_.isObject(1)" = boolean
Line 178 col 0 MemberAccessExpression "_.isObject" = (value: any) => boolean
Line 178 col 0 IdentifierName "_" = Underscore.Static
Line 178 col 2 IdentifierName "isObject" = (value: any) => boolean
Line 179 col 0 InvocationExpression "// (() => { return _.isArguments(arguments); })(1, 2, 3);
_.isArguments([1, 2, 3])" = boolean
Line 179 col 0 MemberAccessExpression "// (() => { return _.isArguments(arguments); })(1, 2, 3);
_.isArguments" = (object: any) => boolean
Line 179 col 0 IdentifierName "// (() => { return _.isArguments(arguments); })(1, 2, 3);
_" = Underscore.Static
Line 182 col 2 IdentifierName "isArguments" = (object: any) => boolean
Line 182 col 14 ArrayLiteralExpression "[1, 2, 3]" = number[]
Line 183 col 0 InvocationExpression "_.isFunction(alert)" = boolean
Line 183 col 0 MemberAccessExpression "_.isFunction" = (object: any) => boolean
Line 183 col 0 IdentifierName "_" = Underscore.Static
Line 184 col 2 IdentifierName "isFunction" = (object: any) => boolean
Line 184 col 13 IdentifierName "alert" = typeof alert
Line 185 col 0 InvocationExpression "_.isString("moe")" = boolean
Line 185 col 0 MemberAccessExpression "_.isString" = (object: any) => boolean
Line 185 col 0 IdentifierName "_" = Underscore.Static
Line 186 col 2 IdentifierName "isString" = (object: any) => boolean
Line 187 col 0 InvocationExpression "_.isNumber(8.4 * 5)" = boolean
Line 187 col 0 MemberAccessExpression "_.isNumber" = (object: any) => boolean
Line 187 col 0 IdentifierName "_" = Underscore.Static
Line 188 col 2 IdentifierName "isNumber" = (object: any) => boolean
Line 188 col 11 MultiplyExpression "8.4 * 5" = number
Line 189 col 0 InvocationExpression "_.isFinite(-101)" = boolean
Line 189 col 0 MemberAccessExpression "_.isFinite" = (object: any) => boolean
Line 189 col 0 IdentifierName "_" = Underscore.Static
Line 190 col 2 IdentifierName "isFinite" = (object: any) => boolean
Line 190 col 11 NegateExpression "-101" = number
Line 191 col 0 InvocationExpression "_.isFinite(-Infinity)" = boolean
Line 191 col 0 MemberAccessExpression "_.isFinite" = (object: any) => boolean
Line 191 col 0 IdentifierName "_" = Underscore.Static
Line 192 col 2 IdentifierName "isFinite" = (object: any) => boolean
Line 192 col 11 NegateExpression "-Infinity" = number
Line 192 col 12 IdentifierName "Infinity" = number
Line 193 col 0 InvocationExpression "_.isBoolean(null)" = boolean
Line 193 col 0 MemberAccessExpression "_.isBoolean" = (object: any) => boolean
Line 193 col 0 IdentifierName "_" = Underscore.Static
Line 194 col 2 IdentifierName "isBoolean" = (object: any) => boolean
Line 195 col 0 InvocationExpression "_.isDate(new Date())" = boolean
Line 195 col 0 MemberAccessExpression "_.isDate" = (object: any) => boolean
Line 195 col 0 IdentifierName "_" = Underscore.Static
Line 196 col 2 IdentifierName "isDate" = (object: any) => boolean
Line 196 col 9 ObjectCreationExpression "new Date()" = Date
Line 196 col 13 IdentifierName "Date" = { prototype: Date; parse(s: string): number; UTC(year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): number; now(): number; (): string; new(): Date; new(value: number): Date; new(value: string): Date; new(year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): Date; }
Line 197 col 0 InvocationExpression "_.isRegExp(/moe/)" = boolean
Line 197 col 0 MemberAccessExpression "_.isRegExp" = (object: any) => boolean
Line 197 col 0 IdentifierName "_" = Underscore.Static
Line 198 col 2 IdentifierName "isRegExp" = (object: any) => boolean
Line 199 col 0 InvocationExpression "_.isNaN(NaN)" = boolean
Line 199 col 0 MemberAccessExpression "_.isNaN" = (object: any) => boolean
Line 199 col 0 IdentifierName "_" = Underscore.Static
Line 200 col 2 IdentifierName "isNaN" = (object: any) => boolean
Line 200 col 8 IdentifierName "NaN" = number
Line 201 col 0 InvocationExpression "isNaN(undefined)" = boolean
Line 201 col 0 IdentifierName "isNaN" = typeof isNaN
Line 201 col 6 IdentifierName "undefined" = any
Line 202 col 0 InvocationExpression "_.isNaN(undefined)" = boolean
Line 202 col 0 MemberAccessExpression "_.isNaN" = (object: any) => boolean
Line 202 col 0 IdentifierName "_" = Underscore.Static
Line 202 col 2 IdentifierName "isNaN" = (object: any) => boolean
Line 202 col 8 IdentifierName "undefined" = any
Line 203 col 0 InvocationExpression "_.isNull(null)" = boolean
Line 203 col 0 MemberAccessExpression "_.isNull" = (object: any) => boolean
Line 203 col 0 IdentifierName "_" = Underscore.Static
Line 204 col 2 IdentifierName "isNull" = (object: any) => boolean
Line 205 col 0 InvocationExpression "_.isNull(undefined)" = boolean
Line 205 col 0 MemberAccessExpression "_.isNull" = (object: any) => boolean
Line 205 col 0 IdentifierName "_" = Underscore.Static
Line 205 col 2 IdentifierName "isNull" = (object: any) => boolean
Line 205 col 9 IdentifierName "undefined" = any
Line 206 col 0 InvocationExpression "_.isUndefined((<any>null).missingVariable)" = boolean
Line 206 col 0 MemberAccessExpression "_.isUndefined" = (value: any) => boolean
Line 206 col 0 IdentifierName "_" = Underscore.Static
Line 207 col 2 IdentifierName "isUndefined" = (value: any) => boolean
Line 207 col 14 MemberAccessExpression "(<any>null).missingVariable" = any
Line 207 col 14 ParenthesizedExpression "(<any>null)" = any
Line 207 col 15 CastExpression "<any>null" = any
Line 207 col 26 IdentifierName "missingVariable" = any
Line 211 col 4 IdentifierName "underscore" = Underscore.Static
Line 211 col 17 InvocationExpression "_.noConflict()" = Underscore.Static
Line 211 col 17 MemberAccessExpression "_.noConflict" = () => Underscore.Static
Line 211 col 17 IdentifierName "_" = Underscore.Static
Line 211 col 19 IdentifierName "noConflict" = () => Underscore.Static
Line 213 col 4 IdentifierName "moe2" = { name: string; }
Line 213 col 11 ObjectLiteralExpression "{ name: 'moe' }" = { name: string; }
Line 213 col 13 IdentifierName "name" = string
Line 214 col 0 EqualsExpression "moe2 === _.identity(moe)" = boolean
Line 214 col 0 IdentifierName "moe2" = { name: string; }
Line 214 col 9 InvocationExpression "_.identity(moe)" = { name: string; luckyNumbers: number[]; }
Line 214 col 9 MemberAccessExpression "_.identity" = <T>(value: T) => T
Line 214 col 9 IdentifierName "_" = Underscore.Static
Line 214 col 11 IdentifierName "identity" = <T>(value: T) => T
Line 214 col 20 IdentifierName "moe" = { name: string; luckyNumbers: number[]; }
Line 216 col 4 IdentifierName "genie" = any
Line 217 col 0 InvocationExpression "_.times(3, function (n) { genie.grantWishNumber(n); })" = void[]
Line 217 col 0 MemberAccessExpression "_.times" = <U>(n: number, iterator: Iterator<number, U>, context?: any) => U[]
Line 217 col 0 IdentifierName "_" = Underscore.Static
Line 218 col 2 IdentifierName "times" = <U>(n: number, iterator: Iterator<number, U>, context?: any) => U[]
Line 218 col 11 FunctionExpression "function (n) { genie.grantWishNumber(n); }" = (n: number) => void
Line 218 col 21 IdentifierName "n" = number
Line 218 col 26 InvocationExpression "genie.grantWishNumber(n)" = any
Line 218 col 26 MemberAccessExpression "genie.grantWishNumber" = any
Line 218 col 26 IdentifierName "genie" = any
Line 218 col 32 IdentifierName "grantWishNumber" = any
Line 218 col 48 IdentifierName "n" = number
Line 219 col 0 InvocationExpression "_.random(0, 100)" = number
Line 219 col 0 MemberAccessExpression "_.random" = { (max: number): number; (min: number, max: number): number; }
Line 219 col 0 IdentifierName "_" = Underscore.Static
Line 220 col 2 IdentifierName "random" = { (max: number): number; (min: number, max: number): number; }
Line 221 col 0 InvocationExpression "_.mixin({
    capitalize: function (string) {
        return string.charAt(0).toUpperCase() + string.substring(1).toLowerCase();
    }
})" = void
Line 221 col 0 MemberAccessExpression "_.mixin" = (object: any) => void
Line 221 col 0 IdentifierName "_" = Underscore.Static
Line 222 col 2 IdentifierName "mixin" = (object: any) => void
Line 222 col 8 ObjectLiteralExpression "{
    capitalize: function (string) {
        return string.charAt(0).toUpperCase() + string.substring(1).toLowerCase();
    }
}" = { capitalize: (string: any) => any; }
Line 223 col 0 IdentifierName "capitalize" = (string: any) => any
Line 223 col 16 FunctionExpression "function (string) {
        return string.charAt(0).toUpperCase() + string.substring(1).toLowerCase();
    }" = (string: any) => any
Line 223 col 26 IdentifierName "string" = any
Line 224 col 15 AddExpression "string.charAt(0).toUpperCase() + string.substring(1).toLowerCase()" = any
Line 224 col 15 InvocationExpression "string.charAt(0).toUpperCase()" = any
Line 224 col 15 MemberAccessExpression "string.charAt(0).toUpperCase" = any
Line 224 col 15 InvocationExpression "string.charAt(0)" = any
Line 224 col 15 MemberAccessExpression "string.charAt" = any
Line 224 col 15 IdentifierName "string" = any
Line 224 col 22 IdentifierName "charAt" = any
Line 224 col 32 IdentifierName "toUpperCase" = any
Line 224 col 48 InvocationExpression "string.substring(1).toLowerCase()" = any
Line 224 col 48 MemberAccessExpression "string.substring(1).toLowerCase" = any
Line 224 col 48 InvocationExpression "string.substring(1)" = any
Line 224 col 48 MemberAccessExpression "string.substring" = any
Line 224 col 48 IdentifierName "string" = any
Line 224 col 55 IdentifierName "substring" = any
Line 224 col 68 IdentifierName "toLowerCase" = any
Line 227 col 0 InvocationExpression "(<any>_("fabio")).capitalize()" = any
Line 227 col 0 MemberAccessExpression "(<any>_("fabio")).capitalize" = any
Line 227 col 0 ParenthesizedExpression "(<any>_("fabio"))" = any
Line 227 col 1 CastExpression "<any>_("fabio")" = any
Line 227 col 6 InvocationExpression "_("fabio")" = Underscore.WrappedObject<string>
Line 227 col 6 IdentifierName "_" = Underscore.Static
Line 227 col 18 IdentifierName "capitalize" = any
Line 228 col 0 InvocationExpression "_.uniqueId('contact_')" = string
Line 228 col 0 MemberAccessExpression "_.uniqueId" = { (): number; (prefix: string): string; }
Line 228 col 0 IdentifierName "_" = Underscore.Static
Line 229 col 2 IdentifierName "uniqueId" = { (): number; (prefix: string): string; }
Line 230 col 0 InvocationExpression "_.escape('Curly, Larry & Moe')" = string
Line 230 col 0 MemberAccessExpression "_.escape" = (s: string) => string
Line 230 col 0 IdentifierName "_" = Underscore.Static
Line 231 col 2 IdentifierName "escape" = (s: string) => string
Line 233 col 4 IdentifierName "object" = { cheese: string; stuff: () => string; }
Line 233 col 13 ObjectLiteralExpression "{ cheese: 'crumpets', stuff: function () { return 'nonsense'; } }" = { cheese: string; stuff: () => string; }
Line 233 col 15 IdentifierName "cheese" = string
Line 233 col 35 IdentifierName "stuff" = () => string
Line 233 col 42 FunctionExpression "function () { return 'nonsense'; }" = () => string
Line 234 col 0 InvocationExpression "_.result(object, 'cheese')" = any
Line 234 col 0 MemberAccessExpression "_.result" = (object: any, property: string) => any
Line 234 col 0 IdentifierName "_" = Underscore.Static
Line 234 col 2 IdentifierName "result" = (object: any, property: string) => any
Line 234 col 9 IdentifierName "object" = { cheese: string; stuff: () => string; }
Line 235 col 0 InvocationExpression "_.result(object, 'stuff')" = any
Line 235 col 0 MemberAccessExpression "_.result" = (object: any, property: string) => any
Line 235 col 0 IdentifierName "_" = Underscore.Static
Line 236 col 2 IdentifierName "result" = (object: any, property: string) => any
Line 236 col 9 IdentifierName "object" = { cheese: string; stuff: () => string; }
Line 238 col 4 IdentifierName "compiled" = (data: any) => string
Line 238 col 15 InvocationExpression "_.template("hello: <%= name %>")" = (data: any) => string
Line 238 col 15 MemberAccessExpression "_.template" = { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: Underscore.TemplateSettings): string; }
Line 238 col 15 IdentifierName "_" = Underscore.Static
Line 238 col 17 IdentifierName "template" = { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: Underscore.TemplateSettings): string; }
Line 239 col 0 InvocationExpression "compiled({ name: 'moe' })" = string
Line 239 col 0 IdentifierName "compiled" = (data: any) => string
Line 239 col 9 ObjectLiteralExpression "{ name: 'moe' }" = { name: string; }
Line 239 col 11 IdentifierName "name" = string
Line 240 col 4 IdentifierName "list2" = string
Line 241 col 0 InvocationExpression "_.template(list2, { people: ['moe', 'curly', 'larry'] })" = string
Line 241 col 0 MemberAccessExpression "_.template" = { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: Underscore.TemplateSettings): string; }
Line 241 col 0 IdentifierName "_" = Underscore.Static
Line 241 col 2 IdentifierName "template" = { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: Underscore.TemplateSettings): string; }
Line 241 col 11 IdentifierName "list2" = string
Line 241 col 18 ObjectLiteralExpression "{ people: ['moe', 'curly', 'larry'] }" = { people: string[]; }
Line 241 col 20 IdentifierName "people" = string[]
Line 241 col 28 ArrayLiteralExpression "['moe', 'curly', 'larry']" = string[]
Line 242 col 4 IdentifierName "template" = (data: any) => string
Line 242 col 15 InvocationExpression "_.template("<b><%- value %></b>")" = (data: any) => string
Line 242 col 15 MemberAccessExpression "_.template" = { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: Underscore.TemplateSettings): string; }
Line 242 col 15 IdentifierName "_" = Underscore.Static
Line 242 col 17 IdentifierName "template" = { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: Underscore.TemplateSettings): string; }
Line 243 col 0 InvocationExpression "template({ value: '<script>' })" = string
Line 243 col 0 IdentifierName "template" = (data: any) => string
Line 243 col 9 ObjectLiteralExpression "{ value: '<script>' }" = { value: string; }
Line 243 col 11 IdentifierName "value" = string
Line 244 col 4 IdentifierName "compiled2" = (data: any) => string
Line 244 col 16 InvocationExpression "_.template("<% print('Hello ' + epithet); %>")" = (data: any) => string
Line 244 col 16 MemberAccessExpression "_.template" = { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: Underscore.TemplateSettings): string; }
Line 244 col 16 IdentifierName "_" = Underscore.Static
Line 244 col 18 IdentifierName "template" = { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: Underscore.TemplateSettings): string; }
Line 245 col 0 InvocationExpression "compiled2({ epithet: "stooge" })" = string
Line 245 col 0 IdentifierName "compiled2" = (data: any) => string
Line 245 col 10 ObjectLiteralExpression "{ epithet: "stooge" }" = { epithet: string; }
Line 245 col 12 IdentifierName "epithet" = string
Line 246 col 0 AssignmentExpression "_.templateSettings = {
    interpolate: /\{\{(.+?)\}\}/g
}" = { interpolate: RegExp; }
Line 246 col 0 MemberAccessExpression "_.templateSettings" = Underscore.TemplateSettings
Line 246 col 0 IdentifierName "_" = Underscore.Static
Line 246 col 2 IdentifierName "templateSettings" = Underscore.TemplateSettings
Line 246 col 21 ObjectLiteralExpression "{
    interpolate: /\{\{(.+?)\}\}/g
}" = { interpolate: RegExp; }
Line 247 col 0 IdentifierName "interpolate" = RegExp
Line 249 col 4 IdentifierName "template2" = (data: any) => string
Line 249 col 16 InvocationExpression "_.template("Hello {{ name }}!")" = (data: any) => string
Line 249 col 16 MemberAccessExpression "_.template" = { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: Underscore.TemplateSettings): string; }
Line 249 col 16 IdentifierName "_" = Underscore.Static
Line 249 col 18 IdentifierName "template" = { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: Underscore.TemplateSettings): string; }
Line 250 col 0 InvocationExpression "template2({ name: "Mustache" })" = string
Line 250 col 0 IdentifierName "template2" = (data: any) => string
Line 250 col 10 ObjectLiteralExpression "{ name: "Mustache" }" = { name: string; }
Line 250 col 12 IdentifierName "name" = string
Line 251 col 0 InvocationExpression "_.template("Using 'with': <%= data.answer %>", { answer: 'no' }, { variable: 'data' })" = string
Line 251 col 0 MemberAccessExpression "_.template" = { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: Underscore.TemplateSettings): string; }
Line 251 col 0 IdentifierName "_" = Underscore.Static
Line 251 col 2 IdentifierName "template" = { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: Underscore.TemplateSettings): string; }
Line 251 col 47 ObjectLiteralExpression "{ answer: 'no' }" = { answer: string; }
Line 251 col 49 IdentifierName "answer" = string
Line 251 col 65 ObjectLiteralExpression "{ variable: 'data' }" = { variable: string; }
Line 251 col 67 IdentifierName "variable" = string
=== tests/cases/compiler/underscoreTest1_underscore.ts ===
Line 0 col 10 IdentifierName "Dictionary" = Dictionary<T>
Line 0 col 21 IdentifierName "T" = T
Line 1 col 5 IdentifierName "x" = string
Line 1 col 17 IdentifierName "T" = T
Line 4 col 10 IdentifierName "Iterator" = Iterator<T, U>
Line 4 col 19 IdentifierName "T" = T
Line 4 col 22 IdentifierName "U" = U
Line 5 col 5 IdentifierName "value" = T
Line 5 col 12 IdentifierName "T" = T
Line 5 col 15 IdentifierName "index" = any
Line 5 col 27 IdentifierName "list" = any
Line 5 col 39 IdentifierName "U" = U
Line 8 col 10 IdentifierName "Reducer" = Reducer<T, U>
Line 8 col 18 IdentifierName "T" = T
Line 8 col 21 IdentifierName "U" = U
Line 9 col 5 IdentifierName "accumulator" = U
Line 9 col 18 IdentifierName "U" = U
Line 9 col 21 IdentifierName "value" = T
Line 9 col 28 IdentifierName "T" = T
Line 9 col 31 IdentifierName "index" = any
Line 9 col 43 IdentifierName "list" = any
Line 9 col 55 IdentifierName "U" = U
Line 12 col 10 IdentifierName "Tuple2" = Tuple2<T0, T1>
Line 12 col 17 IdentifierName "T0" = T0
Line 12 col 21 IdentifierName "T1" = T1
Line 12 col 33 IdentifierName "Array" = Array<T>
Line 13 col 7 IdentifierName "T0" = T0
Line 14 col 7 IdentifierName "T1" = T1
Line 17 col 10 IdentifierName "Tuple3" = Tuple3<T0, T1, T2>
Line 17 col 17 IdentifierName "T0" = T0
Line 17 col 21 IdentifierName "T1" = T1
Line 17 col 25 IdentifierName "T2" = T2
Line 17 col 37 IdentifierName "Array" = Array<T>
Line 18 col 7 IdentifierName "T0" = T0
Line 19 col 7 IdentifierName "T1" = T1
Line 20 col 7 IdentifierName "T2" = T2
Line 23 col 10 IdentifierName "Tuple4" = Tuple4<T0, T1, T2, T3>
Line 23 col 17 IdentifierName "T0" = T0
Line 23 col 21 IdentifierName "T1" = T1
Line 23 col 25 IdentifierName "T2" = T2
Line 23 col 29 IdentifierName "T3" = T3
Line 23 col 41 IdentifierName "Array" = Array<T>
Line 24 col 7 IdentifierName "T0" = T0
Line 25 col 7 IdentifierName "T1" = T1
Line 26 col 7 IdentifierName "T2" = T2
Line 27 col 7 IdentifierName "T3" = T3
Line 30 col 7 IdentifierName "Underscore" = Underscore
Line 31 col 21 IdentifierName "WrappedObject" = WrappedObject<T>
Line 31 col 35 IdentifierName "T" = T
Line 32 col 0 IdentifierName "keys" = () => string[]
Line 33 col 0 IdentifierName "values" = () => any[]
Line 34 col 0 IdentifierName "pairs" = () => any[][]
Line 35 col 0 IdentifierName "invert" = () => any
Line 36 col 0 IdentifierName "functions" = () => string[]
Line 37 col 0 IdentifierName "methods" = () => string[]
Line 38 col 0 IdentifierName "extend" = (...sources: any[]) => T
Line 38 col 18 IdentifierName "sources" = any[]
Line 38 col 35 IdentifierName "T" = T
Line 39 col 0 IdentifierName "pick" = (...keys: string[]) => T
Line 39 col 16 IdentifierName "keys" = string[]
Line 39 col 33 IdentifierName "T" = T
Line 40 col 0 IdentifierName "omit" = (...keys: string[]) => T
Line 40 col 16 IdentifierName "keys" = string[]
Line 40 col 33 IdentifierName "T" = T
Line 41 col 0 IdentifierName "defaults" = (...defaults: any[]) => T
Line 41 col 20 IdentifierName "defaults" = any[]
Line 41 col 38 IdentifierName "T" = T
Line 42 col 0 IdentifierName "clone" = () => T
Line 42 col 17 IdentifierName "T" = T
Line 43 col 0 IdentifierName "tap" = (interceptor: (object: T) => void) => T
Line 43 col 12 IdentifierName "interceptor" = (object: T) => void
Line 43 col 26 IdentifierName "object" = T
Line 43 col 34 IdentifierName "T" = T
Line 43 col 47 IdentifierName "T" = T
Line 44 col 0 IdentifierName "has" = (key: string) => boolean
Line 44 col 12 IdentifierName "key" = string
Line 45 col 0 IdentifierName "isEqual" = (other: T) => boolean
Line 45 col 16 IdentifierName "other" = T
Line 45 col 23 IdentifierName "T" = T
Line 46 col 0 IdentifierName "isEmpty" = () => boolean
Line 47 col 0 IdentifierName "isElement" = () => boolean
Line 48 col 0 IdentifierName "isArray" = () => boolean
Line 49 col 0 IdentifierName "isObject" = () => boolean
Line 50 col 0 IdentifierName "isArguments" = () => boolean
Line 51 col 0 IdentifierName "isFunction" = () => boolean
Line 52 col 0 IdentifierName "isString" = () => boolean
Line 53 col 0 IdentifierName "isNumber" = () => boolean
Line 54 col 0 IdentifierName "isFinite" = () => boolean
Line 55 col 0 IdentifierName "isBoolean" = () => boolean
Line 56 col 0 IdentifierName "isDate" = () => boolean
Line 57 col 0 IdentifierName "isRegExp" = () => boolean
Line 58 col 0 IdentifierName "isNaN" = () => boolean
Line 59 col 0 IdentifierName "isNull" = () => boolean
Line 60 col 0 IdentifierName "isUndefined" = () => boolean
Line 61 col 0 IdentifierName "value" = () => T
Line 61 col 17 IdentifierName "T" = T
Line 64 col 21 IdentifierName "WrappedFunction" = WrappedFunction<T>
Line 64 col 37 IdentifierName "T" = T
Line 64 col 47 IdentifierName "Function" = Function
Line 64 col 65 IdentifierName "WrappedObject" = WrappedObject<T>
Line 64 col 79 IdentifierName "T" = T
Line 65 col 0 IdentifierName "bind" = { (object: any): T; (object: any, ...args: any[]): Function; }
Line 65 col 13 IdentifierName "object" = any
Line 65 col 27 IdentifierName "T" = T
Line 66 col 0 IdentifierName "bind" = { (object: any): T; (object: any, ...args: any[]): Function; }
Line 66 col 13 IdentifierName "object" = any
Line 66 col 29 IdentifierName "args" = any[]
Line 66 col 43 IdentifierName "Function" = Function
Line 67 col 0 IdentifierName "bindAll" = (...methodNames: string[]) => T
Line 67 col 19 IdentifierName "methodNames" = string[]
Line 67 col 43 IdentifierName "T" = T
Line 68 col 0 IdentifierName "partial" = (...args: any[]) => Function
Line 68 col 19 IdentifierName "args" = any[]
Line 68 col 33 IdentifierName "Function" = Function
Line 69 col 0 IdentifierName "memoize" = (hashFunction?: Function) => T
Line 69 col 16 IdentifierName "hashFunction" = Function
Line 69 col 31 IdentifierName "Function" = Function
Line 69 col 42 IdentifierName "T" = T
Line 70 col 0 IdentifierName "delay" = (wait: number, ...args: any[]) => number
Line 70 col 14 IdentifierName "wait" = number
Line 70 col 31 IdentifierName "args" = any[]
Line 71 col 0 IdentifierName "defer" = (...args: any[]) => number
Line 71 col 17 IdentifierName "args" = any[]
Line 72 col 0 IdentifierName "throttle" = (wait: number) => T
Line 72 col 17 IdentifierName "wait" = number
Line 72 col 32 IdentifierName "T" = T
Line 73 col 0 IdentifierName "debounce" = (wait: number, immediate?: boolean) => T
Line 73 col 17 IdentifierName "wait" = number
Line 73 col 31 IdentifierName "immediate" = boolean
Line 73 col 53 IdentifierName "T" = T
Line 74 col 0 IdentifierName "once" = () => T
Line 74 col 16 IdentifierName "T" = T
Line 75 col 0 IdentifierName "wrap" = (wrapper: (func: T, ...args: any[]) => any) => T
Line 75 col 13 IdentifierName "wrapper" = (func: T, ...args: any[]) => any
Line 75 col 23 IdentifierName "func" = T
Line 75 col 29 IdentifierName "T" = T
Line 75 col 35 IdentifierName "args" = any[]
Line 75 col 57 IdentifierName "T" = T
Line 76 col 0 IdentifierName "compose" = (...funcs: Function[]) => Function
Line 76 col 19 IdentifierName "funcs" = Function[]
Line 76 col 26 IdentifierName "Function" = Function
Line 76 col 39 IdentifierName "Function" = Function
Line 79 col 21 IdentifierName "WrappedArray" = WrappedArray<T>
Line 79 col 34 IdentifierName "T" = T
Line 79 col 45 IdentifierName "WrappedObject" = WrappedObject<T>
Line 79 col 59 IdentifierName "Array" = Array<T>
Line 79 col 65 IdentifierName "T" = T
Line 80 col 0 IdentifierName "each" = (iterator: Iterator<T, void>, context?: any) => void
Line 80 col 13 IdentifierName "iterator" = Iterator<T, void>
Line 80 col 23 IdentifierName "Iterator" = Iterator<T, U>
Line 80 col 32 IdentifierName "T" = T
Line 80 col 42 IdentifierName "context" = any
Line 81 col 0 IdentifierName "forEach" = (iterator: Iterator<T, void>, context?: any) => void
Line 81 col 16 IdentifierName "iterator" = Iterator<T, void>
Line 81 col 26 IdentifierName "Iterator" = Iterator<T, U>
Line 81 col 35 IdentifierName "T" = T
Line 81 col 45 IdentifierName "context" = any
Line 82 col 0 IdentifierName "map" = <U>(iterator: Iterator<T, U>, context?: any) => U[]
Line 82 col 12 IdentifierName "U" = U
Line 82 col 15 IdentifierName "iterator" = Iterator<T, U>
Line 82 col 25 IdentifierName "Iterator" = Iterator<T, U>
Line 82 col 34 IdentifierName "T" = T
Line 82 col 37 IdentifierName "U" = U
Line 82 col 41 IdentifierName "context" = any
Line 82 col 57 IdentifierName "U" = U
Line 83 col 0 IdentifierName "collect" = <U>(iterator: Iterator<T, U>, context?: any) => U[]
Line 83 col 16 IdentifierName "U" = U
Line 83 col 19 IdentifierName "iterator" = Iterator<T, U>
Line 83 col 29 IdentifierName "Iterator" = Iterator<T, U>
Line 83 col 38 IdentifierName "T" = T
Line 83 col 41 IdentifierName "U" = U
Line 83 col 45 IdentifierName "context" = any
Line 83 col 61 IdentifierName "U" = U
Line 84 col 0 IdentifierName "reduce" = { (iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
Line 84 col 15 IdentifierName "iterator" = Reducer<T, T>
Line 84 col 25 IdentifierName "Reducer" = Reducer<T, U>
Line 84 col 33 IdentifierName "T" = T
Line 84 col 36 IdentifierName "T" = T
Line 84 col 40 IdentifierName "initialValue" = T
Line 84 col 55 IdentifierName "T" = T
Line 84 col 58 IdentifierName "context" = any
Line 84 col 74 IdentifierName "T" = T
Line 85 col 0 IdentifierName "reduce" = { (iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
Line 85 col 15 IdentifierName "U" = U
Line 85 col 18 IdentifierName "iterator" = Reducer<T, U>
Line 85 col 28 IdentifierName "Reducer" = Reducer<T, U>
Line 85 col 36 IdentifierName "T" = T
Line 85 col 39 IdentifierName "U" = U
Line 85 col 43 IdentifierName "initialValue" = U
Line 85 col 57 IdentifierName "U" = U
Line 85 col 60 IdentifierName "context" = any
Line 85 col 76 IdentifierName "U" = U
Line 86 col 0 IdentifierName "foldl" = { (iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
Line 86 col 14 IdentifierName "iterator" = Reducer<T, T>
Line 86 col 24 IdentifierName "Reducer" = Reducer<T, U>
Line 86 col 32 IdentifierName "T" = T
Line 86 col 35 IdentifierName "T" = T
Line 86 col 39 IdentifierName "initialValue" = T
Line 86 col 54 IdentifierName "T" = T
Line 86 col 57 IdentifierName "context" = any
Line 86 col 73 IdentifierName "T" = T
Line 87 col 0 IdentifierName "foldl" = { (iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
Line 87 col 14 IdentifierName "U" = U
Line 87 col 17 IdentifierName "iterator" = Reducer<T, U>
Line 87 col 27 IdentifierName "Reducer" = Reducer<T, U>
Line 87 col 35 IdentifierName "T" = T
Line 87 col 38 IdentifierName "U" = U
Line 87 col 42 IdentifierName "initialValue" = U
Line 87 col 56 IdentifierName "U" = U
Line 87 col 59 IdentifierName "context" = any
Line 87 col 75 IdentifierName "U" = U
Line 88 col 0 IdentifierName "inject" = { (iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
Line 88 col 15 IdentifierName "iterator" = Reducer<T, T>
Line 88 col 25 IdentifierName "Reducer" = Reducer<T, U>
Line 88 col 33 IdentifierName "T" = T
Line 88 col 36 IdentifierName "T" = T
Line 88 col 40 IdentifierName "initialValue" = T
Line 88 col 55 IdentifierName "T" = T
Line 88 col 58 IdentifierName "context" = any
Line 88 col 74 IdentifierName "T" = T
Line 89 col 0 IdentifierName "inject" = { (iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
Line 89 col 15 IdentifierName "U" = U
Line 89 col 18 IdentifierName "iterator" = Reducer<T, U>
Line 89 col 28 IdentifierName "Reducer" = Reducer<T, U>
Line 89 col 36 IdentifierName "T" = T
Line 89 col 39 IdentifierName "U" = U
Line 89 col 43 IdentifierName "initialValue" = U
Line 89 col 57 IdentifierName "U" = U
Line 89 col 60 IdentifierName "context" = any
Line 89 col 76 IdentifierName "U" = U
Line 90 col 0 IdentifierName "reduceRight" = { (iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
Line 90 col 20 IdentifierName "iterator" = Reducer<T, T>
Line 90 col 30 IdentifierName "Reducer" = Reducer<T, U>
Line 90 col 38 IdentifierName "T" = T
Line 90 col 41 IdentifierName "T" = T
Line 90 col 45 IdentifierName "initialValue" = T
Line 90 col 60 IdentifierName "T" = T
Line 90 col 63 IdentifierName "context" = any
Line 90 col 79 IdentifierName "T" = T
Line 91 col 0 IdentifierName "reduceRight" = { (iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
Line 91 col 20 IdentifierName "U" = U
Line 91 col 23 IdentifierName "iterator" = Reducer<T, U>
Line 91 col 33 IdentifierName "Reducer" = Reducer<T, U>
Line 91 col 41 IdentifierName "T" = T
Line 91 col 44 IdentifierName "U" = U
Line 91 col 48 IdentifierName "initialValue" = U
Line 91 col 62 IdentifierName "U" = U
Line 91 col 65 IdentifierName "context" = any
Line 91 col 81 IdentifierName "U" = U
Line 92 col 0 IdentifierName "foldr" = { (iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
Line 92 col 14 IdentifierName "iterator" = Reducer<T, T>
Line 92 col 24 IdentifierName "Reducer" = Reducer<T, U>
Line 92 col 32 IdentifierName "T" = T
Line 92 col 35 IdentifierName "T" = T
Line 92 col 39 IdentifierName "initialValue" = T
Line 92 col 54 IdentifierName "T" = T
Line 92 col 57 IdentifierName "context" = any
Line 92 col 73 IdentifierName "T" = T
Line 93 col 0 IdentifierName "foldr" = { (iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
Line 93 col 14 IdentifierName "U" = U
Line 93 col 17 IdentifierName "iterator" = Reducer<T, U>
Line 93 col 27 IdentifierName "Reducer" = Reducer<T, U>
Line 93 col 35 IdentifierName "T" = T
Line 93 col 38 IdentifierName "U" = U
Line 93 col 42 IdentifierName "initialValue" = U
Line 93 col 56 IdentifierName "U" = U
Line 93 col 59 IdentifierName "context" = any
Line 93 col 75 IdentifierName "U" = U
Line 94 col 0 IdentifierName "find" = (iterator: Iterator<T, boolean>, context?: any) => T
Line 94 col 13 IdentifierName "iterator" = Iterator<T, boolean>
Line 94 col 23 IdentifierName "Iterator" = Iterator<T, U>
Line 94 col 32 IdentifierName "T" = T
Line 94 col 45 IdentifierName "context" = any
Line 94 col 61 IdentifierName "T" = T
Line 95 col 0 IdentifierName "detect" = (iterator: Iterator<T, boolean>, context?: any) => T
Line 95 col 15 IdentifierName "iterator" = Iterator<T, boolean>
Line 95 col 25 IdentifierName "Iterator" = Iterator<T, U>
Line 95 col 34 IdentifierName "T" = T
Line 95 col 47 IdentifierName "context" = any
Line 95 col 63 IdentifierName "T" = T
Line 96 col 0 IdentifierName "filter" = (iterator: Iterator<T, boolean>, context?: any) => T[]
Line 96 col 15 IdentifierName "iterator" = Iterator<T, boolean>
Line 96 col 25 IdentifierName "Iterator" = Iterator<T, U>
Line 96 col 34 IdentifierName "T" = T
Line 96 col 47 IdentifierName "context" = any
Line 96 col 63 IdentifierName "T" = T
Line 97 col 0 IdentifierName "select" = (iterator: Iterator<T, boolean>, context?: any) => T[]
Line 97 col 15 IdentifierName "iterator" = Iterator<T, boolean>
Line 97 col 25 IdentifierName "Iterator" = Iterator<T, U>
Line 97 col 34 IdentifierName "T" = T
Line 97 col 47 IdentifierName "context" = any
Line 97 col 63 IdentifierName "T" = T
Line 98 col 0 IdentifierName "where" = (properties: Object) => T[]
Line 98 col 14 IdentifierName "properties" = Object
Line 98 col 26 IdentifierName "Object" = Object
Line 98 col 35 IdentifierName "T" = T
Line 99 col 0 IdentifierName "findWhere" = (properties: Object) => T
Line 99 col 18 IdentifierName "properties" = Object
Line 99 col 30 IdentifierName "Object" = Object
Line 99 col 39 IdentifierName "T" = T
Line 100 col 0 IdentifierName "reject" = (iterator: Iterator<T, boolean>, context?: any) => T[]
Line 100 col 15 IdentifierName "iterator" = Iterator<T, boolean>
Line 100 col 25 IdentifierName "Iterator" = Iterator<T, U>
Line 100 col 34 IdentifierName "T" = T
Line 100 col 47 IdentifierName "context" = any
Line 100 col 63 IdentifierName "T" = T
Line 101 col 0 IdentifierName "every" = (iterator?: Iterator<T, boolean>, context?: any) => boolean
Line 101 col 14 IdentifierName "iterator" = Iterator<T, boolean>
Line 101 col 25 IdentifierName "Iterator" = Iterator<T, U>
Line 101 col 34 IdentifierName "T" = T
Line 101 col 47 IdentifierName "context" = any
Line 102 col 0 IdentifierName "all" = (iterator?: Iterator<T, boolean>, context?: any) => boolean
Line 102 col 12 IdentifierName "iterator" = Iterator<T, boolean>
Line 102 col 23 IdentifierName "Iterator" = Iterator<T, U>
Line 102 col 32 IdentifierName "T" = T
Line 102 col 45 IdentifierName "context" = any
Line 103 col 0 IdentifierName "some" = (iterator?: Iterator<T, boolean>, context?: any) => boolean
Line 103 col 13 IdentifierName "iterator" = Iterator<T, boolean>
Line 103 col 24 IdentifierName "Iterator" = Iterator<T, U>
Line 103 col 33 IdentifierName "T" = T
Line 103 col 46 IdentifierName "context" = any
Line 104 col 0 IdentifierName "any" = (iterator?: Iterator<T, boolean>, context?: any) => boolean
Line 104 col 12 IdentifierName "iterator" = Iterator<T, boolean>
Line 104 col 23 IdentifierName "Iterator" = Iterator<T, U>
Line 104 col 32 IdentifierName "T" = T
Line 104 col 45 IdentifierName "context" = any
Line 105 col 0 IdentifierName "contains" = (value: T) => boolean
Line 105 col 17 IdentifierName "value" = T
Line 105 col 24 IdentifierName "T" = T
Line 106 col 0 IdentifierName "include" = (value: T) => boolean
Line 106 col 16 IdentifierName "value" = T
Line 106 col 23 IdentifierName "T" = T
Line 107 col 0 IdentifierName "invoke" = (methodName: string, ...args: any[]) => any[]
Line 107 col 15 IdentifierName "methodName" = string
Line 107 col 38 IdentifierName "args" = any[]
Line 108 col 0 IdentifierName "pluck" = (propertyName: string) => any[]
Line 108 col 14 IdentifierName "propertyName" = string
Line 109 col 0 IdentifierName "max" = (iterator?: Iterator<T, any>, context?: any) => T
Line 109 col 12 IdentifierName "iterator" = Iterator<T, any>
Line 109 col 23 IdentifierName "Iterator" = Iterator<T, U>
Line 109 col 32 IdentifierName "T" = T
Line 109 col 41 IdentifierName "context" = any
Line 109 col 57 IdentifierName "T" = T
Line 110 col 0 IdentifierName "min" = (iterator?: Iterator<T, any>, context?: any) => T
Line 110 col 12 IdentifierName "iterator" = Iterator<T, any>
Line 110 col 23 IdentifierName "Iterator" = Iterator<T, U>
Line 110 col 32 IdentifierName "T" = T
Line 110 col 41 IdentifierName "context" = any
Line 110 col 57 IdentifierName "T" = T
Line 111 col 0 IdentifierName "sortBy" = { (iterator: Iterator<T, any>, context?: any): T[]; (propertyName: string): T[]; }
Line 111 col 15 IdentifierName "iterator" = Iterator<T, any>
Line 111 col 25 IdentifierName "Iterator" = Iterator<T, U>
Line 111 col 34 IdentifierName "T" = T
Line 111 col 43 IdentifierName "context" = any
Line 111 col 59 IdentifierName "T" = T
Line 112 col 0 IdentifierName "sortBy" = { (iterator: Iterator<T, any>, context?: any): T[]; (propertyName: string): T[]; }
Line 112 col 15 IdentifierName "propertyName" = string
Line 112 col 38 IdentifierName "T" = T
Line 113 col 0 IdentifierName "groupBy" = { (iterator?: Iterator<T, any>, context?: any): Dictionary<T[]>; (propertyName: string): Dictionary<T[]>; }
Line 113 col 16 IdentifierName "iterator" = Iterator<T, any>
Line 113 col 27 IdentifierName "Iterator" = Iterator<T, U>
Line 113 col 36 IdentifierName "T" = T
Line 113 col 45 IdentifierName "context" = any
Line 113 col 61 IdentifierName "Dictionary" = Dictionary<T>
Line 113 col 72 IdentifierName "T" = T
Line 114 col 0 IdentifierName "groupBy" = { (iterator?: Iterator<T, any>, context?: any): Dictionary<T[]>; (propertyName: string): Dictionary<T[]>; }
Line 114 col 16 IdentifierName "propertyName" = string
Line 114 col 39 IdentifierName "Dictionary" = Dictionary<T>
Line 114 col 50 IdentifierName "T" = T
Line 115 col 0 IdentifierName "countBy" = { (iterator?: Iterator<T, any>, context?: any): Dictionary<number>; (propertyName: string): Dictionary<number>; }
Line 115 col 16 IdentifierName "iterator" = Iterator<T, any>
Line 115 col 27 IdentifierName "Iterator" = Iterator<T, U>
Line 115 col 36 IdentifierName "T" = T
Line 115 col 45 IdentifierName "context" = any
Line 115 col 61 IdentifierName "Dictionary" = Dictionary<T>
Line 116 col 0 IdentifierName "countBy" = { (iterator?: Iterator<T, any>, context?: any): Dictionary<number>; (propertyName: string): Dictionary<number>; }
Line 116 col 16 IdentifierName "propertyName" = string
Line 116 col 39 IdentifierName "Dictionary" = Dictionary<T>
Line 117 col 0 IdentifierName "shuffle" = () => T[]
Line 117 col 19 IdentifierName "T" = T
Line 118 col 0 IdentifierName "toArray" = () => T[]
Line 118 col 19 IdentifierName "T" = T
Line 119 col 0 IdentifierName "size" = () => number
Line 120 col 0 IdentifierName "first" = { (): T; (count: number): T[]; }
Line 120 col 17 IdentifierName "T" = T
Line 121 col 0 IdentifierName "first" = { (): T; (count: number): T[]; }
Line 121 col 14 IdentifierName "count" = number
Line 121 col 30 IdentifierName "T" = T
Line 122 col 0 IdentifierName "head" = { (): T; (count: number): T[]; }
Line 122 col 16 IdentifierName "T" = T
Line 123 col 0 IdentifierName "head" = { (): T; (count: number): T[]; }
Line 123 col 13 IdentifierName "count" = number
Line 123 col 29 IdentifierName "T" = T
Line 124 col 0 IdentifierName "take" = { (): T; (count: number): T[]; }
Line 124 col 16 IdentifierName "T" = T
Line 125 col 0 IdentifierName "take" = { (): T; (count: number): T[]; }
Line 125 col 13 IdentifierName "count" = number
Line 125 col 29 IdentifierName "T" = T
Line 126 col 0 IdentifierName "initial" = { (): T; (count: number): T[]; }
Line 126 col 19 IdentifierName "T" = T
Line 127 col 0 IdentifierName "initial" = { (): T; (count: number): T[]; }
Line 127 col 16 IdentifierName "count" = number
Line 127 col 32 IdentifierName "T" = T
Line 128 col 0 IdentifierName "last" = { (): T; (count: number): T[]; }
Line 128 col 16 IdentifierName "T" = T
Line 129 col 0 IdentifierName "last" = { (): T; (count: number): T[]; }
Line 129 col 13 IdentifierName "count" = number
Line 129 col 29 IdentifierName "T" = T
Line 130 col 0 IdentifierName "rest" = (index?: number) => T[]
Line 130 col 13 IdentifierName "index" = number
Line 130 col 30 IdentifierName "T" = T
Line 131 col 0 IdentifierName "compact" = () => T[]
Line 131 col 19 IdentifierName "T" = T
Line 132 col 0 IdentifierName "flatten" = <U>(shallow?: boolean) => U[]
Line 132 col 16 IdentifierName "U" = U
Line 132 col 19 IdentifierName "shallow" = boolean
Line 132 col 39 IdentifierName "U" = U
Line 133 col 0 IdentifierName "without" = (...values: T[]) => T[]
Line 133 col 19 IdentifierName "values" = T[]
Line 133 col 27 IdentifierName "T" = T
Line 133 col 33 IdentifierName "T" = T
Line 134 col 0 IdentifierName "union" = (...arrays: T[][]) => T[]
Line 134 col 17 IdentifierName "arrays" = T[][]
Line 134 col 25 IdentifierName "T" = T
Line 134 col 33 IdentifierName "T" = T
Line 135 col 0 IdentifierName "intersection" = (...arrays: T[][]) => T[]
Line 135 col 24 IdentifierName "arrays" = T[][]
Line 135 col 32 IdentifierName "T" = T
Line 135 col 40 IdentifierName "T" = T
Line 136 col 0 IdentifierName "difference" = (...others: T[][]) => T[]
Line 136 col 22 IdentifierName "others" = T[][]
Line 136 col 30 IdentifierName "T" = T
Line 136 col 38 IdentifierName "T" = T
Line 137 col 0 IdentifierName "uniq" = { (isSorted?: boolean): T[]; <U>(isSorted: boolean, iterator: Iterator<T, U>, context?: any): U[]; }
Line 137 col 13 IdentifierName "isSorted" = boolean
Line 137 col 34 IdentifierName "T" = T
Line 138 col 0 IdentifierName "uniq" = { (isSorted?: boolean): T[]; <U>(isSorted: boolean, iterator: Iterator<T, U>, context?: any): U[]; }
Line 138 col 13 IdentifierName "U" = U
Line 138 col 16 IdentifierName "isSorted" = boolean
Line 138 col 35 IdentifierName "iterator" = Iterator<T, U>
Line 138 col 45 IdentifierName "Iterator" = Iterator<T, U>
Line 138 col 54 IdentifierName "T" = T
Line 138 col 57 IdentifierName "U" = U
Line 138 col 61 IdentifierName "context" = any
Line 138 col 77 IdentifierName "U" = U
Line 139 col 0 IdentifierName "unique" = { (isSorted?: boolean): T[]; <U>(isSorted: boolean, iterator: Iterator<T, U>, context?: any): U[]; }
Line 139 col 15 IdentifierName "isSorted" = boolean
Line 139 col 36 IdentifierName "T" = T
Line 140 col 0 IdentifierName "unique" = { (isSorted?: boolean): T[]; <U>(isSorted: boolean, iterator: Iterator<T, U>, context?: any): U[]; }
Line 140 col 15 IdentifierName "U" = U
Line 140 col 18 IdentifierName "isSorted" = boolean
Line 140 col 37 IdentifierName "iterator" = Iterator<T, U>
Line 140 col 47 IdentifierName "Iterator" = Iterator<T, U>
Line 140 col 56 IdentifierName "T" = T
Line 140 col 59 IdentifierName "U" = U
Line 140 col 63 IdentifierName "context" = any
Line 140 col 79 IdentifierName "U" = U
Line 141 col 0 IdentifierName "zip" = (...arrays: any[][]) => any[][]
Line 141 col 15 IdentifierName "arrays" = any[][]
Line 142 col 0 IdentifierName "object" = { (): any; (values: any[]): any; }
Line 143 col 0 IdentifierName "object" = { (): any; (values: any[]): any; }
Line 143 col 15 IdentifierName "values" = any[]
Line 144 col 0 IdentifierName "indexOf" = (value: T, isSorted?: boolean) => number
Line 144 col 16 IdentifierName "value" = T
Line 144 col 23 IdentifierName "T" = T
Line 144 col 26 IdentifierName "isSorted" = boolean
Line 145 col 0 IdentifierName "lastIndexOf" = (value: T, fromIndex?: number) => number
Line 145 col 20 IdentifierName "value" = T
Line 145 col 27 IdentifierName "T" = T
Line 145 col 30 IdentifierName "fromIndex" = number
Line 146 col 0 IdentifierName "sortedIndex" = { (obj: T, propertyName: string): number; (obj: T, iterator?: Iterator<T, any>, context?: any): number; }
Line 146 col 20 IdentifierName "obj" = T
Line 146 col 25 IdentifierName "T" = T
Line 146 col 28 IdentifierName "propertyName" = string
Line 147 col 0 IdentifierName "sortedIndex" = { (obj: T, propertyName: string): number; (obj: T, iterator?: Iterator<T, any>, context?: any): number; }
Line 147 col 20 IdentifierName "obj" = T
Line 147 col 25 IdentifierName "T" = T
Line 147 col 28 IdentifierName "iterator" = Iterator<T, any>
Line 147 col 39 IdentifierName "Iterator" = Iterator<T, U>
Line 147 col 48 IdentifierName "T" = T
Line 147 col 57 IdentifierName "context" = any
Line 148 col 0 IdentifierName "// Methods from Array
        concat" = (...items: T[]) => T[]
Line 149 col 18 IdentifierName "items" = T[]
Line 149 col 25 IdentifierName "T" = T
Line 149 col 31 IdentifierName "T" = T
Line 150 col 0 IdentifierName "join" = (separator?: string) => string
Line 150 col 13 IdentifierName "separator" = string
Line 151 col 0 IdentifierName "pop" = () => T
Line 151 col 15 IdentifierName "T" = T
Line 152 col 0 IdentifierName "push" = (...items: T[]) => number
Line 152 col 16 IdentifierName "items" = T[]
Line 152 col 23 IdentifierName "T" = T
Line 153 col 0 IdentifierName "reverse" = () => T[]
Line 153 col 19 IdentifierName "T" = T
Line 154 col 0 IdentifierName "shift" = () => T
Line 154 col 17 IdentifierName "T" = T
Line 155 col 0 IdentifierName "slice" = (start: number, end?: number) => T[]
Line 155 col 14 IdentifierName "start" = number
Line 155 col 29 IdentifierName "end" = number
Line 155 col 44 IdentifierName "T" = T
Line 156 col 0 IdentifierName "sort" = (compareFn?: (a: T, b: T) => number) => T[]
Line 156 col 13 IdentifierName "compareFn" = (a: T, b: T) => number
Line 156 col 26 IdentifierName "a" = T
Line 156 col 29 IdentifierName "T" = T
Line 156 col 32 IdentifierName "b" = T
Line 156 col 35 IdentifierName "T" = T
Line 156 col 50 IdentifierName "T" = T
Line 157 col 0 IdentifierName "splice" = { (start: number): T[]; (start: number, deleteCount: number, ...items: T[]): T[]; }
Line 157 col 15 IdentifierName "start" = number
Line 157 col 31 IdentifierName "T" = T
Line 158 col 0 IdentifierName "splice" = { (start: number): T[]; (start: number, deleteCount: number, ...items: T[]): T[]; }
Line 158 col 15 IdentifierName "start" = number
Line 158 col 30 IdentifierName "deleteCount" = number
Line 158 col 54 IdentifierName "items" = T[]
Line 158 col 61 IdentifierName "T" = T
Line 158 col 67 IdentifierName "T" = T
Line 159 col 0 IdentifierName "unshift" = (...items: T[]) => number
Line 159 col 19 IdentifierName "items" = T[]
Line 159 col 26 IdentifierName "T" = T
Line 162 col 21 IdentifierName "WrappedDictionary" = WrappedDictionary<T>
Line 162 col 39 IdentifierName "T" = T
Line 162 col 50 IdentifierName "WrappedObject" = WrappedObject<T>
Line 162 col 64 IdentifierName "Dictionary" = Dictionary<T>
Line 162 col 75 IdentifierName "T" = T
Line 163 col 0 IdentifierName "each" = (iterator: Iterator<T, void>, context?: any) => void
Line 163 col 13 IdentifierName "iterator" = Iterator<T, void>
Line 163 col 23 IdentifierName "Iterator" = Iterator<T, U>
Line 163 col 32 IdentifierName "T" = T
Line 163 col 42 IdentifierName "context" = any
Line 164 col 0 IdentifierName "forEach" = (iterator: Iterator<T, void>, context?: any) => void
Line 164 col 16 IdentifierName "iterator" = Iterator<T, void>
Line 164 col 26 IdentifierName "Iterator" = Iterator<T, U>
Line 164 col 35 IdentifierName "T" = T
Line 164 col 45 IdentifierName "context" = any
Line 165 col 0 IdentifierName "map" = <U>(iterator: Iterator<T, U>, context?: any) => U[]
Line 165 col 12 IdentifierName "U" = U
Line 165 col 15 IdentifierName "iterator" = Iterator<T, U>
Line 165 col 25 IdentifierName "Iterator" = Iterator<T, U>
Line 165 col 34 IdentifierName "T" = T
Line 165 col 37 IdentifierName "U" = U
Line 165 col 41 IdentifierName "context" = any
Line 165 col 57 IdentifierName "U" = U
Line 166 col 0 IdentifierName "collect" = <U>(iterator: Iterator<T, U>, context?: any) => U[]
Line 166 col 16 IdentifierName "U" = U
Line 166 col 19 IdentifierName "iterator" = Iterator<T, U>
Line 166 col 29 IdentifierName "Iterator" = Iterator<T, U>
Line 166 col 38 IdentifierName "T" = T
Line 166 col 41 IdentifierName "U" = U
Line 166 col 45 IdentifierName "context" = any
Line 166 col 61 IdentifierName "U" = U
Line 167 col 0 IdentifierName "reduce" = { (iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
Line 167 col 15 IdentifierName "iterator" = Reducer<T, T>
Line 167 col 25 IdentifierName "Reducer" = Reducer<T, U>
Line 167 col 33 IdentifierName "T" = T
Line 167 col 36 IdentifierName "T" = T
Line 167 col 40 IdentifierName "initialValue" = T
Line 167 col 55 IdentifierName "T" = T
Line 167 col 58 IdentifierName "context" = any
Line 167 col 74 IdentifierName "T" = T
Line 168 col 0 IdentifierName "reduce" = { (iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
Line 168 col 15 IdentifierName "U" = U
Line 168 col 18 IdentifierName "iterator" = Reducer<T, U>
Line 168 col 28 IdentifierName "Reducer" = Reducer<T, U>
Line 168 col 36 IdentifierName "T" = T
Line 168 col 39 IdentifierName "U" = U
Line 168 col 43 IdentifierName "initialValue" = U
Line 168 col 57 IdentifierName "U" = U
Line 168 col 60 IdentifierName "context" = any
Line 168 col 76 IdentifierName "U" = U
Line 169 col 0 IdentifierName "foldl" = { (iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
Line 169 col 14 IdentifierName "iterator" = Reducer<T, T>
Line 169 col 24 IdentifierName "Reducer" = Reducer<T, U>
Line 169 col 32 IdentifierName "T" = T
Line 169 col 35 IdentifierName "T" = T
Line 169 col 39 IdentifierName "initialValue" = T
Line 169 col 54 IdentifierName "T" = T
Line 169 col 57 IdentifierName "context" = any
Line 169 col 73 IdentifierName "T" = T
Line 170 col 0 IdentifierName "foldl" = { (iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
Line 170 col 14 IdentifierName "U" = U
Line 170 col 17 IdentifierName "iterator" = Reducer<T, U>
Line 170 col 27 IdentifierName "Reducer" = Reducer<T, U>
Line 170 col 35 IdentifierName "T" = T
Line 170 col 38 IdentifierName "U" = U
Line 170 col 42 IdentifierName "initialValue" = U
Line 170 col 56 IdentifierName "U" = U
Line 170 col 59 IdentifierName "context" = any
Line 170 col 75 IdentifierName "U" = U
Line 171 col 0 IdentifierName "inject" = { (iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
Line 171 col 15 IdentifierName "iterator" = Reducer<T, T>
Line 171 col 25 IdentifierName "Reducer" = Reducer<T, U>
Line 171 col 33 IdentifierName "T" = T
Line 171 col 36 IdentifierName "T" = T
Line 171 col 40 IdentifierName "initialValue" = T
Line 171 col 55 IdentifierName "T" = T
Line 171 col 58 IdentifierName "context" = any
Line 171 col 74 IdentifierName "T" = T
Line 172 col 0 IdentifierName "inject" = { (iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
Line 172 col 15 IdentifierName "U" = U
Line 172 col 18 IdentifierName "iterator" = Reducer<T, U>
Line 172 col 28 IdentifierName "Reducer" = Reducer<T, U>
Line 172 col 36 IdentifierName "T" = T
Line 172 col 39 IdentifierName "U" = U
Line 172 col 43 IdentifierName "initialValue" = U
Line 172 col 57 IdentifierName "U" = U
Line 172 col 60 IdentifierName "context" = any
Line 172 col 76 IdentifierName "U" = U
Line 173 col 0 IdentifierName "reduceRight" = { (iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
Line 173 col 20 IdentifierName "iterator" = Reducer<T, T>
Line 173 col 30 IdentifierName "Reducer" = Reducer<T, U>
Line 173 col 38 IdentifierName "T" = T
Line 173 col 41 IdentifierName "T" = T
Line 173 col 45 IdentifierName "initialValue" = T
Line 173 col 60 IdentifierName "T" = T
Line 173 col 63 IdentifierName "context" = any
Line 173 col 79 IdentifierName "T" = T
Line 174 col 0 IdentifierName "reduceRight" = { (iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
Line 174 col 20 IdentifierName "U" = U
Line 174 col 23 IdentifierName "iterator" = Reducer<T, U>
Line 174 col 33 IdentifierName "Reducer" = Reducer<T, U>
Line 174 col 41 IdentifierName "T" = T
Line 174 col 44 IdentifierName "U" = U
Line 174 col 48 IdentifierName "initialValue" = U
Line 174 col 62 IdentifierName "U" = U
Line 174 col 65 IdentifierName "context" = any
Line 174 col 81 IdentifierName "U" = U
Line 175 col 0 IdentifierName "foldr" = { (iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
Line 175 col 14 IdentifierName "iterator" = Reducer<T, T>
Line 175 col 24 IdentifierName "Reducer" = Reducer<T, U>
Line 175 col 32 IdentifierName "T" = T
Line 175 col 35 IdentifierName "T" = T
Line 175 col 39 IdentifierName "initialValue" = T
Line 175 col 54 IdentifierName "T" = T
Line 175 col 57 IdentifierName "context" = any
Line 175 col 73 IdentifierName "T" = T
Line 176 col 0 IdentifierName "foldr" = { (iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
Line 176 col 14 IdentifierName "U" = U
Line 176 col 17 IdentifierName "iterator" = Reducer<T, U>
Line 176 col 27 IdentifierName "Reducer" = Reducer<T, U>
Line 176 col 35 IdentifierName "T" = T
Line 176 col 38 IdentifierName "U" = U
Line 176 col 42 IdentifierName "initialValue" = U
Line 176 col 56 IdentifierName "U" = U
Line 176 col 59 IdentifierName "context" = any
Line 176 col 75 IdentifierName "U" = U
Line 177 col 0 IdentifierName "find" = (iterator: Iterator<T, boolean>, context?: any) => T
Line 177 col 13 IdentifierName "iterator" = Iterator<T, boolean>
Line 177 col 23 IdentifierName "Iterator" = Iterator<T, U>
Line 177 col 32 IdentifierName "T" = T
Line 177 col 45 IdentifierName "context" = any
Line 177 col 61 IdentifierName "T" = T
Line 178 col 0 IdentifierName "detect" = (iterator: Iterator<T, boolean>, context?: any) => T
Line 178 col 15 IdentifierName "iterator" = Iterator<T, boolean>
Line 178 col 25 IdentifierName "Iterator" = Iterator<T, U>
Line 178 col 34 IdentifierName "T" = T
Line 178 col 47 IdentifierName "context" = any
Line 178 col 63 IdentifierName "T" = T
Line 179 col 0 IdentifierName "filter" = (iterator: Iterator<T, boolean>, context?: any) => T[]
Line 179 col 15 IdentifierName "iterator" = Iterator<T, boolean>
Line 179 col 25 IdentifierName "Iterator" = Iterator<T, U>
Line 179 col 34 IdentifierName "T" = T
Line 179 col 47 IdentifierName "context" = any
Line 179 col 63 IdentifierName "T" = T
Line 180 col 0 IdentifierName "select" = (iterator: Iterator<T, boolean>, context?: any) => T[]
Line 180 col 15 IdentifierName "iterator" = Iterator<T, boolean>
Line 180 col 25 IdentifierName "Iterator" = Iterator<T, U>
Line 180 col 34 IdentifierName "T" = T
Line 180 col 47 IdentifierName "context" = any
Line 180 col 63 IdentifierName "T" = T
Line 181 col 0 IdentifierName "where" = (properties: Object) => T[]
Line 181 col 14 IdentifierName "properties" = Object
Line 181 col 26 IdentifierName "Object" = Object
Line 181 col 35 IdentifierName "T" = T
Line 182 col 0 IdentifierName "findWhere" = (properties: Object) => T
Line 182 col 18 IdentifierName "properties" = Object
Line 182 col 30 IdentifierName "Object" = Object
Line 182 col 39 IdentifierName "T" = T
Line 183 col 0 IdentifierName "reject" = (iterator: Iterator<T, boolean>, context?: any) => T[]
Line 183 col 15 IdentifierName "iterator" = Iterator<T, boolean>
Line 183 col 25 IdentifierName "Iterator" = Iterator<T, U>
Line 183 col 34 IdentifierName "T" = T
Line 183 col 47 IdentifierName "context" = any
Line 183 col 63 IdentifierName "T" = T
Line 184 col 0 IdentifierName "every" = (iterator?: Iterator<T, boolean>, context?: any) => boolean
Line 184 col 14 IdentifierName "iterator" = Iterator<T, boolean>
Line 184 col 25 IdentifierName "Iterator" = Iterator<T, U>
Line 184 col 34 IdentifierName "T" = T
Line 184 col 47 IdentifierName "context" = any
Line 185 col 0 IdentifierName "all" = (iterator?: Iterator<T, boolean>, context?: any) => boolean
Line 185 col 12 IdentifierName "iterator" = Iterator<T, boolean>
Line 185 col 23 IdentifierName "Iterator" = Iterator<T, U>
Line 185 col 32 IdentifierName "T" = T
Line 185 col 45 IdentifierName "context" = any
Line 186 col 0 IdentifierName "some" = (iterator?: Iterator<T, boolean>, context?: any) => boolean
Line 186 col 13 IdentifierName "iterator" = Iterator<T, boolean>
Line 186 col 24 IdentifierName "Iterator" = Iterator<T, U>
Line 186 col 33 IdentifierName "T" = T
Line 186 col 46 IdentifierName "context" = any
Line 187 col 0 IdentifierName "any" = (iterator?: Iterator<T, boolean>, context?: any) => boolean
Line 187 col 12 IdentifierName "iterator" = Iterator<T, boolean>
Line 187 col 23 IdentifierName "Iterator" = Iterator<T, U>
Line 187 col 32 IdentifierName "T" = T
Line 187 col 45 IdentifierName "context" = any
Line 188 col 0 IdentifierName "contains" = (value: T) => boolean
Line 188 col 17 IdentifierName "value" = T
Line 188 col 24 IdentifierName "T" = T
Line 189 col 0 IdentifierName "include" = (value: T) => boolean
Line 189 col 16 IdentifierName "value" = T
Line 189 col 23 IdentifierName "T" = T
Line 190 col 0 IdentifierName "invoke" = (methodName: string, ...args: any[]) => any[]
Line 190 col 15 IdentifierName "methodName" = string
Line 190 col 38 IdentifierName "args" = any[]
Line 191 col 0 IdentifierName "pluck" = (propertyName: string) => any[]
Line 191 col 14 IdentifierName "propertyName" = string
Line 192 col 0 IdentifierName "max" = (iterator?: Iterator<T, any>, context?: any) => T
Line 192 col 12 IdentifierName "iterator" = Iterator<T, any>
Line 192 col 23 IdentifierName "Iterator" = Iterator<T, U>
Line 192 col 32 IdentifierName "T" = T
Line 192 col 41 IdentifierName "context" = any
Line 192 col 57 IdentifierName "T" = T
Line 193 col 0 IdentifierName "min" = (iterator?: Iterator<T, any>, context?: any) => T
Line 193 col 12 IdentifierName "iterator" = Iterator<T, any>
Line 193 col 23 IdentifierName "Iterator" = Iterator<T, U>
Line 193 col 32 IdentifierName "T" = T
Line 193 col 41 IdentifierName "context" = any
Line 193 col 57 IdentifierName "T" = T
Line 194 col 0 IdentifierName "sortBy" = { (iterator: Iterator<T, any>, context?: any): T[]; (propertyName: string): T[]; }
Line 194 col 15 IdentifierName "iterator" = Iterator<T, any>
Line 194 col 25 IdentifierName "Iterator" = Iterator<T, U>
Line 194 col 34 IdentifierName "T" = T
Line 194 col 43 IdentifierName "context" = any
Line 194 col 59 IdentifierName "T" = T
Line 195 col 0 IdentifierName "sortBy" = { (iterator: Iterator<T, any>, context?: any): T[]; (propertyName: string): T[]; }
Line 195 col 15 IdentifierName "propertyName" = string
Line 195 col 38 IdentifierName "T" = T
Line 196 col 0 IdentifierName "groupBy" = { (iterator?: Iterator<T, any>, context?: any): Dictionary<T[]>; (propertyName: string): Dictionary<T[]>; }
Line 196 col 16 IdentifierName "iterator" = Iterator<T, any>
Line 196 col 27 IdentifierName "Iterator" = Iterator<T, U>
Line 196 col 36 IdentifierName "T" = T
Line 196 col 45 IdentifierName "context" = any
Line 196 col 61 IdentifierName "Dictionary" = Dictionary<T>
Line 196 col 72 IdentifierName "T" = T
Line 197 col 0 IdentifierName "groupBy" = { (iterator?: Iterator<T, any>, context?: any): Dictionary<T[]>; (propertyName: string): Dictionary<T[]>; }
Line 197 col 16 IdentifierName "propertyName" = string
Line 197 col 39 IdentifierName "Dictionary" = Dictionary<T>
Line 197 col 50 IdentifierName "T" = T
Line 198 col 0 IdentifierName "countBy" = { (iterator?: Iterator<T, any>, context?: any): Dictionary<number>; (propertyName: string): Dictionary<number>; }
Line 198 col 16 IdentifierName "iterator" = Iterator<T, any>
Line 198 col 27 IdentifierName "Iterator" = Iterator<T, U>
Line 198 col 36 IdentifierName "T" = T
Line 198 col 45 IdentifierName "context" = any
Line 198 col 61 IdentifierName "Dictionary" = Dictionary<T>
Line 199 col 0 IdentifierName "countBy" = { (iterator?: Iterator<T, any>, context?: any): Dictionary<number>; (propertyName: string): Dictionary<number>; }
Line 199 col 16 IdentifierName "propertyName" = string
Line 199 col 39 IdentifierName "Dictionary" = Dictionary<T>
Line 200 col 0 IdentifierName "shuffle" = () => T[]
Line 200 col 19 IdentifierName "T" = T
Line 201 col 0 IdentifierName "toArray" = () => T[]
Line 201 col 19 IdentifierName "T" = T
Line 202 col 0 IdentifierName "size" = () => number
Line 205 col 21 IdentifierName "ChainedObject" = ChainedObject<T>
Line 205 col 35 IdentifierName "T" = T
Line 206 col 0 IdentifierName "keys" = () => ChainedArray<string>
Line 206 col 16 IdentifierName "ChainedArray" = ChainedArray<T>
Line 207 col 0 IdentifierName "values" = () => ChainedArray<any>
Line 207 col 18 IdentifierName "ChainedArray" = ChainedArray<T>
Line 208 col 0 IdentifierName "pairs" = () => ChainedArray<any[]>
Line 208 col 17 IdentifierName "ChainedArray" = ChainedArray<T>
Line 209 col 0 IdentifierName "invert" = () => ChainedObject<any>
Line 209 col 18 IdentifierName "ChainedObject" = ChainedObject<T>
Line 210 col 0 IdentifierName "functions" = () => ChainedArray<string>
Line 210 col 21 IdentifierName "ChainedArray" = ChainedArray<T>
Line 211 col 0 IdentifierName "methods" = () => ChainedArray<string>
Line 211 col 19 IdentifierName "ChainedArray" = ChainedArray<T>
Line 212 col 0 IdentifierName "extend" = (...sources: any[]) => ChainedObject<T>
Line 212 col 18 IdentifierName "sources" = any[]
Line 212 col 35 IdentifierName "ChainedObject" = ChainedObject<T>
Line 212 col 49 IdentifierName "T" = T
Line 213 col 0 IdentifierName "pick" = (...keys: string[]) => ChainedObject<T>
Line 213 col 16 IdentifierName "keys" = string[]
Line 213 col 33 IdentifierName "ChainedObject" = ChainedObject<T>
Line 213 col 47 IdentifierName "T" = T
Line 214 col 0 IdentifierName "omit" = (...keys: string[]) => ChainedObject<T>
Line 214 col 16 IdentifierName "keys" = string[]
Line 214 col 33 IdentifierName "ChainedObject" = ChainedObject<T>
Line 214 col 47 IdentifierName "T" = T
Line 215 col 0 IdentifierName "defaults" = (...defaults: any[]) => ChainedObject<T>
Line 215 col 20 IdentifierName "defaults" = any[]
Line 215 col 38 IdentifierName "ChainedObject" = ChainedObject<T>
Line 215 col 52 IdentifierName "T" = T
Line 216 col 0 IdentifierName "clone" = () => ChainedObject<T>
Line 216 col 17 IdentifierName "ChainedObject" = ChainedObject<T>
Line 216 col 31 IdentifierName "T" = T
Line 217 col 0 IdentifierName "tap" = (interceptor: (object: T) => void) => ChainedObject<T>
Line 217 col 12 IdentifierName "interceptor" = (object: T) => void
Line 217 col 26 IdentifierName "object" = T
Line 217 col 34 IdentifierName "T" = T
Line 217 col 47 IdentifierName "ChainedObject" = ChainedObject<T>
Line 217 col 61 IdentifierName "T" = T
Line 218 col 0 IdentifierName "has" = (key: string) => ChainedObject<boolean>
Line 218 col 12 IdentifierName "key" = string
Line 218 col 26 IdentifierName "ChainedObject" = ChainedObject<T>
Line 219 col 0 IdentifierName "isEqual" = (other: T) => ChainedObject<boolean>
Line 219 col 16 IdentifierName "other" = T
Line 219 col 23 IdentifierName "T" = T
Line 219 col 27 IdentifierName "ChainedObject" = ChainedObject<T>
Line 220 col 0 IdentifierName "isEmpty" = () => ChainedObject<boolean>
Line 220 col 19 IdentifierName "ChainedObject" = ChainedObject<T>
Line 221 col 0 IdentifierName "isElement" = () => ChainedObject<boolean>
Line 221 col 21 IdentifierName "ChainedObject" = ChainedObject<T>
Line 222 col 0 IdentifierName "isArray" = () => ChainedObject<boolean>
Line 222 col 19 IdentifierName "ChainedObject" = ChainedObject<T>
Line 223 col 0 IdentifierName "isObject" = () => ChainedObject<boolean>
Line 223 col 20 IdentifierName "ChainedObject" = ChainedObject<T>
Line 224 col 0 IdentifierName "isArguments" = () => ChainedObject<boolean>
Line 224 col 23 IdentifierName "ChainedObject" = ChainedObject<T>
Line 225 col 0 IdentifierName "isFunction" = () => ChainedObject<boolean>
Line 225 col 22 IdentifierName "ChainedObject" = ChainedObject<T>
Line 226 col 0 IdentifierName "isString" = () => ChainedObject<boolean>
Line 226 col 20 IdentifierName "ChainedObject" = ChainedObject<T>
Line 227 col 0 IdentifierName "isNumber" = () => ChainedObject<boolean>
Line 227 col 20 IdentifierName "ChainedObject" = ChainedObject<T>
Line 228 col 0 IdentifierName "isFinite" = () => ChainedObject<boolean>
Line 228 col 20 IdentifierName "ChainedObject" = ChainedObject<T>
Line 229 col 0 IdentifierName "isBoolean" = () => ChainedObject<boolean>
Line 229 col 21 IdentifierName "ChainedObject" = ChainedObject<T>
Line 230 col 0 IdentifierName "isDate" = () => ChainedObject<boolean>
Line 230 col 18 IdentifierName "ChainedObject" = ChainedObject<T>
Line 231 col 0 IdentifierName "isRegExp" = () => ChainedObject<boolean>
Line 231 col 20 IdentifierName "ChainedObject" = ChainedObject<T>
Line 232 col 0 IdentifierName "isNaN" = () => ChainedObject<boolean>
Line 232 col 17 IdentifierName "ChainedObject" = ChainedObject<T>
Line 233 col 0 IdentifierName "isNull" = () => ChainedObject<boolean>
Line 233 col 18 IdentifierName "ChainedObject" = ChainedObject<T>
Line 234 col 0 IdentifierName "isUndefined" = () => ChainedObject<boolean>
Line 234 col 23 IdentifierName "ChainedObject" = ChainedObject<T>
Line 235 col 0 IdentifierName "value" = () => T
Line 235 col 17 IdentifierName "T" = T
Line 238 col 21 IdentifierName "ChainedArray" = ChainedArray<T>
Line 238 col 34 IdentifierName "T" = T
Line 238 col 45 IdentifierName "ChainedObject" = ChainedObject<T>
Line 238 col 59 IdentifierName "Array" = Array<T>
Line 238 col 65 IdentifierName "T" = T
Line 239 col 0 IdentifierName "each" = (iterator: Iterator<T, void>, context?: any) => ChainedObject<void>
Line 239 col 13 IdentifierName "iterator" = Iterator<T, void>
Line 239 col 23 IdentifierName "Iterator" = Iterator<T, U>
Line 239 col 32 IdentifierName "T" = T
Line 239 col 42 IdentifierName "context" = any
Line 239 col 58 IdentifierName "ChainedObject" = ChainedObject<T>
Line 240 col 0 IdentifierName "forEach" = (iterator: Iterator<T, void>, context?: any) => ChainedObject<void>
Line 240 col 16 IdentifierName "iterator" = Iterator<T, void>
Line 240 col 26 IdentifierName "Iterator" = Iterator<T, U>
Line 240 col 35 IdentifierName "T" = T
Line 240 col 45 IdentifierName "context" = any
Line 240 col 61 IdentifierName "ChainedObject" = ChainedObject<T>
Line 241 col 0 IdentifierName "map" = <U>(iterator: Iterator<T, U>, context?: any) => ChainedArray<U>
Line 241 col 12 IdentifierName "U" = U
Line 241 col 15 IdentifierName "iterator" = Iterator<T, U>
Line 241 col 25 IdentifierName "Iterator" = Iterator<T, U>
Line 241 col 34 IdentifierName "T" = T
Line 241 col 37 IdentifierName "U" = U
Line 241 col 41 IdentifierName "context" = any
Line 241 col 57 IdentifierName "ChainedArray" = ChainedArray<T>
Line 241 col 70 IdentifierName "U" = U
Line 242 col 0 IdentifierName "collect" = <U>(iterator: Iterator<T, U>, context?: any) => ChainedArray<U>
Line 242 col 16 IdentifierName "U" = U
Line 242 col 19 IdentifierName "iterator" = Iterator<T, U>
Line 242 col 29 IdentifierName "Iterator" = Iterator<T, U>
Line 242 col 38 IdentifierName "T" = T
Line 242 col 41 IdentifierName "U" = U
Line 242 col 45 IdentifierName "context" = any
Line 242 col 61 IdentifierName "ChainedArray" = ChainedArray<T>
Line 242 col 74 IdentifierName "U" = U
Line 243 col 0 IdentifierName "reduce" = { (iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>; }
Line 243 col 15 IdentifierName "iterator" = Reducer<T, T>
Line 243 col 25 IdentifierName "Reducer" = Reducer<T, U>
Line 243 col 33 IdentifierName "T" = T
Line 243 col 36 IdentifierName "T" = T
Line 243 col 40 IdentifierName "initialValue" = T
Line 243 col 55 IdentifierName "T" = T
Line 243 col 58 IdentifierName "context" = any
Line 243 col 74 IdentifierName "ChainedObject" = ChainedObject<T>
Line 243 col 88 IdentifierName "T" = T
Line 244 col 0 IdentifierName "reduce" = { (iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>; }
Line 244 col 15 IdentifierName "U" = U
Line 244 col 18 IdentifierName "iterator" = Reducer<T, U>
Line 244 col 28 IdentifierName "Reducer" = Reducer<T, U>
Line 244 col 36 IdentifierName "T" = T
Line 244 col 39 IdentifierName "U" = U
Line 244 col 43 IdentifierName "initialValue" = U
Line 244 col 57 IdentifierName "U" = U
Line 244 col 60 IdentifierName "context" = any
Line 244 col 76 IdentifierName "ChainedObject" = ChainedObject<T>
Line 244 col 90 IdentifierName "U" = U
Line 245 col 0 IdentifierName "foldl" = { (iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>; }
Line 245 col 14 IdentifierName "iterator" = Reducer<T, T>
Line 245 col 24 IdentifierName "Reducer" = Reducer<T, U>
Line 245 col 32 IdentifierName "T" = T
Line 245 col 35 IdentifierName "T" = T
Line 245 col 39 IdentifierName "initialValue" = T
Line 245 col 54 IdentifierName "T" = T
Line 245 col 57 IdentifierName "context" = any
Line 245 col 73 IdentifierName "ChainedObject" = ChainedObject<T>
Line 245 col 87 IdentifierName "T" = T
Line 246 col 0 IdentifierName "foldl" = { (iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>; }
Line 246 col 14 IdentifierName "U" = U
Line 246 col 17 IdentifierName "iterator" = Reducer<T, U>
Line 246 col 27 IdentifierName "Reducer" = Reducer<T, U>
Line 246 col 35 IdentifierName "T" = T
Line 246 col 38 IdentifierName "U" = U
Line 246 col 42 IdentifierName "initialValue" = U
Line 246 col 56 IdentifierName "U" = U
Line 246 col 59 IdentifierName "context" = any
Line 246 col 75 IdentifierName "ChainedObject" = ChainedObject<T>
Line 246 col 89 IdentifierName "U" = U
Line 247 col 0 IdentifierName "inject" = { (iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>; }
Line 247 col 15 IdentifierName "iterator" = Reducer<T, T>
Line 247 col 25 IdentifierName "Reducer" = Reducer<T, U>
Line 247 col 33 IdentifierName "T" = T
Line 247 col 36 IdentifierName "T" = T
Line 247 col 40 IdentifierName "initialValue" = T
Line 247 col 55 IdentifierName "T" = T
Line 247 col 58 IdentifierName "context" = any
Line 247 col 74 IdentifierName "ChainedObject" = ChainedObject<T>
Line 247 col 88 IdentifierName "T" = T
Line 248 col 0 IdentifierName "inject" = { (iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>; }
Line 248 col 15 IdentifierName "U" = U
Line 248 col 18 IdentifierName "iterator" = Reducer<T, U>
Line 248 col 28 IdentifierName "Reducer" = Reducer<T, U>
Line 248 col 36 IdentifierName "T" = T
Line 248 col 39 IdentifierName "U" = U
Line 248 col 43 IdentifierName "initialValue" = U
Line 248 col 57 IdentifierName "U" = U
Line 248 col 60 IdentifierName "context" = any
Line 248 col 76 IdentifierName "ChainedObject" = ChainedObject<T>
Line 248 col 90 IdentifierName "U" = U
Line 249 col 0 IdentifierName "reduceRight" = { (iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>; }
Line 249 col 20 IdentifierName "iterator" = Reducer<T, T>
Line 249 col 30 IdentifierName "Reducer" = Reducer<T, U>
Line 249 col 38 IdentifierName "T" = T
Line 249 col 41 IdentifierName "T" = T
Line 249 col 45 IdentifierName "initialValue" = T
Line 249 col 60 IdentifierName "T" = T
Line 249 col 63 IdentifierName "context" = any
Line 249 col 79 IdentifierName "ChainedObject" = ChainedObject<T>
Line 249 col 93 IdentifierName "T" = T
Line 250 col 0 IdentifierName "reduceRight" = { (iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>; }
Line 250 col 20 IdentifierName "U" = U
Line 250 col 23 IdentifierName "iterator" = Reducer<T, U>
Line 250 col 33 IdentifierName "Reducer" = Reducer<T, U>
Line 250 col 41 IdentifierName "T" = T
Line 250 col 44 IdentifierName "U" = U
Line 250 col 48 IdentifierName "initialValue" = U
Line 250 col 62 IdentifierName "U" = U
Line 250 col 65 IdentifierName "context" = any
Line 250 col 81 IdentifierName "ChainedObject" = ChainedObject<T>
Line 250 col 95 IdentifierName "U" = U
Line 251 col 0 IdentifierName "foldr" = { (iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>; }
Line 251 col 14 IdentifierName "iterator" = Reducer<T, T>
Line 251 col 24 IdentifierName "Reducer" = Reducer<T, U>
Line 251 col 32 IdentifierName "T" = T
Line 251 col 35 IdentifierName "T" = T
Line 251 col 39 IdentifierName "initialValue" = T
Line 251 col 54 IdentifierName "T" = T
Line 251 col 57 IdentifierName "context" = any
Line 251 col 73 IdentifierName "ChainedObject" = ChainedObject<T>
Line 251 col 87 IdentifierName "T" = T
Line 252 col 0 IdentifierName "foldr" = { (iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>; }
Line 252 col 14 IdentifierName "U" = U
Line 252 col 17 IdentifierName "iterator" = Reducer<T, U>
Line 252 col 27 IdentifierName "Reducer" = Reducer<T, U>
Line 252 col 35 IdentifierName "T" = T
Line 252 col 38 IdentifierName "U" = U
Line 252 col 42 IdentifierName "initialValue" = U
Line 252 col 56 IdentifierName "U" = U
Line 252 col 59 IdentifierName "context" = any
Line 252 col 75 IdentifierName "ChainedObject" = ChainedObject<T>
Line 252 col 89 IdentifierName "U" = U
Line 253 col 0 IdentifierName "find" = (iterator: Iterator<T, boolean>, context?: any) => ChainedObject<T>
Line 253 col 13 IdentifierName "iterator" = Iterator<T, boolean>
Line 253 col 23 IdentifierName "Iterator" = Iterator<T, U>
Line 253 col 32 IdentifierName "T" = T
Line 253 col 45 IdentifierName "context" = any
Line 253 col 61 IdentifierName "ChainedObject" = ChainedObject<T>
Line 253 col 75 IdentifierName "T" = T
Line 254 col 0 IdentifierName "detect" = (iterator: Iterator<T, boolean>, context?: any) => ChainedObject<T>
Line 254 col 15 IdentifierName "iterator" = Iterator<T, boolean>
Line 254 col 25 IdentifierName "Iterator" = Iterator<T, U>
Line 254 col 34 IdentifierName "T" = T
Line 254 col 47 IdentifierName "context" = any
Line 254 col 63 IdentifierName "ChainedObject" = ChainedObject<T>
Line 254 col 77 IdentifierName "T" = T
Line 255 col 0 IdentifierName "filter" = (iterator: Iterator<T, boolean>, context?: any) => ChainedArray<T>
Line 255 col 15 IdentifierName "iterator" = Iterator<T, boolean>
Line 255 col 25 IdentifierName "Iterator" = Iterator<T, U>
Line 255 col 34 IdentifierName "T" = T
Line 255 col 47 IdentifierName "context" = any
Line 255 col 63 IdentifierName "ChainedArray" = ChainedArray<T>
Line 255 col 76 IdentifierName "T" = T
Line 256 col 0 IdentifierName "select" = (iterator: Iterator<T, boolean>, context?: any) => ChainedArray<T>
Line 256 col 15 IdentifierName "iterator" = Iterator<T, boolean>
Line 256 col 25 IdentifierName "Iterator" = Iterator<T, U>
Line 256 col 34 IdentifierName "T" = T
Line 256 col 47 IdentifierName "context" = any
Line 256 col 63 IdentifierName "ChainedArray" = ChainedArray<T>
Line 256 col 76 IdentifierName "T" = T
Line 257 col 0 IdentifierName "where" = (properties: Object) => ChainedArray<T>
Line 257 col 14 IdentifierName "properties" = Object
Line 257 col 26 IdentifierName "Object" = Object
Line 257 col 35 IdentifierName "ChainedArray" = ChainedArray<T>
Line 257 col 48 IdentifierName "T" = T
Line 258 col 0 IdentifierName "findWhere" = (properties: Object) => ChainedObject<T>
Line 258 col 18 IdentifierName "properties" = Object
Line 258 col 30 IdentifierName "Object" = Object
Line 258 col 39 IdentifierName "ChainedObject" = ChainedObject<T>
Line 258 col 53 IdentifierName "T" = T
Line 259 col 0 IdentifierName "reject" = (iterator: Iterator<T, boolean>, context?: any) => ChainedArray<T>
Line 259 col 15 IdentifierName "iterator" = Iterator<T, boolean>
Line 259 col 25 IdentifierName "Iterator" = Iterator<T, U>
Line 259 col 34 IdentifierName "T" = T
Line 259 col 47 IdentifierName "context" = any
Line 259 col 63 IdentifierName "ChainedArray" = ChainedArray<T>
Line 259 col 76 IdentifierName "T" = T
Line 260 col 0 IdentifierName "every" = (iterator?: Iterator<T, boolean>, context?: any) => ChainedObject<boolean>
Line 260 col 14 IdentifierName "iterator" = Iterator<T, boolean>
Line 260 col 25 IdentifierName "Iterator" = Iterator<T, U>
Line 260 col 34 IdentifierName "T" = T
Line 260 col 47 IdentifierName "context" = any
Line 260 col 63 IdentifierName "ChainedObject" = ChainedObject<T>
Line 261 col 0 IdentifierName "all" = (iterator?: Iterator<T, boolean>, context?: any) => ChainedObject<boolean>
Line 261 col 12 IdentifierName "iterator" = Iterator<T, boolean>
Line 261 col 23 IdentifierName "Iterator" = Iterator<T, U>
Line 261 col 32 IdentifierName "T" = T
Line 261 col 45 IdentifierName "context" = any
Line 261 col 61 IdentifierName "ChainedObject" = ChainedObject<T>
Line 262 col 0 IdentifierName "some" = (iterator?: Iterator<T, boolean>, context?: any) => ChainedObject<boolean>
Line 262 col 13 IdentifierName "iterator" = Iterator<T, boolean>
Line 262 col 24 IdentifierName "Iterator" = Iterator<T, U>
Line 262 col 33 IdentifierName "T" = T
Line 262 col 46 IdentifierName "context" = any
Line 262 col 62 IdentifierName "ChainedObject" = ChainedObject<T>
Line 263 col 0 IdentifierName "any" = (iterator?: Iterator<T, boolean>, context?: any) => ChainedObject<boolean>
Line 263 col 12 IdentifierName "iterator" = Iterator<T, boolean>
Line 263 col 23 IdentifierName "Iterator" = Iterator<T, U>
Line 263 col 32 IdentifierName "T" = T
Line 263 col 45 IdentifierName "context" = any
Line 263 col 61 IdentifierName "ChainedObject" = ChainedObject<T>
Line 264 col 0 IdentifierName "contains" = (value: T) => ChainedObject<boolean>
Line 264 col 17 IdentifierName "value" = T
Line 264 col 24 IdentifierName "T" = T
Line 264 col 28 IdentifierName "ChainedObject" = ChainedObject<T>
Line 265 col 0 IdentifierName "include" = (value: T) => ChainedObject<boolean>
Line 265 col 16 IdentifierName "value" = T
Line 265 col 23 IdentifierName "T" = T
Line 265 col 27 IdentifierName "ChainedObject" = ChainedObject<T>
Line 266 col 0 IdentifierName "invoke" = (methodName: string, ...args: any[]) => ChainedArray<any>
Line 266 col 15 IdentifierName "methodName" = string
Line 266 col 38 IdentifierName "args" = any[]
Line 266 col 52 IdentifierName "ChainedArray" = ChainedArray<T>
Line 267 col 0 IdentifierName "pluck" = (propertyName: string) => ChainedArray<any>
Line 267 col 14 IdentifierName "propertyName" = string
Line 267 col 37 IdentifierName "ChainedArray" = ChainedArray<T>
Line 268 col 0 IdentifierName "max" = (iterator?: Iterator<T, any>, context?: any) => ChainedObject<T>
Line 268 col 12 IdentifierName "iterator" = Iterator<T, any>
Line 268 col 23 IdentifierName "Iterator" = Iterator<T, U>
Line 268 col 32 IdentifierName "T" = T
Line 268 col 41 IdentifierName "context" = any
Line 268 col 57 IdentifierName "ChainedObject" = ChainedObject<T>
Line 268 col 71 IdentifierName "T" = T
Line 269 col 0 IdentifierName "min" = (iterator?: Iterator<T, any>, context?: any) => ChainedObject<T>
Line 269 col 12 IdentifierName "iterator" = Iterator<T, any>
Line 269 col 23 IdentifierName "Iterator" = Iterator<T, U>
Line 269 col 32 IdentifierName "T" = T
Line 269 col 41 IdentifierName "context" = any
Line 269 col 57 IdentifierName "ChainedObject" = ChainedObject<T>
Line 269 col 71 IdentifierName "T" = T
Line 270 col 0 IdentifierName "sortBy" = { (iterator: Iterator<T, any>, context?: any): ChainedArray<T>; (propertyName: string): ChainedArray<T>; }
Line 270 col 15 IdentifierName "iterator" = Iterator<T, any>
Line 270 col 25 IdentifierName "Iterator" = Iterator<T, U>
Line 270 col 34 IdentifierName "T" = T
Line 270 col 43 IdentifierName "context" = any
Line 270 col 59 IdentifierName "ChainedArray" = ChainedArray<T>
Line 270 col 72 IdentifierName "T" = T
Line 271 col 0 IdentifierName "sortBy" = { (iterator: Iterator<T, any>, context?: any): ChainedArray<T>; (propertyName: string): ChainedArray<T>; }
Line 271 col 15 IdentifierName "propertyName" = string
Line 271 col 38 IdentifierName "ChainedArray" = ChainedArray<T>
Line 271 col 51 IdentifierName "T" = T
Line 272 col 0 IdentifierName "// Should return ChainedDictionary<T[]>, but expansive recursion not allowed
        groupBy" = { (iterator?: Iterator<T, any>, context?: any): ChainedDictionary<any[]>; (propertyName: string): ChainedDictionary<any[]>; }
Line 273 col 16 IdentifierName "iterator" = Iterator<T, any>
Line 273 col 27 IdentifierName "Iterator" = Iterator<T, U>
Line 273 col 36 IdentifierName "T" = T
Line 273 col 45 IdentifierName "context" = any
Line 273 col 61 IdentifierName "ChainedDictionary" = ChainedDictionary<T>
Line 274 col 0 IdentifierName "groupBy" = { (iterator?: Iterator<T, any>, context?: any): ChainedDictionary<any[]>; (propertyName: string): ChainedDictionary<any[]>; }
Line 274 col 16 IdentifierName "propertyName" = string
Line 274 col 39 IdentifierName "ChainedDictionary" = ChainedDictionary<T>
Line 275 col 0 IdentifierName "countBy" = { (iterator?: Iterator<T, any>, context?: any): ChainedDictionary<number>; (propertyName: string): ChainedDictionary<number>; }
Line 275 col 16 IdentifierName "iterator" = Iterator<T, any>
Line 275 col 27 IdentifierName "Iterator" = Iterator<T, U>
Line 275 col 36 IdentifierName "T" = T
Line 275 col 45 IdentifierName "context" = any
Line 275 col 61 IdentifierName "ChainedDictionary" = ChainedDictionary<T>
Line 276 col 0 IdentifierName "countBy" = { (iterator?: Iterator<T, any>, context?: any): ChainedDictionary<number>; (propertyName: string): ChainedDictionary<number>; }
Line 276 col 16 IdentifierName "propertyName" = string
Line 276 col 39 IdentifierName "ChainedDictionary" = ChainedDictionary<T>
Line 277 col 0 IdentifierName "shuffle" = () => ChainedArray<T>
Line 277 col 19 IdentifierName "ChainedArray" = ChainedArray<T>
Line 277 col 32 IdentifierName "T" = T
Line 278 col 0 IdentifierName "toArray" = () => ChainedArray<T>
Line 278 col 19 IdentifierName "ChainedArray" = ChainedArray<T>
Line 278 col 32 IdentifierName "T" = T
Line 279 col 0 IdentifierName "size" = () => ChainedObject<number>
Line 279 col 16 IdentifierName "ChainedObject" = ChainedObject<T>
Line 280 col 0 IdentifierName "first" = { (): ChainedObject<T>; (count: number): ChainedArray<T>; }
Line 280 col 17 IdentifierName "ChainedObject" = ChainedObject<T>
Line 280 col 31 IdentifierName "T" = T
Line 281 col 0 IdentifierName "first" = { (): ChainedObject<T>; (count: number): ChainedArray<T>; }
Line 281 col 14 IdentifierName "count" = number
Line 281 col 30 IdentifierName "ChainedArray" = ChainedArray<T>
Line 281 col 43 IdentifierName "T" = T
Line 282 col 0 IdentifierName "head" = { (): ChainedObject<T>; (count: number): ChainedArray<T>; }
Line 282 col 16 IdentifierName "ChainedObject" = ChainedObject<T>
Line 282 col 30 IdentifierName "T" = T
Line 283 col 0 IdentifierName "head" = { (): ChainedObject<T>; (count: number): ChainedArray<T>; }
Line 283 col 13 IdentifierName "count" = number
Line 283 col 29 IdentifierName "ChainedArray" = ChainedArray<T>
Line 283 col 42 IdentifierName "T" = T
Line 284 col 0 IdentifierName "take" = { (): ChainedObject<T>; (count: number): ChainedArray<T>; }
Line 284 col 16 IdentifierName "ChainedObject" = ChainedObject<T>
Line 284 col 30 IdentifierName "T" = T
Line 285 col 0 IdentifierName "take" = { (): ChainedObject<T>; (count: number): ChainedArray<T>; }
Line 285 col 13 IdentifierName "count" = number
Line 285 col 29 IdentifierName "ChainedArray" = ChainedArray<T>
Line 285 col 42 IdentifierName "T" = T
Line 286 col 0 IdentifierName "initial" = { (): ChainedObject<T>; (count: number): ChainedArray<T>; }
Line 286 col 19 IdentifierName "ChainedObject" = ChainedObject<T>
Line 286 col 33 IdentifierName "T" = T
Line 287 col 0 IdentifierName "initial" = { (): ChainedObject<T>; (count: number): ChainedArray<T>; }
Line 287 col 16 IdentifierName "count" = number
Line 287 col 32 IdentifierName "ChainedArray" = ChainedArray<T>
Line 287 col 45 IdentifierName "T" = T
Line 288 col 0 IdentifierName "last" = { (): ChainedObject<T>; (count: number): ChainedArray<T>; }
Line 288 col 16 IdentifierName "ChainedObject" = ChainedObject<T>
Line 288 col 30 IdentifierName "T" = T
Line 289 col 0 IdentifierName "last" = { (): ChainedObject<T>; (count: number): ChainedArray<T>; }
Line 289 col 13 IdentifierName "count" = number
Line 289 col 29 IdentifierName "ChainedArray" = ChainedArray<T>
Line 289 col 42 IdentifierName "T" = T
Line 290 col 0 IdentifierName "rest" = (index?: number) => ChainedArray<T>
Line 290 col 13 IdentifierName "index" = number
Line 290 col 30 IdentifierName "ChainedArray" = ChainedArray<T>
Line 290 col 43 IdentifierName "T" = T
Line 291 col 0 IdentifierName "compact" = () => ChainedArray<T>
Line 291 col 19 IdentifierName "ChainedArray" = ChainedArray<T>
Line 291 col 32 IdentifierName "T" = T
Line 292 col 0 IdentifierName "flatten" = <U>(shallow?: boolean) => ChainedArray<U>
Line 292 col 16 IdentifierName "U" = U
Line 292 col 19 IdentifierName "shallow" = boolean
Line 292 col 39 IdentifierName "ChainedArray" = ChainedArray<T>
Line 292 col 52 IdentifierName "U" = U
Line 293 col 0 IdentifierName "without" = (...values: T[]) => ChainedArray<T>
Line 293 col 19 IdentifierName "values" = T[]
Line 293 col 27 IdentifierName "T" = T
Line 293 col 33 IdentifierName "ChainedArray" = ChainedArray<T>
Line 293 col 46 IdentifierName "T" = T
Line 294 col 0 IdentifierName "union" = (...arrays: T[][]) => ChainedArray<T>
Line 294 col 17 IdentifierName "arrays" = T[][]
Line 294 col 25 IdentifierName "T" = T
Line 294 col 33 IdentifierName "ChainedArray" = ChainedArray<T>
Line 294 col 46 IdentifierName "T" = T
Line 295 col 0 IdentifierName "intersection" = (...arrays: T[][]) => ChainedArray<T>
Line 295 col 24 IdentifierName "arrays" = T[][]
Line 295 col 32 IdentifierName "T" = T
Line 295 col 40 IdentifierName "ChainedArray" = ChainedArray<T>
Line 295 col 53 IdentifierName "T" = T
Line 296 col 0 IdentifierName "difference" = (...others: T[][]) => ChainedArray<T>
Line 296 col 22 IdentifierName "others" = T[][]
Line 296 col 30 IdentifierName "T" = T
Line 296 col 38 IdentifierName "ChainedArray" = ChainedArray<T>
Line 296 col 51 IdentifierName "T" = T
Line 297 col 0 IdentifierName "uniq" = { (isSorted?: boolean): ChainedArray<T>; <U>(isSorted: boolean, iterator: Iterator<T, U>, context?: any): ChainedArray<U>; }
Line 297 col 13 IdentifierName "isSorted" = boolean
Line 297 col 34 IdentifierName "ChainedArray" = ChainedArray<T>
Line 297 col 47 IdentifierName "T" = T
Line 298 col 0 IdentifierName "uniq" = { (isSorted?: boolean): ChainedArray<T>; <U>(isSorted: boolean, iterator: Iterator<T, U>, context?: any): ChainedArray<U>; }
Line 298 col 13 IdentifierName "U" = U
Line 298 col 16 IdentifierName "isSorted" = boolean
Line 298 col 35 IdentifierName "iterator" = Iterator<T, U>
Line 298 col 45 IdentifierName "Iterator" = Iterator<T, U>
Line 298 col 54 IdentifierName "T" = T
Line 298 col 57 IdentifierName "U" = U
Line 298 col 61 IdentifierName "context" = any
Line 298 col 77 IdentifierName "ChainedArray" = ChainedArray<T>
Line 298 col 90 IdentifierName "U" = U
Line 299 col 0 IdentifierName "unique" = { (isSorted?: boolean): ChainedArray<T>; <U>(isSorted: boolean, iterator: Iterator<T, U>, context?: any): ChainedArray<U>; }
Line 299 col 15 IdentifierName "isSorted" = boolean
Line 299 col 36 IdentifierName "ChainedArray" = ChainedArray<T>
Line 299 col 49 IdentifierName "T" = T
Line 300 col 0 IdentifierName "unique" = { (isSorted?: boolean): ChainedArray<T>; <U>(isSorted: boolean, iterator: Iterator<T, U>, context?: any): ChainedArray<U>; }
Line 300 col 15 IdentifierName "U" = U
Line 300 col 18 IdentifierName "isSorted" = boolean
Line 300 col 37 IdentifierName "iterator" = Iterator<T, U>
Line 300 col 47 IdentifierName "Iterator" = Iterator<T, U>
Line 300 col 56 IdentifierName "T" = T
Line 300 col 59 IdentifierName "U" = U
Line 300 col 63 IdentifierName "context" = any
Line 300 col 79 IdentifierName "ChainedArray" = ChainedArray<T>
Line 300 col 92 IdentifierName "U" = U
Line 301 col 0 IdentifierName "zip" = (...arrays: any[][]) => ChainedArray<any[]>
Line 301 col 15 IdentifierName "arrays" = any[][]
Line 301 col 33 IdentifierName "ChainedArray" = ChainedArray<T>
Line 302 col 0 IdentifierName "object" = { (): ChainedObject<any>; (values: any[]): ChainedObject<any>; }
Line 302 col 18 IdentifierName "ChainedObject" = ChainedObject<T>
Line 303 col 0 IdentifierName "object" = { (): ChainedObject<any>; (values: any[]): ChainedObject<any>; }
Line 303 col 15 IdentifierName "values" = any[]
Line 303 col 31 IdentifierName "ChainedObject" = ChainedObject<T>
Line 304 col 0 IdentifierName "indexOf" = (value: T, isSorted?: boolean) => ChainedObject<number>
Line 304 col 16 IdentifierName "value" = T
Line 304 col 23 IdentifierName "T" = T
Line 304 col 26 IdentifierName "isSorted" = boolean
Line 304 col 47 IdentifierName "ChainedObject" = ChainedObject<T>
Line 305 col 0 IdentifierName "lastIndexOf" = (value: T, fromIndex?: number) => ChainedObject<number>
Line 305 col 20 IdentifierName "value" = T
Line 305 col 27 IdentifierName "T" = T
Line 305 col 30 IdentifierName "fromIndex" = number
Line 305 col 51 IdentifierName "ChainedObject" = ChainedObject<T>
Line 306 col 0 IdentifierName "sortedIndex" = { (obj: T, propertyName: string): ChainedObject<number>; (obj: T, iterator?: Iterator<T, any>, context?: any): ChainedObject<number>; }
Line 306 col 20 IdentifierName "obj" = T
Line 306 col 25 IdentifierName "T" = T
Line 306 col 28 IdentifierName "propertyName" = string
Line 306 col 51 IdentifierName "ChainedObject" = ChainedObject<T>
Line 307 col 0 IdentifierName "sortedIndex" = { (obj: T, propertyName: string): ChainedObject<number>; (obj: T, iterator?: Iterator<T, any>, context?: any): ChainedObject<number>; }
Line 307 col 20 IdentifierName "obj" = T
Line 307 col 25 IdentifierName "T" = T
Line 307 col 28 IdentifierName "iterator" = Iterator<T, any>
Line 307 col 39 IdentifierName "Iterator" = Iterator<T, U>
Line 307 col 48 IdentifierName "T" = T
Line 307 col 57 IdentifierName "context" = any
Line 307 col 73 IdentifierName "ChainedObject" = ChainedObject<T>
Line 308 col 0 IdentifierName "// Methods from Array
        concat" = (...items: T[]) => ChainedArray<T>
Line 309 col 18 IdentifierName "items" = T[]
Line 309 col 25 IdentifierName "T" = T
Line 309 col 31 IdentifierName "ChainedArray" = ChainedArray<T>
Line 309 col 44 IdentifierName "T" = T
Line 310 col 0 IdentifierName "join" = (separator?: string) => ChainedObject<string>
Line 310 col 13 IdentifierName "separator" = string
Line 310 col 34 IdentifierName "ChainedObject" = ChainedObject<T>
Line 311 col 0 IdentifierName "pop" = () => ChainedObject<T>
Line 311 col 15 IdentifierName "ChainedObject" = ChainedObject<T>
Line 311 col 29 IdentifierName "T" = T
Line 312 col 0 IdentifierName "push" = (...items: T[]) => ChainedObject<number>
Line 312 col 16 IdentifierName "items" = T[]
Line 312 col 23 IdentifierName "T" = T
Line 312 col 29 IdentifierName "ChainedObject" = ChainedObject<T>
Line 313 col 0 IdentifierName "reverse" = () => ChainedArray<T>
Line 313 col 19 IdentifierName "ChainedArray" = ChainedArray<T>
Line 313 col 32 IdentifierName "T" = T
Line 314 col 0 IdentifierName "shift" = () => ChainedObject<T>
Line 314 col 17 IdentifierName "ChainedObject" = ChainedObject<T>
Line 314 col 31 IdentifierName "T" = T
Line 315 col 0 IdentifierName "slice" = (start: number, end?: number) => ChainedArray<T>
Line 315 col 14 IdentifierName "start" = number
Line 315 col 29 IdentifierName "end" = number
Line 315 col 44 IdentifierName "ChainedArray" = ChainedArray<T>
Line 315 col 57 IdentifierName "T" = T
Line 316 col 0 IdentifierName "sort" = (compareFn?: (a: T, b: T) => number) => ChainedArray<T>
Line 316 col 13 IdentifierName "compareFn" = (a: T, b: T) => number
Line 316 col 26 IdentifierName "a" = T
Line 316 col 29 IdentifierName "T" = T
Line 316 col 32 IdentifierName "b" = T
Line 316 col 35 IdentifierName "T" = T
Line 316 col 50 IdentifierName "ChainedArray" = ChainedArray<T>
Line 316 col 63 IdentifierName "T" = T
Line 317 col 0 IdentifierName "splice" = { (start: number): ChainedArray<T>; (start: number, deleteCount: number, ...items: T[]): ChainedArray<T>; }
Line 317 col 15 IdentifierName "start" = number
Line 317 col 31 IdentifierName "ChainedArray" = ChainedArray<T>
Line 317 col 44 IdentifierName "T" = T
Line 318 col 0 IdentifierName "splice" = { (start: number): ChainedArray<T>; (start: number, deleteCount: number, ...items: T[]): ChainedArray<T>; }
Line 318 col 15 IdentifierName "start" = number
Line 318 col 30 IdentifierName "deleteCount" = number
Line 318 col 54 IdentifierName "items" = T[]
Line 318 col 61 IdentifierName "T" = T
Line 318 col 67 IdentifierName "ChainedArray" = ChainedArray<T>
Line 318 col 80 IdentifierName "T" = T
Line 319 col 0 IdentifierName "unshift" = (...items: T[]) => ChainedObject<number>
Line 319 col 19 IdentifierName "items" = T[]
Line 319 col 26 IdentifierName "T" = T
Line 319 col 32 IdentifierName "ChainedObject" = ChainedObject<T>
Line 320 col 0 IdentifierName "// Methods from ChainedObject with promoted return types
        extend" = (...sources: any[]) => ChainedArray<T>
Line 321 col 18 IdentifierName "sources" = any[]
Line 321 col 35 IdentifierName "ChainedArray" = ChainedArray<T>
Line 321 col 48 IdentifierName "T" = T
Line 322 col 0 IdentifierName "pick" = (...keys: string[]) => ChainedArray<T>
Line 322 col 16 IdentifierName "keys" = string[]
Line 322 col 33 IdentifierName "ChainedArray" = ChainedArray<T>
Line 322 col 46 IdentifierName "T" = T
Line 323 col 0 IdentifierName "omit" = (...keys: string[]) => ChainedArray<T>
Line 323 col 16 IdentifierName "keys" = string[]
Line 323 col 33 IdentifierName "ChainedArray" = ChainedArray<T>
Line 323 col 46 IdentifierName "T" = T
Line 324 col 0 IdentifierName "defaults" = (...defaults: any[]) => ChainedArray<T>
Line 324 col 20 IdentifierName "defaults" = any[]
Line 324 col 38 IdentifierName "ChainedArray" = ChainedArray<T>
Line 324 col 51 IdentifierName "T" = T
Line 325 col 0 IdentifierName "clone" = () => ChainedArray<T>
Line 325 col 17 IdentifierName "ChainedArray" = ChainedArray<T>
Line 325 col 30 IdentifierName "T" = T
Line 326 col 0 IdentifierName "tap" = (interceptor: (object: T[]) => void) => ChainedArray<T>
Line 326 col 12 IdentifierName "interceptor" = (object: T[]) => void
Line 326 col 26 IdentifierName "object" = T[]
Line 326 col 34 IdentifierName "T" = T
Line 326 col 49 IdentifierName "ChainedArray" = ChainedArray<T>
Line 326 col 62 IdentifierName "T" = T
Line 329 col 21 IdentifierName "ChainedDictionary" = ChainedDictionary<T>
Line 329 col 39 IdentifierName "T" = T
Line 329 col 50 IdentifierName "ChainedObject" = ChainedObject<T>
Line 329 col 64 IdentifierName "Dictionary" = Dictionary<T>
Line 329 col 75 IdentifierName "T" = T
Line 330 col 0 IdentifierName "each" = (iterator: Iterator<T, void>, context?: any) => ChainedObject<void>
Line 330 col 13 IdentifierName "iterator" = Iterator<T, void>
Line 330 col 23 IdentifierName "Iterator" = Iterator<T, U>
Line 330 col 32 IdentifierName "T" = T
Line 330 col 42 IdentifierName "context" = any
Line 330 col 58 IdentifierName "ChainedObject" = ChainedObject<T>
Line 331 col 0 IdentifierName "forEach" = (iterator: Iterator<T, void>, context?: any) => ChainedObject<void>
Line 331 col 16 IdentifierName "iterator" = Iterator<T, void>
Line 331 col 26 IdentifierName "Iterator" = Iterator<T, U>
Line 331 col 35 IdentifierName "T" = T
Line 331 col 45 IdentifierName "context" = any
Line 331 col 61 IdentifierName "ChainedObject" = ChainedObject<T>
Line 332 col 0 IdentifierName "map" = <U>(iterator: Iterator<T, U>, context?: any) => ChainedArray<U>
Line 332 col 12 IdentifierName "U" = U
Line 332 col 15 IdentifierName "iterator" = Iterator<T, U>
Line 332 col 25 IdentifierName "Iterator" = Iterator<T, U>
Line 332 col 34 IdentifierName "T" = T
Line 332 col 37 IdentifierName "U" = U
Line 332 col 41 IdentifierName "context" = any
Line 332 col 57 IdentifierName "ChainedArray" = ChainedArray<T>
Line 332 col 70 IdentifierName "U" = U
Line 333 col 0 IdentifierName "collect" = <U>(iterator: Iterator<T, U>, context?: any) => ChainedArray<U>
Line 333 col 16 IdentifierName "U" = U
Line 333 col 19 IdentifierName "iterator" = Iterator<T, U>
Line 333 col 29 IdentifierName "Iterator" = Iterator<T, U>
Line 333 col 38 IdentifierName "T" = T
Line 333 col 41 IdentifierName "U" = U
Line 333 col 45 IdentifierName "context" = any
Line 333 col 61 IdentifierName "ChainedArray" = ChainedArray<T>
Line 333 col 74 IdentifierName "U" = U
Line 334 col 0 IdentifierName "reduce" = { (iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>; }
Line 334 col 15 IdentifierName "iterator" = Reducer<T, T>
Line 334 col 25 IdentifierName "Reducer" = Reducer<T, U>
Line 334 col 33 IdentifierName "T" = T
Line 334 col 36 IdentifierName "T" = T
Line 334 col 40 IdentifierName "initialValue" = T
Line 334 col 55 IdentifierName "T" = T
Line 334 col 58 IdentifierName "context" = any
Line 334 col 74 IdentifierName "ChainedObject" = ChainedObject<T>
Line 334 col 88 IdentifierName "T" = T
Line 335 col 0 IdentifierName "reduce" = { (iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>; }
Line 335 col 15 IdentifierName "U" = U
Line 335 col 18 IdentifierName "iterator" = Reducer<T, U>
Line 335 col 28 IdentifierName "Reducer" = Reducer<T, U>
Line 335 col 36 IdentifierName "T" = T
Line 335 col 39 IdentifierName "U" = U
Line 335 col 43 IdentifierName "initialValue" = U
Line 335 col 57 IdentifierName "U" = U
Line 335 col 60 IdentifierName "context" = any
Line 335 col 76 IdentifierName "ChainedObject" = ChainedObject<T>
Line 335 col 90 IdentifierName "U" = U
Line 336 col 0 IdentifierName "foldl" = { (iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>; }
Line 336 col 14 IdentifierName "iterator" = Reducer<T, T>
Line 336 col 24 IdentifierName "Reducer" = Reducer<T, U>
Line 336 col 32 IdentifierName "T" = T
Line 336 col 35 IdentifierName "T" = T
Line 336 col 39 IdentifierName "initialValue" = T
Line 336 col 54 IdentifierName "T" = T
Line 336 col 57 IdentifierName "context" = any
Line 336 col 73 IdentifierName "ChainedObject" = ChainedObject<T>
Line 336 col 87 IdentifierName "T" = T
Line 337 col 0 IdentifierName "foldl" = { (iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>; }
Line 337 col 14 IdentifierName "U" = U
Line 337 col 17 IdentifierName "iterator" = Reducer<T, U>
Line 337 col 27 IdentifierName "Reducer" = Reducer<T, U>
Line 337 col 35 IdentifierName "T" = T
Line 337 col 38 IdentifierName "U" = U
Line 337 col 42 IdentifierName "initialValue" = U
Line 337 col 56 IdentifierName "U" = U
Line 337 col 59 IdentifierName "context" = any
Line 337 col 75 IdentifierName "ChainedObject" = ChainedObject<T>
Line 337 col 89 IdentifierName "U" = U
Line 338 col 0 IdentifierName "inject" = { (iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>; }
Line 338 col 15 IdentifierName "iterator" = Reducer<T, T>
Line 338 col 25 IdentifierName "Reducer" = Reducer<T, U>
Line 338 col 33 IdentifierName "T" = T
Line 338 col 36 IdentifierName "T" = T
Line 338 col 40 IdentifierName "initialValue" = T
Line 338 col 55 IdentifierName "T" = T
Line 338 col 58 IdentifierName "context" = any
Line 338 col 74 IdentifierName "ChainedObject" = ChainedObject<T>
Line 338 col 88 IdentifierName "T" = T
Line 339 col 0 IdentifierName "inject" = { (iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>; }
Line 339 col 15 IdentifierName "U" = U
Line 339 col 18 IdentifierName "iterator" = Reducer<T, U>
Line 339 col 28 IdentifierName "Reducer" = Reducer<T, U>
Line 339 col 36 IdentifierName "T" = T
Line 339 col 39 IdentifierName "U" = U
Line 339 col 43 IdentifierName "initialValue" = U
Line 339 col 57 IdentifierName "U" = U
Line 339 col 60 IdentifierName "context" = any
Line 339 col 76 IdentifierName "ChainedObject" = ChainedObject<T>
Line 339 col 90 IdentifierName "U" = U
Line 340 col 0 IdentifierName "reduceRight" = { (iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>; }
Line 340 col 20 IdentifierName "iterator" = Reducer<T, T>
Line 340 col 30 IdentifierName "Reducer" = Reducer<T, U>
Line 340 col 38 IdentifierName "T" = T
Line 340 col 41 IdentifierName "T" = T
Line 340 col 45 IdentifierName "initialValue" = T
Line 340 col 60 IdentifierName "T" = T
Line 340 col 63 IdentifierName "context" = any
Line 340 col 79 IdentifierName "ChainedObject" = ChainedObject<T>
Line 340 col 93 IdentifierName "T" = T
Line 341 col 0 IdentifierName "reduceRight" = { (iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>; }
Line 341 col 20 IdentifierName "U" = U
Line 341 col 23 IdentifierName "iterator" = Reducer<T, U>
Line 341 col 33 IdentifierName "Reducer" = Reducer<T, U>
Line 341 col 41 IdentifierName "T" = T
Line 341 col 44 IdentifierName "U" = U
Line 341 col 48 IdentifierName "initialValue" = U
Line 341 col 62 IdentifierName "U" = U
Line 341 col 65 IdentifierName "context" = any
Line 341 col 81 IdentifierName "ChainedObject" = ChainedObject<T>
Line 341 col 95 IdentifierName "U" = U
Line 342 col 0 IdentifierName "foldr" = { (iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>; }
Line 342 col 14 IdentifierName "iterator" = Reducer<T, T>
Line 342 col 24 IdentifierName "Reducer" = Reducer<T, U>
Line 342 col 32 IdentifierName "T" = T
Line 342 col 35 IdentifierName "T" = T
Line 342 col 39 IdentifierName "initialValue" = T
Line 342 col 54 IdentifierName "T" = T
Line 342 col 57 IdentifierName "context" = any
Line 342 col 73 IdentifierName "ChainedObject" = ChainedObject<T>
Line 342 col 87 IdentifierName "T" = T
Line 343 col 0 IdentifierName "foldr" = { (iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>; }
Line 343 col 14 IdentifierName "U" = U
Line 343 col 17 IdentifierName "iterator" = Reducer<T, U>
Line 343 col 27 IdentifierName "Reducer" = Reducer<T, U>
Line 343 col 35 IdentifierName "T" = T
Line 343 col 38 IdentifierName "U" = U
Line 343 col 42 IdentifierName "initialValue" = U
Line 343 col 56 IdentifierName "U" = U
Line 343 col 59 IdentifierName "context" = any
Line 343 col 75 IdentifierName "ChainedObject" = ChainedObject<T>
Line 343 col 89 IdentifierName "U" = U
Line 344 col 0 IdentifierName "find" = (iterator: Iterator<T, boolean>, context?: any) => ChainedObject<T>
Line 344 col 13 IdentifierName "iterator" = Iterator<T, boolean>
Line 344 col 23 IdentifierName "Iterator" = Iterator<T, U>
Line 344 col 32 IdentifierName "T" = T
Line 344 col 45 IdentifierName "context" = any
Line 344 col 61 IdentifierName "ChainedObject" = ChainedObject<T>
Line 344 col 75 IdentifierName "T" = T
Line 345 col 0 IdentifierName "detect" = (iterator: Iterator<T, boolean>, context?: any) => ChainedObject<T>
Line 345 col 15 IdentifierName "iterator" = Iterator<T, boolean>
Line 345 col 25 IdentifierName "Iterator" = Iterator<T, U>
Line 345 col 34 IdentifierName "T" = T
Line 345 col 47 IdentifierName "context" = any
Line 345 col 63 IdentifierName "ChainedObject" = ChainedObject<T>
Line 345 col 77 IdentifierName "T" = T
Line 346 col 0 IdentifierName "filter" = (iterator: Iterator<T, boolean>, context?: any) => ChainedArray<T>
Line 346 col 15 IdentifierName "iterator" = Iterator<T, boolean>
Line 346 col 25 IdentifierName "Iterator" = Iterator<T, U>
Line 346 col 34 IdentifierName "T" = T
Line 346 col 47 IdentifierName "context" = any
Line 346 col 63 IdentifierName "ChainedArray" = ChainedArray<T>
Line 346 col 76 IdentifierName "T" = T
Line 347 col 0 IdentifierName "select" = (iterator: Iterator<T, boolean>, context?: any) => ChainedArray<T>
Line 347 col 15 IdentifierName "iterator" = Iterator<T, boolean>
Line 347 col 25 IdentifierName "Iterator" = Iterator<T, U>
Line 347 col 34 IdentifierName "T" = T
Line 347 col 47 IdentifierName "context" = any
Line 347 col 63 IdentifierName "ChainedArray" = ChainedArray<T>
Line 347 col 76 IdentifierName "T" = T
Line 348 col 0 IdentifierName "where" = (properties: Object) => ChainedArray<T>
Line 348 col 14 IdentifierName "properties" = Object
Line 348 col 26 IdentifierName "Object" = Object
Line 348 col 35 IdentifierName "ChainedArray" = ChainedArray<T>
Line 348 col 48 IdentifierName "T" = T
Line 349 col 0 IdentifierName "findWhere" = (properties: Object) => ChainedObject<T>
Line 349 col 18 IdentifierName "properties" = Object
Line 349 col 30 IdentifierName "Object" = Object
Line 349 col 39 IdentifierName "ChainedObject" = ChainedObject<T>
Line 349 col 53 IdentifierName "T" = T
Line 350 col 0 IdentifierName "reject" = (iterator: Iterator<T, boolean>, context?: any) => ChainedArray<T>
Line 350 col 15 IdentifierName "iterator" = Iterator<T, boolean>
Line 350 col 25 IdentifierName "Iterator" = Iterator<T, U>
Line 350 col 34 IdentifierName "T" = T
Line 350 col 47 IdentifierName "context" = any
Line 350 col 63 IdentifierName "ChainedArray" = ChainedArray<T>
Line 350 col 76 IdentifierName "T" = T
Line 351 col 0 IdentifierName "every" = (iterator?: Iterator<T, boolean>, context?: any) => ChainedObject<boolean>
Line 351 col 14 IdentifierName "iterator" = Iterator<T, boolean>
Line 351 col 25 IdentifierName "Iterator" = Iterator<T, U>
Line 351 col 34 IdentifierName "T" = T
Line 351 col 47 IdentifierName "context" = any
Line 351 col 63 IdentifierName "ChainedObject" = ChainedObject<T>
Line 352 col 0 IdentifierName "all" = (iterator?: Iterator<T, boolean>, context?: any) => ChainedObject<boolean>
Line 352 col 12 IdentifierName "iterator" = Iterator<T, boolean>
Line 352 col 23 IdentifierName "Iterator" = Iterator<T, U>
Line 352 col 32 IdentifierName "T" = T
Line 352 col 45 IdentifierName "context" = any
Line 352 col 61 IdentifierName "ChainedObject" = ChainedObject<T>
Line 353 col 0 IdentifierName "some" = (iterator?: Iterator<T, boolean>, context?: any) => ChainedObject<boolean>
Line 353 col 13 IdentifierName "iterator" = Iterator<T, boolean>
Line 353 col 24 IdentifierName "Iterator" = Iterator<T, U>
Line 353 col 33 IdentifierName "T" = T
Line 353 col 46 IdentifierName "context" = any
Line 353 col 62 IdentifierName "ChainedObject" = ChainedObject<T>
Line 354 col 0 IdentifierName "any" = (iterator?: Iterator<T, boolean>, context?: any) => ChainedObject<boolean>
Line 354 col 12 IdentifierName "iterator" = Iterator<T, boolean>
Line 354 col 23 IdentifierName "Iterator" = Iterator<T, U>
Line 354 col 32 IdentifierName "T" = T
Line 354 col 45 IdentifierName "context" = any
Line 354 col 61 IdentifierName "ChainedObject" = ChainedObject<T>
Line 355 col 0 IdentifierName "contains" = (value: T) => ChainedObject<boolean>
Line 355 col 17 IdentifierName "value" = T
Line 355 col 24 IdentifierName "T" = T
Line 355 col 28 IdentifierName "ChainedObject" = ChainedObject<T>
Line 356 col 0 IdentifierName "include" = (value: T) => ChainedObject<boolean>
Line 356 col 16 IdentifierName "value" = T
Line 356 col 23 IdentifierName "T" = T
Line 356 col 27 IdentifierName "ChainedObject" = ChainedObject<T>
Line 357 col 0 IdentifierName "invoke" = (methodName: string, ...args: any[]) => ChainedArray<any>
Line 357 col 15 IdentifierName "methodName" = string
Line 357 col 38 IdentifierName "args" = any[]
Line 357 col 52 IdentifierName "ChainedArray" = ChainedArray<T>
Line 358 col 0 IdentifierName "pluck" = (propertyName: string) => ChainedArray<any>
Line 358 col 14 IdentifierName "propertyName" = string
Line 358 col 37 IdentifierName "ChainedArray" = ChainedArray<T>
Line 359 col 0 IdentifierName "max" = (iterator?: Iterator<T, any>, context?: any) => ChainedObject<T>
Line 359 col 12 IdentifierName "iterator" = Iterator<T, any>
Line 359 col 23 IdentifierName "Iterator" = Iterator<T, U>
Line 359 col 32 IdentifierName "T" = T
Line 359 col 41 IdentifierName "context" = any
Line 359 col 57 IdentifierName "ChainedObject" = ChainedObject<T>
Line 359 col 71 IdentifierName "T" = T
Line 360 col 0 IdentifierName "min" = (iterator?: Iterator<T, any>, context?: any) => ChainedObject<T>
Line 360 col 12 IdentifierName "iterator" = Iterator<T, any>
Line 360 col 23 IdentifierName "Iterator" = Iterator<T, U>
Line 360 col 32 IdentifierName "T" = T
Line 360 col 41 IdentifierName "context" = any
Line 360 col 57 IdentifierName "ChainedObject" = ChainedObject<T>
Line 360 col 71 IdentifierName "T" = T
Line 361 col 0 IdentifierName "sortBy" = { (iterator: Iterator<T, any>, context?: any): ChainedArray<T>; (propertyName: string): ChainedArray<T>; }
Line 361 col 15 IdentifierName "iterator" = Iterator<T, any>
Line 361 col 25 IdentifierName "Iterator" = Iterator<T, U>
Line 361 col 34 IdentifierName "T" = T
Line 361 col 43 IdentifierName "context" = any
Line 361 col 59 IdentifierName "ChainedArray" = ChainedArray<T>
Line 361 col 72 IdentifierName "T" = T
Line 362 col 0 IdentifierName "sortBy" = { (iterator: Iterator<T, any>, context?: any): ChainedArray<T>; (propertyName: string): ChainedArray<T>; }
Line 362 col 15 IdentifierName "propertyName" = string
Line 362 col 38 IdentifierName "ChainedArray" = ChainedArray<T>
Line 362 col 51 IdentifierName "T" = T
Line 363 col 0 IdentifierName "// Should return ChainedDictionary<T[]>, but expansive recursion not allowed
        groupBy" = { (iterator?: Iterator<T, any>, context?: any): ChainedDictionary<any[]>; (propertyName: string): ChainedDictionary<any[]>; }
Line 364 col 16 IdentifierName "iterator" = Iterator<T, any>
Line 364 col 27 IdentifierName "Iterator" = Iterator<T, U>
Line 364 col 36 IdentifierName "T" = T
Line 364 col 45 IdentifierName "context" = any
Line 364 col 61 IdentifierName "ChainedDictionary" = ChainedDictionary<T>
Line 365 col 0 IdentifierName "groupBy" = { (iterator?: Iterator<T, any>, context?: any): ChainedDictionary<any[]>; (propertyName: string): ChainedDictionary<any[]>; }
Line 365 col 16 IdentifierName "propertyName" = string
Line 365 col 39 IdentifierName "ChainedDictionary" = ChainedDictionary<T>
Line 366 col 0 IdentifierName "countBy" = { (iterator?: Iterator<T, any>, context?: any): ChainedDictionary<number>; (propertyName: string): ChainedDictionary<number>; }
Line 366 col 16 IdentifierName "iterator" = Iterator<T, any>
Line 366 col 27 IdentifierName "Iterator" = Iterator<T, U>
Line 366 col 36 IdentifierName "T" = T
Line 366 col 45 IdentifierName "context" = any
Line 366 col 61 IdentifierName "ChainedDictionary" = ChainedDictionary<T>
Line 367 col 0 IdentifierName "countBy" = { (iterator?: Iterator<T, any>, context?: any): ChainedDictionary<number>; (propertyName: string): ChainedDictionary<number>; }
Line 367 col 16 IdentifierName "propertyName" = string
Line 367 col 39 IdentifierName "ChainedDictionary" = ChainedDictionary<T>
Line 368 col 0 IdentifierName "shuffle" = () => ChainedArray<T>
Line 368 col 19 IdentifierName "ChainedArray" = ChainedArray<T>
Line 368 col 32 IdentifierName "T" = T
Line 369 col 0 IdentifierName "toArray" = () => ChainedArray<T>
Line 369 col 19 IdentifierName "ChainedArray" = ChainedArray<T>
Line 369 col 32 IdentifierName "T" = T
Line 370 col 0 IdentifierName "size" = () => ChainedObject<number>
Line 370 col 16 IdentifierName "ChainedObject" = ChainedObject<T>
Line 371 col 0 IdentifierName "// Methods from ChainedObject with promoted return types
        extend" = (...sources: any[]) => ChainedDictionary<T>
Line 372 col 18 IdentifierName "sources" = any[]
Line 372 col 35 IdentifierName "ChainedDictionary" = ChainedDictionary<T>
Line 372 col 53 IdentifierName "T" = T
Line 373 col 0 IdentifierName "pick" = (...keys: string[]) => ChainedDictionary<T>
Line 373 col 16 IdentifierName "keys" = string[]
Line 373 col 33 IdentifierName "ChainedDictionary" = ChainedDictionary<T>
Line 373 col 51 IdentifierName "T" = T
Line 374 col 0 IdentifierName "omit" = (...keys: string[]) => ChainedDictionary<T>
Line 374 col 16 IdentifierName "keys" = string[]
Line 374 col 33 IdentifierName "ChainedDictionary" = ChainedDictionary<T>
Line 374 col 51 IdentifierName "T" = T
Line 375 col 0 IdentifierName "defaults" = (...defaults: any[]) => ChainedDictionary<T>
Line 375 col 20 IdentifierName "defaults" = any[]
Line 375 col 38 IdentifierName "ChainedDictionary" = ChainedDictionary<T>
Line 375 col 56 IdentifierName "T" = T
Line 376 col 0 IdentifierName "clone" = () => ChainedDictionary<T>
Line 376 col 17 IdentifierName "ChainedDictionary" = ChainedDictionary<T>
Line 376 col 35 IdentifierName "T" = T
Line 377 col 0 IdentifierName "tap" = (interceptor: (object: Dictionary<T>) => void) => ChainedDictionary<T>
Line 377 col 12 IdentifierName "interceptor" = (object: Dictionary<T>) => void
Line 377 col 26 IdentifierName "object" = Dictionary<T>
Line 377 col 34 IdentifierName "Dictionary" = Dictionary<T>
Line 377 col 45 IdentifierName "T" = T
Line 377 col 59 IdentifierName "ChainedDictionary" = ChainedDictionary<T>
Line 377 col 77 IdentifierName "T" = T
Line 380 col 21 IdentifierName "TemplateSettings" = TemplateSettings
Line 381 col 0 IdentifierName "evaluate" = RegExp
Line 381 col 19 IdentifierName "RegExp" = RegExp
Line 382 col 0 IdentifierName "interpolate" = RegExp
Line 382 col 22 IdentifierName "RegExp" = RegExp
Line 383 col 0 IdentifierName "escape" = RegExp
Line 383 col 17 IdentifierName "RegExp" = RegExp
Line 386 col 21 IdentifierName "Static" = Static
Line 387 col 9 IdentifierName "T" = T
Line 387 col 12 IdentifierName "list" = T[]
Line 387 col 18 IdentifierName "T" = T
Line 387 col 24 IdentifierName "WrappedArray" = WrappedArray<T>
Line 387 col 37 IdentifierName "T" = T
Line 388 col 9 IdentifierName "T" = T
Line 388 col 12 IdentifierName "list" = Dictionary<T>
Line 388 col 18 IdentifierName "Dictionary" = Dictionary<T>
Line 388 col 29 IdentifierName "T" = T
Line 388 col 34 IdentifierName "WrappedDictionary" = WrappedDictionary<T>
Line 388 col 52 IdentifierName "T" = T
Line 389 col 9 IdentifierName "T" = T
Line 389 col 19 IdentifierName "Function" = Function
Line 389 col 29 IdentifierName "func" = T
Line 389 col 35 IdentifierName "T" = T
Line 389 col 39 IdentifierName "WrappedFunction" = WrappedFunction<T>
Line 389 col 55 IdentifierName "T" = T
Line 390 col 9 IdentifierName "T" = T
Line 390 col 12 IdentifierName "obj" = T
Line 390 col 17 IdentifierName "T" = T
Line 390 col 21 IdentifierName "WrappedObject" = WrappedObject<T>
Line 390 col 35 IdentifierName "T" = T
Line 391 col 0 IdentifierName "chain" = { <T>(list: T[]): ChainedArray<T>; <T>(list: Dictionary<T>): ChainedDictionary<T>; <T>(obj: T): ChainedObject<T>; }
Line 392 col 14 IdentifierName "T" = T
Line 392 col 17 IdentifierName "list" = T[]
Line 392 col 23 IdentifierName "T" = T
Line 392 col 29 IdentifierName "ChainedArray" = ChainedArray<T>
Line 392 col 42 IdentifierName "T" = T
Line 393 col 0 IdentifierName "chain" = { <T>(list: T[]): ChainedArray<T>; <T>(list: Dictionary<T>): ChainedDictionary<T>; <T>(obj: T): ChainedObject<T>; }
Line 393 col 14 IdentifierName "T" = T
Line 393 col 17 IdentifierName "list" = Dictionary<T>
Line 393 col 23 IdentifierName "Dictionary" = Dictionary<T>
Line 393 col 34 IdentifierName "T" = T
Line 393 col 39 IdentifierName "ChainedDictionary" = ChainedDictionary<T>
Line 393 col 57 IdentifierName "T" = T
Line 394 col 0 IdentifierName "chain" = { <T>(list: T[]): ChainedArray<T>; <T>(list: Dictionary<T>): ChainedDictionary<T>; <T>(obj: T): ChainedObject<T>; }
Line 394 col 14 IdentifierName "T" = T
Line 394 col 17 IdentifierName "obj" = T
Line 394 col 22 IdentifierName "T" = T
Line 394 col 26 IdentifierName "ChainedObject" = ChainedObject<T>
Line 394 col 40 IdentifierName "T" = T
Line 395 col 0 IdentifierName "each" = { <T>(list: T[], iterator: Iterator<T, void>, context?: any): void; <T>(list: Dictionary<T>, iterator: Iterator<T, void>, context?: any): void; }
Line 396 col 13 IdentifierName "T" = T
Line 396 col 16 IdentifierName "list" = T[]
Line 396 col 22 IdentifierName "T" = T
Line 396 col 27 IdentifierName "iterator" = Iterator<T, void>
Line 396 col 37 IdentifierName "Iterator" = Iterator<T, U>
Line 396 col 46 IdentifierName "T" = T
Line 396 col 56 IdentifierName "context" = any
Line 397 col 0 IdentifierName "each" = { <T>(list: T[], iterator: Iterator<T, void>, context?: any): void; <T>(list: Dictionary<T>, iterator: Iterator<T, void>, context?: any): void; }
Line 397 col 13 IdentifierName "T" = T
Line 397 col 16 IdentifierName "list" = Dictionary<T>
Line 397 col 22 IdentifierName "Dictionary" = Dictionary<T>
Line 397 col 33 IdentifierName "T" = T
Line 397 col 37 IdentifierName "iterator" = Iterator<T, void>
Line 397 col 47 IdentifierName "Iterator" = Iterator<T, U>
Line 397 col 56 IdentifierName "T" = T
Line 397 col 66 IdentifierName "context" = any
Line 398 col 0 IdentifierName "forEach" = { <T>(list: T[], iterator: Iterator<T, void>, context?: any): void; <T>(list: Dictionary<T>, iterator: Iterator<T, void>, context?: any): void; }
Line 398 col 16 IdentifierName "T" = T
Line 398 col 19 IdentifierName "list" = T[]
Line 398 col 25 IdentifierName "T" = T
Line 398 col 30 IdentifierName "iterator" = Iterator<T, void>
Line 398 col 40 IdentifierName "Iterator" = Iterator<T, U>
Line 398 col 49 IdentifierName "T" = T
Line 398 col 59 IdentifierName "context" = any
Line 399 col 0 IdentifierName "forEach" = { <T>(list: T[], iterator: Iterator<T, void>, context?: any): void; <T>(list: Dictionary<T>, iterator: Iterator<T, void>, context?: any): void; }
Line 399 col 16 IdentifierName "T" = T
Line 399 col 19 IdentifierName "list" = Dictionary<T>
Line 399 col 25 IdentifierName "Dictionary" = Dictionary<T>
Line 399 col 36 IdentifierName "T" = T
Line 399 col 40 IdentifierName "iterator" = Iterator<T, void>
Line 399 col 50 IdentifierName "Iterator" = Iterator<T, U>
Line 399 col 59 IdentifierName "T" = T
Line 399 col 69 IdentifierName "context" = any
Line 400 col 0 IdentifierName "map" = { <T, U>(list: T[], iterator: Iterator<T, U>, context?: any): U[]; <T, U>(list: Dictionary<T>, iterator: Iterator<T, U>, context?: any): U[]; }
Line 401 col 12 IdentifierName "T" = T
Line 401 col 15 IdentifierName "U" = U
Line 401 col 18 IdentifierName "list" = T[]
Line 401 col 24 IdentifierName "T" = T
Line 401 col 29 IdentifierName "iterator" = Iterator<T, U>
Line 401 col 39 IdentifierName "Iterator" = Iterator<T, U>
Line 401 col 48 IdentifierName "T" = T
Line 401 col 51 IdentifierName "U" = U
Line 401 col 55 IdentifierName "context" = any
Line 401 col 71 IdentifierName "U" = U
Line 402 col 0 IdentifierName "map" = { <T, U>(list: T[], iterator: Iterator<T, U>, context?: any): U[]; <T, U>(list: Dictionary<T>, iterator: Iterator<T, U>, context?: any): U[]; }
Line 402 col 12 IdentifierName "T" = T
Line 402 col 15 IdentifierName "U" = U
Line 402 col 18 IdentifierName "list" = Dictionary<T>
Line 402 col 24 IdentifierName "Dictionary" = Dictionary<T>
Line 402 col 35 IdentifierName "T" = T
Line 402 col 39 IdentifierName "iterator" = Iterator<T, U>
Line 402 col 49 IdentifierName "Iterator" = Iterator<T, U>
Line 402 col 58 IdentifierName "T" = T
Line 402 col 61 IdentifierName "U" = U
Line 402 col 65 IdentifierName "context" = any
Line 402 col 81 IdentifierName "U" = U
Line 403 col 0 IdentifierName "collect" = { <T, U>(list: T[], iterator: Iterator<T, U>, context?: any): U[]; <T, U>(list: Dictionary<T>, iterator: Iterator<T, U>, context?: any): U[]; }
Line 403 col 16 IdentifierName "T" = T
Line 403 col 19 IdentifierName "U" = U
Line 403 col 22 IdentifierName "list" = T[]
Line 403 col 28 IdentifierName "T" = T
Line 403 col 33 IdentifierName "iterator" = Iterator<T, U>
Line 403 col 43 IdentifierName "Iterator" = Iterator<T, U>
Line 403 col 52 IdentifierName "T" = T
Line 403 col 55 IdentifierName "U" = U
Line 403 col 59 IdentifierName "context" = any
Line 403 col 75 IdentifierName "U" = U
Line 404 col 0 IdentifierName "collect" = { <T, U>(list: T[], iterator: Iterator<T, U>, context?: any): U[]; <T, U>(list: Dictionary<T>, iterator: Iterator<T, U>, context?: any): U[]; }
Line 404 col 16 IdentifierName "T" = T
Line 404 col 19 IdentifierName "U" = U
Line 404 col 22 IdentifierName "list" = Dictionary<T>
Line 404 col 28 IdentifierName "Dictionary" = Dictionary<T>
Line 404 col 39 IdentifierName "T" = T
Line 404 col 43 IdentifierName "iterator" = Iterator<T, U>
Line 404 col 53 IdentifierName "Iterator" = Iterator<T, U>
Line 404 col 62 IdentifierName "T" = T
Line 404 col 65 IdentifierName "U" = U
Line 404 col 69 IdentifierName "context" = any
Line 404 col 85 IdentifierName "U" = U
Line 405 col 0 IdentifierName "reduce" = { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
Line 406 col 15 IdentifierName "T" = T
Line 406 col 18 IdentifierName "list" = T[]
Line 406 col 24 IdentifierName "T" = T
Line 406 col 29 IdentifierName "iterator" = Reducer<T, T>
Line 406 col 39 IdentifierName "Reducer" = Reducer<T, U>
Line 406 col 47 IdentifierName "T" = T
Line 406 col 50 IdentifierName "T" = T
Line 406 col 54 IdentifierName "initialValue" = T
Line 406 col 69 IdentifierName "T" = T
Line 406 col 72 IdentifierName "context" = any
Line 406 col 88 IdentifierName "T" = T
Line 407 col 0 IdentifierName "reduce" = { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
Line 407 col 15 IdentifierName "T" = T
Line 407 col 18 IdentifierName "U" = U
Line 407 col 21 IdentifierName "list" = T[]
Line 407 col 27 IdentifierName "T" = T
Line 407 col 32 IdentifierName "iterator" = Reducer<T, U>
Line 407 col 42 IdentifierName "Reducer" = Reducer<T, U>
Line 407 col 50 IdentifierName "T" = T
Line 407 col 53 IdentifierName "U" = U
Line 407 col 57 IdentifierName "initialValue" = U
Line 407 col 71 IdentifierName "U" = U
Line 407 col 74 IdentifierName "context" = any
Line 407 col 90 IdentifierName "U" = U
Line 408 col 0 IdentifierName "reduce" = { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
Line 408 col 15 IdentifierName "T" = T
Line 408 col 18 IdentifierName "list" = Dictionary<T>
Line 408 col 24 IdentifierName "Dictionary" = Dictionary<T>
Line 408 col 35 IdentifierName "T" = T
Line 408 col 39 IdentifierName "iterator" = Reducer<T, T>
Line 408 col 49 IdentifierName "Reducer" = Reducer<T, U>
Line 408 col 57 IdentifierName "T" = T
Line 408 col 60 IdentifierName "T" = T
Line 408 col 64 IdentifierName "initialValue" = T
Line 408 col 79 IdentifierName "T" = T
Line 408 col 82 IdentifierName "context" = any
Line 408 col 98 IdentifierName "T" = T
Line 409 col 0 IdentifierName "reduce" = { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
Line 409 col 15 IdentifierName "T" = T
Line 409 col 18 IdentifierName "U" = U
Line 409 col 21 IdentifierName "list" = Dictionary<T>
Line 409 col 27 IdentifierName "Dictionary" = Dictionary<T>
Line 409 col 38 IdentifierName "T" = T
Line 409 col 42 IdentifierName "iterator" = Reducer<T, U>
Line 409 col 52 IdentifierName "Reducer" = Reducer<T, U>
Line 409 col 60 IdentifierName "T" = T
Line 409 col 63 IdentifierName "U" = U
Line 409 col 67 IdentifierName "initialValue" = U
Line 409 col 81 IdentifierName "U" = U
Line 409 col 84 IdentifierName "context" = any
Line 409 col 100 IdentifierName "U" = U
Line 410 col 0 IdentifierName "foldl" = { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
Line 410 col 14 IdentifierName "T" = T
Line 410 col 17 IdentifierName "list" = T[]
Line 410 col 23 IdentifierName "T" = T
Line 410 col 28 IdentifierName "iterator" = Reducer<T, T>
Line 410 col 38 IdentifierName "Reducer" = Reducer<T, U>
Line 410 col 46 IdentifierName "T" = T
Line 410 col 49 IdentifierName "T" = T
Line 410 col 53 IdentifierName "initialValue" = T
Line 410 col 68 IdentifierName "T" = T
Line 410 col 71 IdentifierName "context" = any
Line 410 col 87 IdentifierName "T" = T
Line 411 col 0 IdentifierName "foldl" = { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
Line 411 col 14 IdentifierName "T" = T
Line 411 col 17 IdentifierName "U" = U
Line 411 col 20 IdentifierName "list" = T[]
Line 411 col 26 IdentifierName "T" = T
Line 411 col 31 IdentifierName "iterator" = Reducer<T, U>
Line 411 col 41 IdentifierName "Reducer" = Reducer<T, U>
Line 411 col 49 IdentifierName "T" = T
Line 411 col 52 IdentifierName "U" = U
Line 411 col 56 IdentifierName "initialValue" = U
Line 411 col 70 IdentifierName "U" = U
Line 411 col 73 IdentifierName "context" = any
Line 411 col 89 IdentifierName "U" = U
Line 412 col 0 IdentifierName "foldl" = { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
Line 412 col 14 IdentifierName "T" = T
Line 412 col 17 IdentifierName "list" = Dictionary<T>
Line 412 col 23 IdentifierName "Dictionary" = Dictionary<T>
Line 412 col 34 IdentifierName "T" = T
Line 412 col 38 IdentifierName "iterator" = Reducer<T, T>
Line 412 col 48 IdentifierName "Reducer" = Reducer<T, U>
Line 412 col 56 IdentifierName "T" = T
Line 412 col 59 IdentifierName "T" = T
Line 412 col 63 IdentifierName "initialValue" = T
Line 412 col 78 IdentifierName "T" = T
Line 412 col 81 IdentifierName "context" = any
Line 412 col 97 IdentifierName "T" = T
Line 413 col 0 IdentifierName "foldl" = { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
Line 413 col 14 IdentifierName "T" = T
Line 413 col 17 IdentifierName "U" = U
Line 413 col 20 IdentifierName "list" = Dictionary<T>
Line 413 col 26 IdentifierName "Dictionary" = Dictionary<T>
Line 413 col 37 IdentifierName "T" = T
Line 413 col 41 IdentifierName "iterator" = Reducer<T, U>
Line 413 col 51 IdentifierName "Reducer" = Reducer<T, U>
Line 413 col 59 IdentifierName "T" = T
Line 413 col 62 IdentifierName "U" = U
Line 413 col 66 IdentifierName "initialValue" = U
Line 413 col 80 IdentifierName "U" = U
Line 413 col 83 IdentifierName "context" = any
Line 413 col 99 IdentifierName "U" = U
Line 414 col 0 IdentifierName "inject" = { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
Line 414 col 15 IdentifierName "T" = T
Line 414 col 18 IdentifierName "list" = T[]
Line 414 col 24 IdentifierName "T" = T
Line 414 col 29 IdentifierName "iterator" = Reducer<T, T>
Line 414 col 39 IdentifierName "Reducer" = Reducer<T, U>
Line 414 col 47 IdentifierName "T" = T
Line 414 col 50 IdentifierName "T" = T
Line 414 col 54 IdentifierName "initialValue" = T
Line 414 col 69 IdentifierName "T" = T
Line 414 col 72 IdentifierName "context" = any
Line 414 col 88 IdentifierName "T" = T
Line 415 col 0 IdentifierName "inject" = { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
Line 415 col 15 IdentifierName "T" = T
Line 415 col 18 IdentifierName "U" = U
Line 415 col 21 IdentifierName "list" = T[]
Line 415 col 27 IdentifierName "T" = T
Line 415 col 32 IdentifierName "iterator" = Reducer<T, U>
Line 415 col 42 IdentifierName "Reducer" = Reducer<T, U>
Line 415 col 50 IdentifierName "T" = T
Line 415 col 53 IdentifierName "U" = U
Line 415 col 57 IdentifierName "initialValue" = U
Line 415 col 71 IdentifierName "U" = U
Line 415 col 74 IdentifierName "context" = any
Line 415 col 90 IdentifierName "U" = U
Line 416 col 0 IdentifierName "inject" = { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
Line 416 col 15 IdentifierName "T" = T
Line 416 col 18 IdentifierName "list" = Dictionary<T>
Line 416 col 24 IdentifierName "Dictionary" = Dictionary<T>
Line 416 col 35 IdentifierName "T" = T
Line 416 col 39 IdentifierName "iterator" = Reducer<T, T>
Line 416 col 49 IdentifierName "Reducer" = Reducer<T, U>
Line 416 col 57 IdentifierName "T" = T
Line 416 col 60 IdentifierName "T" = T
Line 416 col 64 IdentifierName "initialValue" = T
Line 416 col 79 IdentifierName "T" = T
Line 416 col 82 IdentifierName "context" = any
Line 416 col 98 IdentifierName "T" = T
Line 417 col 0 IdentifierName "inject" = { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
Line 417 col 15 IdentifierName "T" = T
Line 417 col 18 IdentifierName "U" = U
Line 417 col 21 IdentifierName "list" = Dictionary<T>
Line 417 col 27 IdentifierName "Dictionary" = Dictionary<T>
Line 417 col 38 IdentifierName "T" = T
Line 417 col 42 IdentifierName "iterator" = Reducer<T, U>
Line 417 col 52 IdentifierName "Reducer" = Reducer<T, U>
Line 417 col 60 IdentifierName "T" = T
Line 417 col 63 IdentifierName "U" = U
Line 417 col 67 IdentifierName "initialValue" = U
Line 417 col 81 IdentifierName "U" = U
Line 417 col 84 IdentifierName "context" = any
Line 417 col 100 IdentifierName "U" = U
Line 418 col 0 IdentifierName "reduceRight" = { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
Line 419 col 20 IdentifierName "T" = T
Line 419 col 23 IdentifierName "list" = T[]
Line 419 col 29 IdentifierName "T" = T
Line 419 col 34 IdentifierName "iterator" = Reducer<T, T>
Line 419 col 44 IdentifierName "Reducer" = Reducer<T, U>
Line 419 col 52 IdentifierName "T" = T
Line 419 col 55 IdentifierName "T" = T
Line 419 col 59 IdentifierName "initialValue" = T
Line 419 col 74 IdentifierName "T" = T
Line 419 col 77 IdentifierName "context" = any
Line 419 col 93 IdentifierName "T" = T
Line 420 col 0 IdentifierName "reduceRight" = { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
Line 420 col 20 IdentifierName "T" = T
Line 420 col 23 IdentifierName "U" = U
Line 420 col 26 IdentifierName "list" = T[]
Line 420 col 32 IdentifierName "T" = T
Line 420 col 37 IdentifierName "iterator" = Reducer<T, U>
Line 420 col 47 IdentifierName "Reducer" = Reducer<T, U>
Line 420 col 55 IdentifierName "T" = T
Line 420 col 58 IdentifierName "U" = U
Line 420 col 62 IdentifierName "initialValue" = U
Line 420 col 76 IdentifierName "U" = U
Line 420 col 79 IdentifierName "context" = any
Line 420 col 95 IdentifierName "U" = U
Line 421 col 0 IdentifierName "reduceRight" = { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
Line 421 col 20 IdentifierName "T" = T
Line 421 col 23 IdentifierName "list" = Dictionary<T>
Line 421 col 29 IdentifierName "Dictionary" = Dictionary<T>
Line 421 col 40 IdentifierName "T" = T
Line 421 col 44 IdentifierName "iterator" = Reducer<T, T>
Line 421 col 54 IdentifierName "Reducer" = Reducer<T, U>
Line 421 col 62 IdentifierName "T" = T
Line 421 col 65 IdentifierName "T" = T
Line 421 col 69 IdentifierName "initialValue" = T
Line 421 col 84 IdentifierName "T" = T
Line 421 col 87 IdentifierName "context" = any
Line 421 col 103 IdentifierName "T" = T
Line 422 col 0 IdentifierName "reduceRight" = { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
Line 422 col 20 IdentifierName "T" = T
Line 422 col 23 IdentifierName "U" = U
Line 422 col 26 IdentifierName "list" = Dictionary<T>
Line 422 col 32 IdentifierName "Dictionary" = Dictionary<T>
Line 422 col 43 IdentifierName "T" = T
Line 422 col 47 IdentifierName "iterator" = Reducer<T, U>
Line 422 col 57 IdentifierName "Reducer" = Reducer<T, U>
Line 422 col 65 IdentifierName "T" = T
Line 422 col 68 IdentifierName "U" = U
Line 422 col 72 IdentifierName "initialValue" = U
Line 422 col 86 IdentifierName "U" = U
Line 422 col 89 IdentifierName "context" = any
Line 422 col 105 IdentifierName "U" = U
Line 423 col 0 IdentifierName "foldr" = { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
Line 423 col 14 IdentifierName "T" = T
Line 423 col 17 IdentifierName "list" = T[]
Line 423 col 23 IdentifierName "T" = T
Line 423 col 28 IdentifierName "iterator" = Reducer<T, T>
Line 423 col 38 IdentifierName "Reducer" = Reducer<T, U>
Line 423 col 46 IdentifierName "T" = T
Line 423 col 49 IdentifierName "T" = T
Line 423 col 53 IdentifierName "initialValue" = T
Line 423 col 68 IdentifierName "T" = T
Line 423 col 71 IdentifierName "context" = any
Line 423 col 87 IdentifierName "T" = T
Line 424 col 0 IdentifierName "foldr" = { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
Line 424 col 14 IdentifierName "T" = T
Line 424 col 17 IdentifierName "U" = U
Line 424 col 20 IdentifierName "list" = T[]
Line 424 col 26 IdentifierName "T" = T
Line 424 col 31 IdentifierName "iterator" = Reducer<T, U>
Line 424 col 41 IdentifierName "Reducer" = Reducer<T, U>
Line 424 col 49 IdentifierName "T" = T
Line 424 col 52 IdentifierName "U" = U
Line 424 col 56 IdentifierName "initialValue" = U
Line 424 col 70 IdentifierName "U" = U
Line 424 col 73 IdentifierName "context" = any
Line 424 col 89 IdentifierName "U" = U
Line 425 col 0 IdentifierName "foldr" = { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
Line 425 col 14 IdentifierName "T" = T
Line 425 col 17 IdentifierName "list" = Dictionary<T>
Line 425 col 23 IdentifierName "Dictionary" = Dictionary<T>
Line 425 col 34 IdentifierName "T" = T
Line 425 col 38 IdentifierName "iterator" = Reducer<T, T>
Line 425 col 48 IdentifierName "Reducer" = Reducer<T, U>
Line 425 col 56 IdentifierName "T" = T
Line 425 col 59 IdentifierName "T" = T
Line 425 col 63 IdentifierName "initialValue" = T
Line 425 col 78 IdentifierName "T" = T
Line 425 col 81 IdentifierName "context" = any
Line 425 col 97 IdentifierName "T" = T
Line 426 col 0 IdentifierName "foldr" = { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
Line 426 col 14 IdentifierName "T" = T
Line 426 col 17 IdentifierName "U" = U
Line 426 col 20 IdentifierName "list" = Dictionary<T>
Line 426 col 26 IdentifierName "Dictionary" = Dictionary<T>
Line 426 col 37 IdentifierName "T" = T
Line 426 col 41 IdentifierName "iterator" = Reducer<T, U>
Line 426 col 51 IdentifierName "Reducer" = Reducer<T, U>
Line 426 col 59 IdentifierName "T" = T
Line 426 col 62 IdentifierName "U" = U
Line 426 col 66 IdentifierName "initialValue" = U
Line 426 col 80 IdentifierName "U" = U
Line 426 col 83 IdentifierName "context" = any
Line 426 col 99 IdentifierName "U" = U
Line 427 col 0 IdentifierName "find" = { <T>(list: T[], iterator: Iterator<T, boolean>, context?: any): T; <T>(list: Dictionary<T>, iterator: Iterator<T, boolean>, context?: any): T; }
Line 428 col 13 IdentifierName "T" = T
Line 428 col 16 IdentifierName "list" = T[]
Line 428 col 22 IdentifierName "T" = T
Line 428 col 27 IdentifierName "iterator" = Iterator<T, boolean>
Line 428 col 37 IdentifierName "Iterator" = Iterator<T, U>
Line 428 col 46 IdentifierName "T" = T
Line 428 col 59 IdentifierName "context" = any
Line 428 col 75 IdentifierName "T" = T
Line 429 col 0 IdentifierName "find" = { <T>(list: T[], iterator: Iterator<T, boolean>, context?: any): T; <T>(list: Dictionary<T>, iterator: Iterator<T, boolean>, context?: any): T; }
Line 429 col 13 IdentifierName "T" = T
Line 429 col 16 IdentifierName "list" = Dictionary<T>
Line 429 col 22 IdentifierName "Dictionary" = Dictionary<T>
Line 429 col 33 IdentifierName "T" = T
Line 429 col 37 IdentifierName "iterator" = Iterator<T, boolean>
Line 429 col 47 IdentifierName "Iterator" = Iterator<T, U>
Line 429 col 56 IdentifierName "T" = T
Line 429 col 69 IdentifierName "context" = any
Line 429 col 85 IdentifierName "T" = T
Line 430 col 0 IdentifierName "detect" = { <T>(list: T[], iterator: Iterator<T, boolean>, context?: any): T; <T>(list: Dictionary<T>, iterator: Iterator<T, boolean>, context?: any): T; }
Line 430 col 15 IdentifierName "T" = T
Line 430 col 18 IdentifierName "list" = T[]
Line 430 col 24 IdentifierName "T" = T
Line 430 col 29 IdentifierName "iterator" = Iterator<T, boolean>
Line 430 col 39 IdentifierName "Iterator" = Iterator<T, U>
Line 430 col 48 IdentifierName "T" = T
Line 430 col 61 IdentifierName "context" = any
Line 430 col 77 IdentifierName "T" = T
Line 431 col 0 IdentifierName "detect" = { <T>(list: T[], iterator: Iterator<T, boolean>, context?: any): T; <T>(list: Dictionary<T>, iterator: Iterator<T, boolean>, context?: any): T; }
Line 431 col 15 IdentifierName "T" = T
Line 431 col 18 IdentifierName "list" = Dictionary<T>
Line 431 col 24 IdentifierName "Dictionary" = Dictionary<T>
Line 431 col 35 IdentifierName "T" = T
Line 431 col 39 IdentifierName "iterator" = Iterator<T, boolean>
Line 431 col 49 IdentifierName "Iterator" = Iterator<T, U>
Line 431 col 58 IdentifierName "T" = T
Line 431 col 71 IdentifierName "context" = any
Line 431 col 87 IdentifierName "T" = T
Line 432 col 0 IdentifierName "filter" = { <T>(list: T[], iterator: Iterator<T, boolean>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator<T, boolean>, context?: any): T[]; }
Line 433 col 15 IdentifierName "T" = T
Line 433 col 18 IdentifierName "list" = T[]
Line 433 col 24 IdentifierName "T" = T
Line 433 col 29 IdentifierName "iterator" = Iterator<T, boolean>
Line 433 col 39 IdentifierName "Iterator" = Iterator<T, U>
Line 433 col 48 IdentifierName "T" = T
Line 433 col 61 IdentifierName "context" = any
Line 433 col 77 IdentifierName "T" = T
Line 434 col 0 IdentifierName "filter" = { <T>(list: T[], iterator: Iterator<T, boolean>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator<T, boolean>, context?: any): T[]; }
Line 434 col 15 IdentifierName "T" = T
Line 434 col 18 IdentifierName "list" = Dictionary<T>
Line 434 col 24 IdentifierName "Dictionary" = Dictionary<T>
Line 434 col 35 IdentifierName "T" = T
Line 434 col 39 IdentifierName "iterator" = Iterator<T, boolean>
Line 434 col 49 IdentifierName "Iterator" = Iterator<T, U>
Line 434 col 58 IdentifierName "T" = T
Line 434 col 71 IdentifierName "context" = any
Line 434 col 87 IdentifierName "T" = T
Line 435 col 0 IdentifierName "select" = { <T>(list: T[], iterator: Iterator<T, boolean>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator<T, boolean>, context?: any): T[]; }
Line 435 col 15 IdentifierName "T" = T
Line 435 col 18 IdentifierName "list" = T[]
Line 435 col 24 IdentifierName "T" = T
Line 435 col 29 IdentifierName "iterator" = Iterator<T, boolean>
Line 435 col 39 IdentifierName "Iterator" = Iterator<T, U>
Line 435 col 48 IdentifierName "T" = T
Line 435 col 61 IdentifierName "context" = any
Line 435 col 77 IdentifierName "T" = T
Line 436 col 0 IdentifierName "select" = { <T>(list: T[], iterator: Iterator<T, boolean>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator<T, boolean>, context?: any): T[]; }
Line 436 col 15 IdentifierName "T" = T
Line 436 col 18 IdentifierName "list" = Dictionary<T>
Line 436 col 24 IdentifierName "Dictionary" = Dictionary<T>
Line 436 col 35 IdentifierName "T" = T
Line 436 col 39 IdentifierName "iterator" = Iterator<T, boolean>
Line 436 col 49 IdentifierName "Iterator" = Iterator<T, U>
Line 436 col 58 IdentifierName "T" = T
Line 436 col 71 IdentifierName "context" = any
Line 436 col 87 IdentifierName "T" = T
Line 437 col 0 IdentifierName "where" = { <T>(list: T[], properties: Object): T[]; <T>(list: Dictionary<T>, properties: Object): T[]; }
Line 438 col 14 IdentifierName "T" = T
Line 438 col 17 IdentifierName "list" = T[]
Line 438 col 23 IdentifierName "T" = T
Line 438 col 28 IdentifierName "properties" = Object
Line 438 col 40 IdentifierName "Object" = Object
Line 438 col 49 IdentifierName "T" = T
Line 439 col 0 IdentifierName "where" = { <T>(list: T[], properties: Object): T[]; <T>(list: Dictionary<T>, properties: Object): T[]; }
Line 439 col 14 IdentifierName "T" = T
Line 439 col 17 IdentifierName "list" = Dictionary<T>
Line 439 col 23 IdentifierName "Dictionary" = Dictionary<T>
Line 439 col 34 IdentifierName "T" = T
Line 439 col 38 IdentifierName "properties" = Object
Line 439 col 50 IdentifierName "Object" = Object
Line 439 col 59 IdentifierName "T" = T
Line 440 col 0 IdentifierName "findWhere" = { <T>(list: T[], properties: Object): T; <T>(list: Dictionary<T>, properties: Object): T; }
Line 441 col 18 IdentifierName "T" = T
Line 441 col 21 IdentifierName "list" = T[]
Line 441 col 27 IdentifierName "T" = T
Line 441 col 32 IdentifierName "properties" = Object
Line 441 col 44 IdentifierName "Object" = Object
Line 441 col 53 IdentifierName "T" = T
Line 442 col 0 IdentifierName "findWhere" = { <T>(list: T[], properties: Object): T; <T>(list: Dictionary<T>, properties: Object): T; }
Line 442 col 18 IdentifierName "T" = T
Line 442 col 21 IdentifierName "list" = Dictionary<T>
Line 442 col 27 IdentifierName "Dictionary" = Dictionary<T>
Line 442 col 38 IdentifierName "T" = T
Line 442 col 42 IdentifierName "properties" = Object
Line 442 col 54 IdentifierName "Object" = Object
Line 442 col 63 IdentifierName "T" = T
Line 443 col 0 IdentifierName "reject" = { <T>(list: T[], iterator: Iterator<T, boolean>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator<T, boolean>, context?: any): T[]; }
Line 444 col 15 IdentifierName "T" = T
Line 444 col 18 IdentifierName "list" = T[]
Line 444 col 24 IdentifierName "T" = T
Line 444 col 29 IdentifierName "iterator" = Iterator<T, boolean>
Line 444 col 39 IdentifierName "Iterator" = Iterator<T, U>
Line 444 col 48 IdentifierName "T" = T
Line 444 col 61 IdentifierName "context" = any
Line 444 col 77 IdentifierName "T" = T
Line 445 col 0 IdentifierName "reject" = { <T>(list: T[], iterator: Iterator<T, boolean>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator<T, boolean>, context?: any): T[]; }
Line 445 col 15 IdentifierName "T" = T
Line 445 col 18 IdentifierName "list" = Dictionary<T>
Line 445 col 24 IdentifierName "Dictionary" = Dictionary<T>
Line 445 col 35 IdentifierName "T" = T
Line 445 col 39 IdentifierName "iterator" = Iterator<T, boolean>
Line 445 col 49 IdentifierName "Iterator" = Iterator<T, U>
Line 445 col 58 IdentifierName "T" = T
Line 445 col 71 IdentifierName "context" = any
Line 445 col 87 IdentifierName "T" = T
Line 446 col 0 IdentifierName "every" = { <T>(list: T[], iterator?: Iterator<T, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator<T, boolean>, context?: any): boolean; }
Line 447 col 14 IdentifierName "T" = T
Line 447 col 17 IdentifierName "list" = T[]
Line 447 col 23 IdentifierName "T" = T
Line 447 col 28 IdentifierName "iterator" = Iterator<T, boolean>
Line 447 col 39 IdentifierName "Iterator" = Iterator<T, U>
Line 447 col 48 IdentifierName "T" = T
Line 447 col 61 IdentifierName "context" = any
Line 448 col 0 IdentifierName "every" = { <T>(list: T[], iterator?: Iterator<T, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator<T, boolean>, context?: any): boolean; }
Line 448 col 14 IdentifierName "T" = T
Line 448 col 17 IdentifierName "list" = Dictionary<T>
Line 448 col 23 IdentifierName "Dictionary" = Dictionary<T>
Line 448 col 34 IdentifierName "T" = T
Line 448 col 38 IdentifierName "iterator" = Iterator<T, boolean>
Line 448 col 49 IdentifierName "Iterator" = Iterator<T, U>
Line 448 col 58 IdentifierName "T" = T
Line 448 col 71 IdentifierName "context" = any
Line 449 col 0 IdentifierName "all" = { <T>(list: T[], iterator?: Iterator<T, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator<T, boolean>, context?: any): boolean; }
Line 449 col 12 IdentifierName "T" = T
Line 449 col 15 IdentifierName "list" = T[]
Line 449 col 21 IdentifierName "T" = T
Line 449 col 26 IdentifierName "iterator" = Iterator<T, boolean>
Line 449 col 37 IdentifierName "Iterator" = Iterator<T, U>
Line 449 col 46 IdentifierName "T" = T
Line 449 col 59 IdentifierName "context" = any
Line 450 col 0 IdentifierName "all" = { <T>(list: T[], iterator?: Iterator<T, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator<T, boolean>, context?: any): boolean; }
Line 450 col 12 IdentifierName "T" = T
Line 450 col 15 IdentifierName "list" = Dictionary<T>
Line 450 col 21 IdentifierName "Dictionary" = Dictionary<T>
Line 450 col 32 IdentifierName "T" = T
Line 450 col 36 IdentifierName "iterator" = Iterator<T, boolean>
Line 450 col 47 IdentifierName "Iterator" = Iterator<T, U>
Line 450 col 56 IdentifierName "T" = T
Line 450 col 69 IdentifierName "context" = any
Line 451 col 0 IdentifierName "some" = { <T>(list: T[], iterator?: Iterator<T, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator<T, boolean>, context?: any): boolean; }
Line 452 col 13 IdentifierName "T" = T
Line 452 col 16 IdentifierName "list" = T[]
Line 452 col 22 IdentifierName "T" = T
Line 452 col 27 IdentifierName "iterator" = Iterator<T, boolean>
Line 452 col 38 IdentifierName "Iterator" = Iterator<T, U>
Line 452 col 47 IdentifierName "T" = T
Line 452 col 60 IdentifierName "context" = any
Line 453 col 0 IdentifierName "some" = { <T>(list: T[], iterator?: Iterator<T, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator<T, boolean>, context?: any): boolean; }
Line 453 col 13 IdentifierName "T" = T
Line 453 col 16 IdentifierName "list" = Dictionary<T>
Line 453 col 22 IdentifierName "Dictionary" = Dictionary<T>
Line 453 col 33 IdentifierName "T" = T
Line 453 col 37 IdentifierName "iterator" = Iterator<T, boolean>
Line 453 col 48 IdentifierName "Iterator" = Iterator<T, U>
Line 453 col 57 IdentifierName "T" = T
Line 453 col 70 IdentifierName "context" = any
Line 454 col 0 IdentifierName "any" = { <T>(list: T[], iterator?: Iterator<T, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator<T, boolean>, context?: any): boolean; }
Line 454 col 12 IdentifierName "T" = T
Line 454 col 15 IdentifierName "list" = T[]
Line 454 col 21 IdentifierName "T" = T
Line 454 col 26 IdentifierName "iterator" = Iterator<T, boolean>
Line 454 col 37 IdentifierName "Iterator" = Iterator<T, U>
Line 454 col 46 IdentifierName "T" = T
Line 454 col 59 IdentifierName "context" = any
Line 455 col 0 IdentifierName "any" = { <T>(list: T[], iterator?: Iterator<T, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator<T, boolean>, context?: any): boolean; }
Line 455 col 12 IdentifierName "T" = T
Line 455 col 15 IdentifierName "list" = Dictionary<T>
Line 455 col 21 IdentifierName "Dictionary" = Dictionary<T>
Line 455 col 32 IdentifierName "T" = T
Line 455 col 36 IdentifierName "iterator" = Iterator<T, boolean>
Line 455 col 47 IdentifierName "Iterator" = Iterator<T, U>
Line 455 col 56 IdentifierName "T" = T
Line 455 col 69 IdentifierName "context" = any
Line 456 col 0 IdentifierName "contains" = { <T>(list: T[], value: T): boolean; <T>(list: Dictionary<T>, value: T): boolean; }
Line 457 col 17 IdentifierName "T" = T
Line 457 col 20 IdentifierName "list" = T[]
Line 457 col 26 IdentifierName "T" = T
Line 457 col 31 IdentifierName "value" = T
Line 457 col 38 IdentifierName "T" = T
Line 458 col 0 IdentifierName "contains" = { <T>(list: T[], value: T): boolean; <T>(list: Dictionary<T>, value: T): boolean; }
Line 458 col 17 IdentifierName "T" = T
Line 458 col 20 IdentifierName "list" = Dictionary<T>
Line 458 col 26 IdentifierName "Dictionary" = Dictionary<T>
Line 458 col 37 IdentifierName "T" = T
Line 458 col 41 IdentifierName "value" = T
Line 458 col 48 IdentifierName "T" = T
Line 459 col 0 IdentifierName "include" = { <T>(list: T[], value: T): boolean; <T>(list: Dictionary<T>, value: T): boolean; }
Line 459 col 16 IdentifierName "T" = T
Line 459 col 19 IdentifierName "list" = T[]
Line 459 col 25 IdentifierName "T" = T
Line 459 col 30 IdentifierName "value" = T
Line 459 col 37 IdentifierName "T" = T
Line 460 col 0 IdentifierName "include" = { <T>(list: T[], value: T): boolean; <T>(list: Dictionary<T>, value: T): boolean; }
Line 460 col 16 IdentifierName "T" = T
Line 460 col 19 IdentifierName "list" = Dictionary<T>
Line 460 col 25 IdentifierName "Dictionary" = Dictionary<T>
Line 460 col 36 IdentifierName "T" = T
Line 460 col 40 IdentifierName "value" = T
Line 460 col 47 IdentifierName "T" = T
Line 461 col 0 IdentifierName "invoke" = { (list: any[], methodName: string, ...args: any[]): any[]; (list: Dictionary<any>, methodName: string, ...args: any[]): any[]; }
Line 462 col 15 IdentifierName "list" = any[]
Line 462 col 28 IdentifierName "methodName" = string
Line 462 col 51 IdentifierName "args" = any[]
Line 463 col 0 IdentifierName "invoke" = { (list: any[], methodName: string, ...args: any[]): any[]; (list: Dictionary<any>, methodName: string, ...args: any[]): any[]; }
Line 463 col 15 IdentifierName "list" = Dictionary<any>
Line 463 col 21 IdentifierName "Dictionary" = Dictionary<T>
Line 463 col 38 IdentifierName "methodName" = string
Line 463 col 61 IdentifierName "args" = any[]
Line 464 col 0 IdentifierName "pluck" = { (list: any[], propertyName: string): any[]; (list: Dictionary<any>, propertyName: string): any[]; }
Line 465 col 14 IdentifierName "list" = any[]
Line 465 col 27 IdentifierName "propertyName" = string
Line 466 col 0 IdentifierName "pluck" = { (list: any[], propertyName: string): any[]; (list: Dictionary<any>, propertyName: string): any[]; }
Line 466 col 14 IdentifierName "list" = Dictionary<any>
Line 466 col 20 IdentifierName "Dictionary" = Dictionary<T>
Line 466 col 37 IdentifierName "propertyName" = string
Line 467 col 0 IdentifierName "max" = { <T>(list: T[], iterator?: Iterator<T, any>, context?: any): T; <T>(list: Dictionary<T>, iterator?: Iterator<T, any>, context?: any): T; }
Line 468 col 12 IdentifierName "T" = T
Line 468 col 15 IdentifierName "list" = T[]
Line 468 col 21 IdentifierName "T" = T
Line 468 col 26 IdentifierName "iterator" = Iterator<T, any>
Line 468 col 37 IdentifierName "Iterator" = Iterator<T, U>
Line 468 col 46 IdentifierName "T" = T
Line 468 col 55 IdentifierName "context" = any
Line 468 col 71 IdentifierName "T" = T
Line 469 col 0 IdentifierName "max" = { <T>(list: T[], iterator?: Iterator<T, any>, context?: any): T; <T>(list: Dictionary<T>, iterator?: Iterator<T, any>, context?: any): T; }
Line 469 col 12 IdentifierName "T" = T
Line 469 col 15 IdentifierName "list" = Dictionary<T>
Line 469 col 21 IdentifierName "Dictionary" = Dictionary<T>
Line 469 col 32 IdentifierName "T" = T
Line 469 col 36 IdentifierName "iterator" = Iterator<T, any>
Line 469 col 47 IdentifierName "Iterator" = Iterator<T, U>
Line 469 col 56 IdentifierName "T" = T
Line 469 col 65 IdentifierName "context" = any
Line 469 col 81 IdentifierName "T" = T
Line 470 col 0 IdentifierName "min" = { <T>(list: T[], iterator?: Iterator<T, any>, context?: any): T; <T>(list: Dictionary<T>, iterator?: Iterator<T, any>, context?: any): T; }
Line 471 col 12 IdentifierName "T" = T
Line 471 col 15 IdentifierName "list" = T[]
Line 471 col 21 IdentifierName "T" = T
Line 471 col 26 IdentifierName "iterator" = Iterator<T, any>
Line 471 col 37 IdentifierName "Iterator" = Iterator<T, U>
Line 471 col 46 IdentifierName "T" = T
Line 471 col 55 IdentifierName "context" = any
Line 471 col 71 IdentifierName "T" = T
Line 472 col 0 IdentifierName "min" = { <T>(list: T[], iterator?: Iterator<T, any>, context?: any): T; <T>(list: Dictionary<T>, iterator?: Iterator<T, any>, context?: any): T; }
Line 472 col 12 IdentifierName "T" = T
Line 472 col 15 IdentifierName "list" = Dictionary<T>
Line 472 col 21 IdentifierName "Dictionary" = Dictionary<T>
Line 472 col 32 IdentifierName "T" = T
Line 472 col 36 IdentifierName "iterator" = Iterator<T, any>
Line 472 col 47 IdentifierName "Iterator" = Iterator<T, U>
Line 472 col 56 IdentifierName "T" = T
Line 472 col 65 IdentifierName "context" = any
Line 472 col 81 IdentifierName "T" = T
Line 473 col 0 IdentifierName "sortBy" = { <T>(list: T[], iterator: Iterator<T, any>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator<T, any>, context?: any): T[]; <T>(list: T[], propertyName: string): T[]; <T>(list: Dictionary<T>, propertyName: string): T[]; }
Line 474 col 15 IdentifierName "T" = T
Line 474 col 18 IdentifierName "list" = T[]
Line 474 col 24 IdentifierName "T" = T
Line 474 col 29 IdentifierName "iterator" = Iterator<T, any>
Line 474 col 39 IdentifierName "Iterator" = Iterator<T, U>
Line 474 col 48 IdentifierName "T" = T
Line 474 col 57 IdentifierName "context" = any
Line 474 col 73 IdentifierName "T" = T
Line 475 col 0 IdentifierName "sortBy" = { <T>(list: T[], iterator: Iterator<T, any>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator<T, any>, context?: any): T[]; <T>(list: T[], propertyName: string): T[]; <T>(list: Dictionary<T>, propertyName: string): T[]; }
Line 475 col 15 IdentifierName "T" = T
Line 475 col 18 IdentifierName "list" = Dictionary<T>
Line 475 col 24 IdentifierName "Dictionary" = Dictionary<T>
Line 475 col 35 IdentifierName "T" = T
Line 475 col 39 IdentifierName "iterator" = Iterator<T, any>
Line 475 col 49 IdentifierName "Iterator" = Iterator<T, U>
Line 475 col 58 IdentifierName "T" = T
Line 475 col 67 IdentifierName "context" = any
Line 475 col 83 IdentifierName "T" = T
Line 476 col 0 IdentifierName "sortBy" = { <T>(list: T[], iterator: Iterator<T, any>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator<T, any>, context?: any): T[]; <T>(list: T[], propertyName: string): T[]; <T>(list: Dictionary<T>, propertyName: string): T[]; }
Line 476 col 15 IdentifierName "T" = T
Line 476 col 18 IdentifierName "list" = T[]
Line 476 col 24 IdentifierName "T" = T
Line 476 col 29 IdentifierName "propertyName" = string
Line 476 col 52 IdentifierName "T" = T
Line 477 col 0 IdentifierName "sortBy" = { <T>(list: T[], iterator: Iterator<T, any>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator<T, any>, context?: any): T[]; <T>(list: T[], propertyName: string): T[]; <T>(list: Dictionary<T>, propertyName: string): T[]; }
Line 477 col 15 IdentifierName "T" = T
Line 477 col 18 IdentifierName "list" = Dictionary<T>
Line 477 col 24 IdentifierName "Dictionary" = Dictionary<T>
Line 477 col 35 IdentifierName "T" = T
Line 477 col 39 IdentifierName "propertyName" = string
Line 477 col 62 IdentifierName "T" = T
Line 478 col 0 IdentifierName "groupBy" = { <T>(list: T[], iterator?: Iterator<T, any>, context?: any): Dictionary<T[]>; <T>(list: Dictionary<T>, iterator?: Iterator<T, any>, context?: any): Dictionary<T[]>; <T>(list: T[], propertyName: string): Dictionary<T[]>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<T[]>; }
Line 479 col 16 IdentifierName "T" = T
Line 479 col 19 IdentifierName "list" = T[]
Line 479 col 25 IdentifierName "T" = T
Line 479 col 30 IdentifierName "iterator" = Iterator<T, any>
Line 479 col 41 IdentifierName "Iterator" = Iterator<T, U>
Line 479 col 50 IdentifierName "T" = T
Line 479 col 59 IdentifierName "context" = any
Line 479 col 75 IdentifierName "Dictionary" = Dictionary<T>
Line 479 col 86 IdentifierName "T" = T
Line 480 col 0 IdentifierName "groupBy" = { <T>(list: T[], iterator?: Iterator<T, any>, context?: any): Dictionary<T[]>; <T>(list: Dictionary<T>, iterator?: Iterator<T, any>, context?: any): Dictionary<T[]>; <T>(list: T[], propertyName: string): Dictionary<T[]>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<T[]>; }
Line 480 col 16 IdentifierName "T" = T
Line 480 col 19 IdentifierName "list" = Dictionary<T>
Line 480 col 25 IdentifierName "Dictionary" = Dictionary<T>
Line 480 col 36 IdentifierName "T" = T
Line 480 col 40 IdentifierName "iterator" = Iterator<T, any>
Line 480 col 51 IdentifierName "Iterator" = Iterator<T, U>
Line 480 col 60 IdentifierName "T" = T
Line 480 col 69 IdentifierName "context" = any
Line 480 col 85 IdentifierName "Dictionary" = Dictionary<T>
Line 480 col 96 IdentifierName "T" = T
Line 481 col 0 IdentifierName "groupBy" = { <T>(list: T[], iterator?: Iterator<T, any>, context?: any): Dictionary<T[]>; <T>(list: Dictionary<T>, iterator?: Iterator<T, any>, context?: any): Dictionary<T[]>; <T>(list: T[], propertyName: string): Dictionary<T[]>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<T[]>; }
Line 481 col 16 IdentifierName "T" = T
Line 481 col 19 IdentifierName "list" = T[]
Line 481 col 25 IdentifierName "T" = T
Line 481 col 30 IdentifierName "propertyName" = string
Line 481 col 53 IdentifierName "Dictionary" = Dictionary<T>
Line 481 col 64 IdentifierName "T" = T
Line 482 col 0 IdentifierName "groupBy" = { <T>(list: T[], iterator?: Iterator<T, any>, context?: any): Dictionary<T[]>; <T>(list: Dictionary<T>, iterator?: Iterator<T, any>, context?: any): Dictionary<T[]>; <T>(list: T[], propertyName: string): Dictionary<T[]>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<T[]>; }
Line 482 col 16 IdentifierName "T" = T
Line 482 col 19 IdentifierName "list" = Dictionary<T>
Line 482 col 25 IdentifierName "Dictionary" = Dictionary<T>
Line 482 col 36 IdentifierName "T" = T
Line 482 col 40 IdentifierName "propertyName" = string
Line 482 col 63 IdentifierName "Dictionary" = Dictionary<T>
Line 482 col 74 IdentifierName "T" = T
Line 483 col 0 IdentifierName "countBy" = { <T>(list: T[], iterator?: Iterator<T, any>, context?: any): Dictionary<number>; <T>(list: Dictionary<T>, iterator?: Iterator<T, any>, context?: any): Dictionary<number>; <T>(list: T[], propertyName: string): Dictionary<number>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<number>; }
Line 484 col 16 IdentifierName "T" = T
Line 484 col 19 IdentifierName "list" = T[]
Line 484 col 25 IdentifierName "T" = T
Line 484 col 30 IdentifierName "iterator" = Iterator<T, any>
Line 484 col 41 IdentifierName "Iterator" = Iterator<T, U>
Line 484 col 50 IdentifierName "T" = T
Line 484 col 59 IdentifierName "context" = any
Line 484 col 75 IdentifierName "Dictionary" = Dictionary<T>
Line 485 col 0 IdentifierName "countBy" = { <T>(list: T[], iterator?: Iterator<T, any>, context?: any): Dictionary<number>; <T>(list: Dictionary<T>, iterator?: Iterator<T, any>, context?: any): Dictionary<number>; <T>(list: T[], propertyName: string): Dictionary<number>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<number>; }
Line 485 col 16 IdentifierName "T" = T
Line 485 col 19 IdentifierName "list" = Dictionary<T>
Line 485 col 25 IdentifierName "Dictionary" = Dictionary<T>
Line 485 col 36 IdentifierName "T" = T
Line 485 col 40 IdentifierName "iterator" = Iterator<T, any>
Line 485 col 51 IdentifierName "Iterator" = Iterator<T, U>
Line 485 col 60 IdentifierName "T" = T
Line 485 col 69 IdentifierName "context" = any
Line 485 col 85 IdentifierName "Dictionary" = Dictionary<T>
Line 486 col 0 IdentifierName "countBy" = { <T>(list: T[], iterator?: Iterator<T, any>, context?: any): Dictionary<number>; <T>(list: Dictionary<T>, iterator?: Iterator<T, any>, context?: any): Dictionary<number>; <T>(list: T[], propertyName: string): Dictionary<number>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<number>; }
Line 486 col 16 IdentifierName "T" = T
Line 486 col 19 IdentifierName "list" = T[]
Line 486 col 25 IdentifierName "T" = T
Line 486 col 30 IdentifierName "propertyName" = string
Line 486 col 53 IdentifierName "Dictionary" = Dictionary<T>
Line 487 col 0 IdentifierName "countBy" = { <T>(list: T[], iterator?: Iterator<T, any>, context?: any): Dictionary<number>; <T>(list: Dictionary<T>, iterator?: Iterator<T, any>, context?: any): Dictionary<number>; <T>(list: T[], propertyName: string): Dictionary<number>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<number>; }
Line 487 col 16 IdentifierName "T" = T
Line 487 col 19 IdentifierName "list" = Dictionary<T>
Line 487 col 25 IdentifierName "Dictionary" = Dictionary<T>
Line 487 col 36 IdentifierName "T" = T
Line 487 col 40 IdentifierName "propertyName" = string
Line 487 col 63 IdentifierName "Dictionary" = Dictionary<T>
Line 488 col 0 IdentifierName "shuffle" = { <T>(list: T[]): T[]; <T>(list: Dictionary<T>): T[]; }
Line 489 col 16 IdentifierName "T" = T
Line 489 col 19 IdentifierName "list" = T[]
Line 489 col 25 IdentifierName "T" = T
Line 489 col 31 IdentifierName "T" = T
Line 490 col 0 IdentifierName "shuffle" = { <T>(list: T[]): T[]; <T>(list: Dictionary<T>): T[]; }
Line 490 col 16 IdentifierName "T" = T
Line 490 col 19 IdentifierName "list" = Dictionary<T>
Line 490 col 25 IdentifierName "Dictionary" = Dictionary<T>
Line 490 col 36 IdentifierName "T" = T
Line 490 col 41 IdentifierName "T" = T
Line 491 col 0 IdentifierName "toArray" = { <T>(list: T[]): T[]; <T>(list: Dictionary<T>): T[]; }
Line 492 col 16 IdentifierName "T" = T
Line 492 col 19 IdentifierName "list" = T[]
Line 492 col 25 IdentifierName "T" = T
Line 492 col 31 IdentifierName "T" = T
Line 493 col 0 IdentifierName "toArray" = { <T>(list: T[]): T[]; <T>(list: Dictionary<T>): T[]; }
Line 493 col 16 IdentifierName "T" = T
Line 493 col 19 IdentifierName "list" = Dictionary<T>
Line 493 col 25 IdentifierName "Dictionary" = Dictionary<T>
Line 493 col 36 IdentifierName "T" = T
Line 493 col 41 IdentifierName "T" = T
Line 494 col 0 IdentifierName "size" = { <T>(list: T[]): number; <T>(list: Dictionary<T>): number; }
Line 495 col 13 IdentifierName "T" = T
Line 495 col 16 IdentifierName "list" = T[]
Line 495 col 22 IdentifierName "T" = T
Line 496 col 0 IdentifierName "size" = { <T>(list: T[]): number; <T>(list: Dictionary<T>): number; }
Line 496 col 13 IdentifierName "T" = T
Line 496 col 16 IdentifierName "list" = Dictionary<T>
Line 496 col 22 IdentifierName "Dictionary" = Dictionary<T>
Line 496 col 33 IdentifierName "T" = T
Line 497 col 0 IdentifierName "first" = { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
Line 498 col 14 IdentifierName "T" = T
Line 498 col 17 IdentifierName "list" = T[]
Line 498 col 23 IdentifierName "T" = T
Line 498 col 29 IdentifierName "T" = T
Line 499 col 0 IdentifierName "first" = { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
Line 499 col 14 IdentifierName "T" = T
Line 499 col 17 IdentifierName "list" = T[]
Line 499 col 23 IdentifierName "T" = T
Line 499 col 28 IdentifierName "count" = number
Line 499 col 44 IdentifierName "T" = T
Line 500 col 0 IdentifierName "head" = { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
Line 500 col 13 IdentifierName "T" = T
Line 500 col 16 IdentifierName "list" = T[]
Line 500 col 22 IdentifierName "T" = T
Line 500 col 28 IdentifierName "T" = T
Line 501 col 0 IdentifierName "head" = { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
Line 501 col 13 IdentifierName "T" = T
Line 501 col 16 IdentifierName "list" = T[]
Line 501 col 22 IdentifierName "T" = T
Line 501 col 27 IdentifierName "count" = number
Line 501 col 43 IdentifierName "T" = T
Line 502 col 0 IdentifierName "take" = { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
Line 502 col 13 IdentifierName "T" = T
Line 502 col 16 IdentifierName "list" = T[]
Line 502 col 22 IdentifierName "T" = T
Line 502 col 28 IdentifierName "T" = T
Line 503 col 0 IdentifierName "take" = { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
Line 503 col 13 IdentifierName "T" = T
Line 503 col 16 IdentifierName "list" = T[]
Line 503 col 22 IdentifierName "T" = T
Line 503 col 27 IdentifierName "count" = number
Line 503 col 43 IdentifierName "T" = T
Line 504 col 0 IdentifierName "initial" = { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
Line 505 col 16 IdentifierName "T" = T
Line 505 col 19 IdentifierName "list" = T[]
Line 505 col 25 IdentifierName "T" = T
Line 505 col 31 IdentifierName "T" = T
Line 506 col 0 IdentifierName "initial" = { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
Line 506 col 16 IdentifierName "T" = T
Line 506 col 19 IdentifierName "list" = T[]
Line 506 col 25 IdentifierName "T" = T
Line 506 col 30 IdentifierName "count" = number
Line 506 col 46 IdentifierName "T" = T
Line 507 col 0 IdentifierName "last" = { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
Line 508 col 13 IdentifierName "T" = T
Line 508 col 16 IdentifierName "list" = T[]
Line 508 col 22 IdentifierName "T" = T
Line 508 col 28 IdentifierName "T" = T
Line 509 col 0 IdentifierName "last" = { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
Line 509 col 13 IdentifierName "T" = T
Line 509 col 16 IdentifierName "list" = T[]
Line 509 col 22 IdentifierName "T" = T
Line 509 col 27 IdentifierName "count" = number
Line 509 col 43 IdentifierName "T" = T
Line 510 col 0 IdentifierName "rest" = <T>(list: T[], index?: number) => T[]
Line 511 col 13 IdentifierName "T" = T
Line 511 col 16 IdentifierName "list" = T[]
Line 511 col 22 IdentifierName "T" = T
Line 511 col 27 IdentifierName "index" = number
Line 511 col 44 IdentifierName "T" = T
Line 512 col 0 IdentifierName "compact" = <T>(list: T[]) => T[]
Line 513 col 16 IdentifierName "T" = T
Line 513 col 19 IdentifierName "list" = T[]
Line 513 col 25 IdentifierName "T" = T
Line 513 col 31 IdentifierName "T" = T
Line 514 col 0 IdentifierName "flatten" = { <T>(list: T[][]): T[]; <T>(array: any[], shallow?: boolean): T[]; }
Line 515 col 16 IdentifierName "T" = T
Line 515 col 19 IdentifierName "list" = T[][]
Line 515 col 25 IdentifierName "T" = T
Line 515 col 33 IdentifierName "T" = T
Line 516 col 0 IdentifierName "flatten" = { <T>(list: T[][]): T[]; <T>(array: any[], shallow?: boolean): T[]; }
Line 516 col 16 IdentifierName "T" = T
Line 516 col 19 IdentifierName "array" = any[]
Line 516 col 33 IdentifierName "shallow" = boolean
Line 516 col 53 IdentifierName "T" = T
Line 517 col 0 IdentifierName "without" = <T>(list: T[], ...values: T[]) => T[]
Line 518 col 16 IdentifierName "T" = T
Line 518 col 19 IdentifierName "list" = T[]
Line 518 col 25 IdentifierName "T" = T
Line 518 col 33 IdentifierName "values" = T[]
Line 518 col 41 IdentifierName "T" = T
Line 518 col 47 IdentifierName "T" = T
Line 519 col 0 IdentifierName "union" = <T>(...arrays: T[][]) => T[]
Line 520 col 14 IdentifierName "T" = T
Line 520 col 20 IdentifierName "arrays" = T[][]
Line 520 col 28 IdentifierName "T" = T
Line 520 col 36 IdentifierName "T" = T
Line 521 col 0 IdentifierName "intersection" = <T>(...arrays: T[][]) => T[]
Line 522 col 21 IdentifierName "T" = T
Line 522 col 27 IdentifierName "arrays" = T[][]
Line 522 col 35 IdentifierName "T" = T
Line 522 col 43 IdentifierName "T" = T
Line 523 col 0 IdentifierName "difference" = <T>(list: T[], ...others: T[][]) => T[]
Line 524 col 19 IdentifierName "T" = T
Line 524 col 22 IdentifierName "list" = T[]
Line 524 col 28 IdentifierName "T" = T
Line 524 col 36 IdentifierName "others" = T[][]
Line 524 col 44 IdentifierName "T" = T
Line 524 col 52 IdentifierName "T" = T
Line 525 col 0 IdentifierName "uniq" = { <T>(list: T[], isSorted?: boolean): T[]; <T, U>(list: T[], isSorted: boolean, iterator: Iterator<T, U>, context?: any): U[]; }
Line 526 col 13 IdentifierName "T" = T
Line 526 col 16 IdentifierName "list" = T[]
Line 526 col 22 IdentifierName "T" = T
Line 526 col 27 IdentifierName "isSorted" = boolean
Line 526 col 48 IdentifierName "T" = T
Line 527 col 0 IdentifierName "uniq" = { <T>(list: T[], isSorted?: boolean): T[]; <T, U>(list: T[], isSorted: boolean, iterator: Iterator<T, U>, context?: any): U[]; }
Line 527 col 13 IdentifierName "T" = T
Line 527 col 16 IdentifierName "U" = U
Line 527 col 19 IdentifierName "list" = T[]
Line 527 col 25 IdentifierName "T" = T
Line 527 col 30 IdentifierName "isSorted" = boolean
Line 527 col 49 IdentifierName "iterator" = Iterator<T, U>
Line 527 col 59 IdentifierName "Iterator" = Iterator<T, U>
Line 527 col 68 IdentifierName "T" = T
Line 527 col 71 IdentifierName "U" = U
Line 527 col 75 IdentifierName "context" = any
Line 527 col 91 IdentifierName "U" = U
Line 528 col 0 IdentifierName "unique" = { <T>(list: T[], isSorted?: boolean): T[]; <T, U>(list: T[], isSorted: boolean, iterator: Iterator<T, U>, context?: any): U[]; }
Line 528 col 15 IdentifierName "T" = T
Line 528 col 18 IdentifierName "list" = T[]
Line 528 col 24 IdentifierName "T" = T
Line 528 col 29 IdentifierName "isSorted" = boolean
Line 528 col 50 IdentifierName "T" = T
Line 529 col 0 IdentifierName "unique" = { <T>(list: T[], isSorted?: boolean): T[]; <T, U>(list: T[], isSorted: boolean, iterator: Iterator<T, U>, context?: any): U[]; }
Line 529 col 15 IdentifierName "T" = T
Line 529 col 18 IdentifierName "U" = U
Line 529 col 21 IdentifierName "list" = T[]
Line 529 col 27 IdentifierName "T" = T
Line 529 col 32 IdentifierName "isSorted" = boolean
Line 529 col 51 IdentifierName "iterator" = Iterator<T, U>
Line 529 col 61 IdentifierName "Iterator" = Iterator<T, U>
Line 529 col 70 IdentifierName "T" = T
Line 529 col 73 IdentifierName "U" = U
Line 529 col 77 IdentifierName "context" = any
Line 529 col 93 IdentifierName "U" = U
Line 530 col 0 IdentifierName "zip" = { <T0, T1>(a0: T0[], a1: T1[]): Tuple2<T0, T1>[]; <T0, T1, T2>(a0: T0[], a1: T1[], a2: T2[]): Tuple3<T0, T1, T2>[]; <T0, T1, T2, T3>(a0: T0[], a1: T1[], a2: T2[], a3: T3[]): Tuple4<T0, T1, T2, T3>[]; (...arrays: any[][]): any[][]; }
Line 531 col 12 IdentifierName "T0" = T0
Line 531 col 16 IdentifierName "T1" = T1
Line 531 col 20 IdentifierName "a0" = T0[]
Line 531 col 24 IdentifierName "T0" = T0
Line 531 col 30 IdentifierName "a1" = T1[]
Line 531 col 34 IdentifierName "T1" = T1
Line 531 col 41 IdentifierName "Tuple2" = Tuple2<T0, T1>
Line 531 col 48 IdentifierName "T0" = T0
Line 531 col 52 IdentifierName "T1" = T1
Line 532 col 0 IdentifierName "zip" = { <T0, T1>(a0: T0[], a1: T1[]): Tuple2<T0, T1>[]; <T0, T1, T2>(a0: T0[], a1: T1[], a2: T2[]): Tuple3<T0, T1, T2>[]; <T0, T1, T2, T3>(a0: T0[], a1: T1[], a2: T2[], a3: T3[]): Tuple4<T0, T1, T2, T3>[]; (...arrays: any[][]): any[][]; }
Line 532 col 12 IdentifierName "T0" = T0
Line 532 col 16 IdentifierName "T1" = T1
Line 532 col 20 IdentifierName "T2" = T2
Line 532 col 24 IdentifierName "a0" = T0[]
Line 532 col 28 IdentifierName "T0" = T0
Line 532 col 34 IdentifierName "a1" = T1[]
Line 532 col 38 IdentifierName "T1" = T1
Line 532 col 44 IdentifierName "a2" = T2[]
Line 532 col 48 IdentifierName "T2" = T2
Line 532 col 55 IdentifierName "Tuple3" = Tuple3<T0, T1, T2>
Line 532 col 62 IdentifierName "T0" = T0
Line 532 col 66 IdentifierName "T1" = T1
Line 532 col 70 IdentifierName "T2" = T2
Line 533 col 0 IdentifierName "zip" = { <T0, T1>(a0: T0[], a1: T1[]): Tuple2<T0, T1>[]; <T0, T1, T2>(a0: T0[], a1: T1[], a2: T2[]): Tuple3<T0, T1, T2>[]; <T0, T1, T2, T3>(a0: T0[], a1: T1[], a2: T2[], a3: T3[]): Tuple4<T0, T1, T2, T3>[]; (...arrays: any[][]): any[][]; }
Line 533 col 12 IdentifierName "T0" = T0
Line 533 col 16 IdentifierName "T1" = T1
Line 533 col 20 IdentifierName "T2" = T2
Line 533 col 24 IdentifierName "T3" = T3
Line 533 col 28 IdentifierName "a0" = T0[]
Line 533 col 32 IdentifierName "T0" = T0
Line 533 col 38 IdentifierName "a1" = T1[]
Line 533 col 42 IdentifierName "T1" = T1
Line 533 col 48 IdentifierName "a2" = T2[]
Line 533 col 52 IdentifierName "T2" = T2
Line 533 col 58 IdentifierName "a3" = T3[]
Line 533 col 62 IdentifierName "T3" = T3
Line 533 col 69 IdentifierName "Tuple4" = Tuple4<T0, T1, T2, T3>
Line 533 col 76 IdentifierName "T0" = T0
Line 533 col 80 IdentifierName "T1" = T1
Line 533 col 84 IdentifierName "T2" = T2
Line 533 col 88 IdentifierName "T3" = T3
Line 534 col 0 IdentifierName "zip" = { <T0, T1>(a0: T0[], a1: T1[]): Tuple2<T0, T1>[]; <T0, T1, T2>(a0: T0[], a1: T1[], a2: T2[]): Tuple3<T0, T1, T2>[]; <T0, T1, T2, T3>(a0: T0[], a1: T1[], a2: T2[], a3: T3[]): Tuple4<T0, T1, T2, T3>[]; (...arrays: any[][]): any[][]; }
Line 534 col 15 IdentifierName "arrays" = any[][]
Line 535 col 0 IdentifierName "object" = { (list: any[][]): any; (keys: string[], values: any[]): any; }
Line 536 col 15 IdentifierName "list" = any[][]
Line 537 col 0 IdentifierName "object" = { (list: any[][]): any; (keys: string[], values: any[]): any; }
Line 537 col 15 IdentifierName "keys" = string[]
Line 537 col 31 IdentifierName "values" = any[]
Line 538 col 0 IdentifierName "indexOf" = <T>(list: T[], value: T, isSorted?: boolean) => number
Line 539 col 16 IdentifierName "T" = T
Line 539 col 19 IdentifierName "list" = T[]
Line 539 col 25 IdentifierName "T" = T
Line 539 col 30 IdentifierName "value" = T
Line 539 col 37 IdentifierName "T" = T
Line 539 col 40 IdentifierName "isSorted" = boolean
Line 540 col 0 IdentifierName "lastIndexOf" = <T>(list: T[], value: T, fromIndex?: number) => number
Line 541 col 20 IdentifierName "T" = T
Line 541 col 23 IdentifierName "list" = T[]
Line 541 col 29 IdentifierName "T" = T
Line 541 col 34 IdentifierName "value" = T
Line 541 col 41 IdentifierName "T" = T
Line 541 col 44 IdentifierName "fromIndex" = number
Line 542 col 0 IdentifierName "sortedIndex" = { <T>(list: T[], obj: T, propertyName: string): number; <T>(list: T[], obj: T, iterator?: Iterator<T, any>, context?: any): number; }
Line 543 col 20 IdentifierName "T" = T
Line 543 col 23 IdentifierName "list" = T[]
Line 543 col 29 IdentifierName "T" = T
Line 543 col 34 IdentifierName "obj" = T
Line 543 col 39 IdentifierName "T" = T
Line 543 col 42 IdentifierName "propertyName" = string
Line 544 col 0 IdentifierName "sortedIndex" = { <T>(list: T[], obj: T, propertyName: string): number; <T>(list: T[], obj: T, iterator?: Iterator<T, any>, context?: any): number; }
Line 544 col 20 IdentifierName "T" = T
Line 544 col 23 IdentifierName "list" = T[]
Line 544 col 29 IdentifierName "T" = T
Line 544 col 34 IdentifierName "obj" = T
Line 544 col 39 IdentifierName "T" = T
Line 544 col 42 IdentifierName "iterator" = Iterator<T, any>
Line 544 col 53 IdentifierName "Iterator" = Iterator<T, U>
Line 544 col 62 IdentifierName "T" = T
Line 544 col 71 IdentifierName "context" = any
Line 545 col 0 IdentifierName "range" = { (stop: number): number[]; (start: number, stop: number, step?: number): number[]; }
Line 546 col 14 IdentifierName "stop" = number
Line 547 col 0 IdentifierName "range" = { (stop: number): number[]; (start: number, stop: number, step?: number): number[]; }
Line 547 col 14 IdentifierName "start" = number
Line 547 col 29 IdentifierName "stop" = number
Line 547 col 43 IdentifierName "step" = number
Line 548 col 0 IdentifierName "bind" = { <T extends Function>(func: T, object: any): T; (func: Function, object: any, ...args: any[]): Function; }
Line 549 col 13 IdentifierName "T" = T
Line 549 col 23 IdentifierName "Function" = Function
Line 549 col 33 IdentifierName "func" = T
Line 549 col 39 IdentifierName "T" = T
Line 549 col 42 IdentifierName "object" = any
Line 549 col 56 IdentifierName "T" = T
Line 550 col 0 IdentifierName "bind" = { <T extends Function>(func: T, object: any): T; (func: Function, object: any, ...args: any[]): Function; }
Line 550 col 13 IdentifierName "func" = Function
Line 550 col 19 IdentifierName "Function" = Function
Line 550 col 29 IdentifierName "object" = any
Line 550 col 45 IdentifierName "args" = any[]
Line 550 col 59 IdentifierName "Function" = Function
Line 551 col 0 IdentifierName "bindAll" = <T>(object: T, ...methodNames: string[]) => T
Line 552 col 16 IdentifierName "T" = T
Line 552 col 19 IdentifierName "object" = T
Line 552 col 27 IdentifierName "T" = T
Line 552 col 33 IdentifierName "methodNames" = string[]
Line 552 col 57 IdentifierName "T" = T
Line 553 col 0 IdentifierName "partial" = (func: Function, ...args: any[]) => Function
Line 554 col 16 IdentifierName "func" = Function
Line 554 col 22 IdentifierName "Function" = Function
Line 554 col 35 IdentifierName "args" = any[]
Line 554 col 49 IdentifierName "Function" = Function
Line 555 col 0 IdentifierName "memoize" = <T extends Function>(func: T, hashFunction?: Function) => T
Line 556 col 16 IdentifierName "T" = T
Line 556 col 26 IdentifierName "Function" = Function
Line 556 col 36 IdentifierName "func" = T
Line 556 col 42 IdentifierName "T" = T
Line 556 col 45 IdentifierName "hashFunction" = Function
Line 556 col 60 IdentifierName "Function" = Function
Line 556 col 71 IdentifierName "T" = T
Line 557 col 0 IdentifierName "delay" = (func: Function, wait: number, ...args: any[]) => number
Line 558 col 14 IdentifierName "func" = Function
Line 558 col 20 IdentifierName "Function" = Function
Line 558 col 30 IdentifierName "wait" = number
Line 558 col 47 IdentifierName "args" = any[]
Line 559 col 0 IdentifierName "defer" = (func: Function, ...args: any[]) => number
Line 560 col 14 IdentifierName "func" = Function
Line 560 col 20 IdentifierName "Function" = Function
Line 560 col 33 IdentifierName "args" = any[]
Line 561 col 0 IdentifierName "throttle" = <T extends Function>(func: T, wait: number) => T
Line 562 col 17 IdentifierName "T" = T
Line 562 col 27 IdentifierName "Function" = Function
Line 562 col 37 IdentifierName "func" = T
Line 562 col 43 IdentifierName "T" = T
Line 562 col 46 IdentifierName "wait" = number
Line 562 col 61 IdentifierName "T" = T
Line 563 col 0 IdentifierName "debounce" = <T extends Function>(func: T, wait: number, immediate?: boolean) => T
Line 564 col 17 IdentifierName "T" = T
Line 564 col 27 IdentifierName "Function" = Function
Line 564 col 37 IdentifierName "func" = T
Line 564 col 43 IdentifierName "T" = T
Line 564 col 46 IdentifierName "wait" = number
Line 564 col 60 IdentifierName "immediate" = boolean
Line 564 col 82 IdentifierName "T" = T
Line 565 col 0 IdentifierName "once" = <T extends Function>(func: T) => T
Line 566 col 13 IdentifierName "T" = T
Line 566 col 23 IdentifierName "Function" = Function
Line 566 col 33 IdentifierName "func" = T
Line 566 col 39 IdentifierName "T" = T
Line 566 col 43 IdentifierName "T" = T
Line 567 col 0 IdentifierName "after" = <T extends Function>(count: number, func: T) => T
Line 568 col 14 IdentifierName "T" = T
Line 568 col 24 IdentifierName "Function" = Function
Line 568 col 34 IdentifierName "count" = number
Line 568 col 49 IdentifierName "func" = T
Line 568 col 55 IdentifierName "T" = T
Line 568 col 59 IdentifierName "T" = T
Line 569 col 0 IdentifierName "wrap" = <T extends Function>(func: T, wrapper: (func: T, ...args: any[]) => any) => T
Line 570 col 13 IdentifierName "T" = T
Line 570 col 23 IdentifierName "Function" = Function
Line 570 col 33 IdentifierName "func" = T
Line 570 col 39 IdentifierName "T" = T
Line 570 col 42 IdentifierName "wrapper" = (func: T, ...args: any[]) => any
Line 570 col 52 IdentifierName "func" = T
Line 570 col 58 IdentifierName "T" = T
Line 570 col 64 IdentifierName "args" = any[]
Line 570 col 86 IdentifierName "T" = T
Line 571 col 0 IdentifierName "compose" = (...funcs: Function[]) => Function
Line 572 col 19 IdentifierName "funcs" = Function[]
Line 572 col 26 IdentifierName "Function" = Function
Line 572 col 39 IdentifierName "Function" = Function
Line 573 col 0 IdentifierName "keys" = (object: any) => string[]
Line 574 col 13 IdentifierName "object" = any
Line 575 col 0 IdentifierName "values" = (object: any) => any[]
Line 576 col 15 IdentifierName "object" = any
Line 577 col 0 IdentifierName "pairs" = (object: any) => any[][]
Line 578 col 14 IdentifierName "object" = any
Line 579 col 0 IdentifierName "invert" = (object: any) => any
Line 580 col 15 IdentifierName "object" = any
Line 581 col 0 IdentifierName "functions" = (object: any) => string[]
Line 582 col 18 IdentifierName "object" = any
Line 583 col 0 IdentifierName "methods" = (object: any) => string[]
Line 583 col 16 IdentifierName "object" = any
Line 584 col 0 IdentifierName "extend" = <T>(destination: T, ...sources: any[]) => T
Line 585 col 15 IdentifierName "T" = T
Line 585 col 18 IdentifierName "destination" = T
Line 585 col 31 IdentifierName "T" = T
Line 585 col 37 IdentifierName "sources" = any[]
Line 585 col 54 IdentifierName "T" = T
Line 586 col 0 IdentifierName "pick" = <T>(object: T, ...keys: string[]) => T
Line 587 col 13 IdentifierName "T" = T
Line 587 col 16 IdentifierName "object" = T
Line 587 col 24 IdentifierName "T" = T
Line 587 col 30 IdentifierName "keys" = string[]
Line 587 col 47 IdentifierName "T" = T
Line 588 col 0 IdentifierName "omit" = <T>(object: T, ...keys: string[]) => T
Line 589 col 13 IdentifierName "T" = T
Line 589 col 16 IdentifierName "object" = T
Line 589 col 24 IdentifierName "T" = T
Line 589 col 30 IdentifierName "keys" = string[]
Line 589 col 47 IdentifierName "T" = T
Line 590 col 0 IdentifierName "defaults" = <T>(object: T, ...defaults: any[]) => T
Line 591 col 17 IdentifierName "T" = T
Line 591 col 20 IdentifierName "object" = T
Line 591 col 28 IdentifierName "T" = T
Line 591 col 34 IdentifierName "defaults" = any[]
Line 591 col 52 IdentifierName "T" = T
Line 592 col 0 IdentifierName "clone" = <T>(object: T) => T
Line 593 col 14 IdentifierName "T" = T
Line 593 col 17 IdentifierName "object" = T
Line 593 col 25 IdentifierName "T" = T
Line 593 col 29 IdentifierName "T" = T
Line 594 col 0 IdentifierName "tap" = <T>(object: T, interceptor: (object: T) => void) => T
Line 595 col 12 IdentifierName "T" = T
Line 595 col 15 IdentifierName "object" = T
Line 595 col 23 IdentifierName "T" = T
Line 595 col 26 IdentifierName "interceptor" = (object: T) => void
Line 595 col 40 IdentifierName "object" = T
Line 595 col 48 IdentifierName "T" = T
Line 595 col 61 IdentifierName "T" = T
Line 596 col 0 IdentifierName "has" = (object: any, key: string) => boolean
Line 597 col 12 IdentifierName "object" = any
Line 597 col 25 IdentifierName "key" = string
Line 598 col 0 IdentifierName "isEqual" = <T>(object: T, other: T) => boolean
Line 599 col 16 IdentifierName "T" = T
Line 599 col 19 IdentifierName "object" = T
Line 599 col 27 IdentifierName "T" = T
Line 599 col 30 IdentifierName "other" = T
Line 599 col 37 IdentifierName "T" = T
Line 600 col 0 IdentifierName "isEmpty" = (object: any) => boolean
Line 601 col 16 IdentifierName "object" = any
Line 602 col 0 IdentifierName "isElement" = (object: any) => boolean
Line 602 col 18 IdentifierName "object" = any
Line 603 col 0 IdentifierName "isArray" = (object: any) => boolean
Line 603 col 16 IdentifierName "object" = any
Line 604 col 0 IdentifierName "isObject" = (value: any) => boolean
Line 604 col 17 IdentifierName "value" = any
Line 605 col 0 IdentifierName "isArguments" = (object: any) => boolean
Line 605 col 20 IdentifierName "object" = any
Line 606 col 0 IdentifierName "isFunction" = (object: any) => boolean
Line 606 col 19 IdentifierName "object" = any
Line 607 col 0 IdentifierName "isString" = (object: any) => boolean
Line 607 col 17 IdentifierName "object" = any
Line 608 col 0 IdentifierName "isNumber" = (object: any) => boolean
Line 608 col 17 IdentifierName "object" = any
Line 609 col 0 IdentifierName "isFinite" = (object: any) => boolean
Line 609 col 17 IdentifierName "object" = any
Line 610 col 0 IdentifierName "isBoolean" = (object: any) => boolean
Line 610 col 18 IdentifierName "object" = any
Line 611 col 0 IdentifierName "isDate" = (object: any) => boolean
Line 611 col 15 IdentifierName "object" = any
Line 612 col 0 IdentifierName "isRegExp" = (object: any) => boolean
Line 612 col 17 IdentifierName "object" = any
Line 613 col 0 IdentifierName "isNaN" = (object: any) => boolean
Line 613 col 14 IdentifierName "object" = any
Line 614 col 0 IdentifierName "isNull" = (object: any) => boolean
Line 614 col 15 IdentifierName "object" = any
Line 615 col 0 IdentifierName "isUndefined" = (value: any) => boolean
Line 615 col 20 IdentifierName "value" = any
Line 616 col 0 IdentifierName "noConflict" = () => Static
Line 617 col 22 IdentifierName "Static" = Static
Line 618 col 0 IdentifierName "identity" = <T>(value: T) => T
Line 619 col 17 IdentifierName "T" = T
Line 619 col 20 IdentifierName "value" = T
Line 619 col 27 IdentifierName "T" = T
Line 619 col 31 IdentifierName "T" = T
Line 620 col 0 IdentifierName "times" = <U>(n: number, iterator: Iterator<number, U>, context?: any) => U[]
Line 621 col 14 IdentifierName "U" = U
Line 621 col 17 IdentifierName "n" = number
Line 621 col 28 IdentifierName "iterator" = Iterator<number, U>
Line 621 col 38 IdentifierName "Iterator" = Iterator<T, U>
Line 621 col 55 IdentifierName "U" = U
Line 621 col 59 IdentifierName "context" = any
Line 621 col 75 IdentifierName "U" = U
Line 622 col 0 IdentifierName "random" = { (max: number): number; (min: number, max: number): number; }
Line 623 col 15 IdentifierName "max" = number
Line 624 col 0 IdentifierName "random" = { (max: number): number; (min: number, max: number): number; }
Line 624 col 15 IdentifierName "min" = number
Line 624 col 28 IdentifierName "max" = number
Line 625 col 0 IdentifierName "mixin" = (object: any) => void
Line 626 col 14 IdentifierName "object" = any
Line 627 col 0 IdentifierName "uniqueId" = { (): number; (prefix: string): string; }
Line 629 col 0 IdentifierName "uniqueId" = { (): number; (prefix: string): string; }
Line 629 col 17 IdentifierName "prefix" = string
Line 630 col 0 IdentifierName "escape" = (s: string) => string
Line 631 col 15 IdentifierName "s" = string
Line 632 col 0 IdentifierName "unescape" = (s: string) => string
Line 633 col 17 IdentifierName "s" = string
Line 634 col 0 IdentifierName "result" = (object: any, property: string) => any
Line 635 col 15 IdentifierName "object" = any
Line 635 col 28 IdentifierName "property" = string
Line 636 col 0 IdentifierName "templateSettings" = TemplateSettings
Line 637 col 26 IdentifierName "TemplateSettings" = TemplateSettings
Line 638 col 0 IdentifierName "template" = { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: TemplateSettings): string; }
Line 639 col 17 IdentifierName "templateString" = string
Line 639 col 43 IdentifierName "data" = any
Line 640 col 0 IdentifierName "template" = { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: TemplateSettings): string; }
Line 640 col 17 IdentifierName "templateString" = string
Line 640 col 41 IdentifierName "data" = any
Line 640 col 52 IdentifierName "settings" = TemplateSettings
Line 640 col 63 IdentifierName "TemplateSettings" = TemplateSettings
Line 644 col 12 IdentifierName "_" = Underscore.Static
Line 644 col 15 IdentifierName "Underscore" = Underscore
Line 644 col 26 IdentifierName "Static" = Underscore.Static