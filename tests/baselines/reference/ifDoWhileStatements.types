=== tests/cases/compiler/ifDoWhileStatements.ts ===
Line 0 col 10 IdentifierName "I" = I
Line 1 col 0 IdentifierName "id" = number
Line 4 col 6 IdentifierName "C" = C
Line 4 col 19 IdentifierName "I" = I
Line 5 col 0 IdentifierName "id" = number
Line 6 col 0 IdentifierName "name" = string
Line 9 col 6 IdentifierName "C2" = C2
Line 9 col 17 IdentifierName "C" = C
Line 10 col 0 IdentifierName "valid" = boolean
Line 13 col 6 IdentifierName "D" = D<T>
Line 13 col 8 IdentifierName "T" = T
Line 14 col 0 IdentifierName "source" = T
Line 14 col 12 IdentifierName "T" = T
Line 15 col 0 IdentifierName "recurse" = D<T>
Line 15 col 13 IdentifierName "D" = D<T>
Line 15 col 15 IdentifierName "T" = T
Line 16 col 0 IdentifierName "wrapped" = D<D<T>>
Line 16 col 13 IdentifierName "D" = D<T>
Line 16 col 15 IdentifierName "D" = D<T>
Line 16 col 17 IdentifierName "T" = T
Line 19 col 9 IdentifierName "F" = typeof F
Line 19 col 11 IdentifierName "x" = string
Line 20 col 9 IdentifierName "F2" = typeof F2
Line 20 col 12 IdentifierName "x" = number
Line 20 col 41 LessThanExpression "x < 42" = boolean
Line 20 col 41 IdentifierName "x" = number
Line 22 col 7 IdentifierName "M" = M
Line 23 col 17 IdentifierName "A" = A
Line 24 col 0 IdentifierName "name" = string
Line 27 col 20 IdentifierName "F2" = typeof F2
Line 27 col 23 IdentifierName "x" = number
Line 27 col 51 InvocationExpression "x.toString()" = string
Line 27 col 51 MemberAccessExpression "x.toString" = (radix?: number) => string
Line 27 col 51 IdentifierName "x" = number
Line 27 col 53 IdentifierName "toString" = (radix?: number) => string
Line 30 col 7 IdentifierName "N" = N
Line 31 col 17 IdentifierName "A" = A
Line 32 col 0 IdentifierName "id" = number
Line 35 col 20 IdentifierName "F2" = typeof F2
Line 35 col 23 IdentifierName "x" = number
Line 35 col 51 InvocationExpression "x.toString()" = string
Line 35 col 51 MemberAccessExpression "x.toString" = (radix?: number) => string
Line 35 col 51 IdentifierName "x" = number
Line 35 col 53 IdentifierName "toString" = (radix?: number) => string
Line 47 col 4 IdentifierName "undefined" = any
Line 48 col 7 IdentifierName "undefined" = any
Line 49 col 12 IdentifierName "undefined" = any
Line 67 col 4 ArrayLiteralExpression "[]" = any[]
Line 68 col 7 ArrayLiteralExpression "[]" = any[]
Line 69 col 12 ArrayLiteralExpression "[]" = any[]
Line 71 col 4 ArrayLiteralExpression "[1, 2]" = number[]
Line 72 col 7 ArrayLiteralExpression "[1, 2]" = number[]
Line 73 col 12 ArrayLiteralExpression "[1, 2]" = number[]
Line 75 col 4 ObjectLiteralExpression "{}" = {}
Line 76 col 7 ObjectLiteralExpression "{}" = {}
Line 77 col 12 ObjectLiteralExpression "{}" = {}
Line 79 col 4 ObjectLiteralExpression "{ x: 1, y: 'a' }" = { x: number; y: string; }
Line 79 col 6 IdentifierName "x" = number
Line 79 col 12 IdentifierName "y" = string
Line 80 col 7 ObjectLiteralExpression "{ x: 1, y: 'a' }" = { x: number; y: string; }
Line 80 col 9 IdentifierName "x" = number
Line 80 col 15 IdentifierName "y" = string
Line 81 col 12 ObjectLiteralExpression "{ x: 1, y: 'a' }" = { x: number; y: string; }
Line 81 col 14 IdentifierName "x" = number
Line 81 col 20 IdentifierName "y" = string
Line 83 col 4 ParenthesizedArrowFunctionExpression "() => 43" = () => number
Line 84 col 7 ParenthesizedArrowFunctionExpression "() => 43" = () => number
Line 85 col 12 ParenthesizedArrowFunctionExpression "() => 43" = () => number
Line 87 col 4 ObjectCreationExpression "new C()" = C
Line 87 col 8 IdentifierName "C" = typeof C
Line 88 col 7 ObjectCreationExpression "new C()" = C
Line 88 col 11 IdentifierName "C" = typeof C
Line 89 col 12 ObjectCreationExpression "new C()" = C
Line 89 col 16 IdentifierName "C" = typeof C
Line 91 col 4 ObjectCreationExpression "new D<C>()" = D<C>
Line 91 col 8 IdentifierName "D" = typeof D
Line 91 col 10 IdentifierName "C" = C
Line 92 col 7 ObjectCreationExpression "new D<C>()" = D<C>
Line 92 col 11 IdentifierName "D" = typeof D
Line 92 col 13 IdentifierName "C" = C
Line 93 col 12 ObjectCreationExpression "new D<C>()" = D<C>
Line 93 col 16 IdentifierName "D" = typeof D
Line 93 col 18 IdentifierName "C" = C
Line 96 col 4 IdentifierName "a" = boolean
Line 97 col 4 IdentifierName "a" = boolean
Line 98 col 7 IdentifierName "a" = boolean
Line 99 col 12 IdentifierName "a" = boolean
Line 101 col 4 IdentifierName "b" = any
Line 102 col 4 IdentifierName "b" = any
Line 103 col 7 IdentifierName "b" = any
Line 104 col 12 IdentifierName "b" = any
Line 106 col 4 IdentifierName "c" = any
Line 106 col 8 IdentifierName "undefined" = any
Line 107 col 4 IdentifierName "c" = any
Line 108 col 7 IdentifierName "c" = any
Line 109 col 12 IdentifierName "c" = any
Line 111 col 4 IdentifierName "d" = number
Line 112 col 4 IdentifierName "d" = number
Line 113 col 7 IdentifierName "d" = number
Line 114 col 12 IdentifierName "d" = number
Line 116 col 4 IdentifierName "e" = string
Line 117 col 4 IdentifierName "e" = string
Line 118 col 7 IdentifierName "e" = string
Line 119 col 12 IdentifierName "e" = string
Line 121 col 4 IdentifierName "f" = string
Line 122 col 4 IdentifierName "f" = string
Line 123 col 7 IdentifierName "f" = string
Line 124 col 12 IdentifierName "f" = string
Line 126 col 4 IdentifierName "g" = RegExp
Line 127 col 4 IdentifierName "g" = RegExp
Line 128 col 7 IdentifierName "g" = RegExp
Line 129 col 12 IdentifierName "g" = RegExp
Line 131 col 4 IdentifierName "h" = any[]
Line 131 col 8 ArrayLiteralExpression "[]" = any[]
Line 132 col 4 IdentifierName "h" = any[]
Line 133 col 7 IdentifierName "h" = any[]
Line 134 col 12 IdentifierName "h" = any[]
Line 136 col 4 IdentifierName "i" = number[]
Line 136 col 8 ArrayLiteralExpression "[1, 2]" = number[]
Line 137 col 4 IdentifierName "i" = number[]
Line 138 col 7 IdentifierName "i" = number[]
Line 139 col 12 IdentifierName "i" = number[]
Line 141 col 4 IdentifierName "j" = {}
Line 141 col 8 ObjectLiteralExpression "{}" = {}
Line 142 col 4 IdentifierName "j" = {}
Line 143 col 7 IdentifierName "j" = {}
Line 144 col 12 IdentifierName "j" = {}
Line 146 col 4 IdentifierName "k" = { x: number; y: string; }
Line 146 col 8 ObjectLiteralExpression "{ x: 1, y: 'a' }" = { x: number; y: string; }
Line 146 col 10 IdentifierName "x" = number
Line 146 col 16 IdentifierName "y" = string
Line 147 col 4 IdentifierName "k" = { x: number; y: string; }
Line 148 col 7 IdentifierName "k" = { x: number; y: string; }
Line 149 col 12 IdentifierName "k" = { x: number; y: string; }
Line 151 col 9 IdentifierName "fn" = typeof fn
Line 151 col 12 IdentifierName "x" = string
Line 151 col 25 IdentifierName "I" = I
Line 152 col 4 InvocationExpression "fn()" = I
Line 152 col 4 IdentifierName "fn" = typeof fn
Line 153 col 7 InvocationExpression "fn()" = I
Line 153 col 7 IdentifierName "fn" = typeof fn
Line 154 col 12 InvocationExpression "fn()" = I
Line 154 col 12 IdentifierName "fn" = typeof fn
Line 156 col 4 IdentifierName "fn" = typeof fn
Line 157 col 7 IdentifierName "fn" = typeof fn
Line 158 col 12 IdentifierName "fn" = typeof fn